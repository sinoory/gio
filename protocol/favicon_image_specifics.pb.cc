// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: favicon_image_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "favicon_image_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_favicon_5fimage_5fspecifics_2eproto() {
  delete FaviconData::default_instance_;
  delete FaviconImageSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FaviconData::default_instance_ = new FaviconData();
  FaviconImageSpecifics::default_instance_ = new FaviconImageSpecifics();
  FaviconData::default_instance_->InitAsDefaultInstance();
  FaviconImageSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_favicon_5fimage_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_once_);
void protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_favicon_5fimage_5fspecifics_2eproto {
  StaticDescriptorInitializer_favicon_5fimage_5fspecifics_2eproto() {
    protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
  }
} static_descriptor_initializer_favicon_5fimage_5fspecifics_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FaviconData::kFaviconFieldNumber;
const int FaviconData::kWidthFieldNumber;
const int FaviconData::kHeightFieldNumber;
#endif  // !_MSC_VER

FaviconData::FaviconData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FaviconData::InitAsDefaultInstance() {
}

FaviconData::FaviconData(const FaviconData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FaviconData::SharedCtor() {
  _cached_size_ = 0;
  favicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaviconData::~FaviconData() {
  SharedDtor();
}

void FaviconData::SharedDtor() {
  if (favicon_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FaviconData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FaviconData& FaviconData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

FaviconData* FaviconData::default_instance_ = NULL;

FaviconData* FaviconData::New() const {
  return new FaviconData;
}

void FaviconData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_favicon()) {
      if (favicon_ != &::google::protobuf::internal::GetEmptyString()) {
        favicon_->clear();
      }
    }
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaviconData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes favicon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_favicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaviconData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes favicon = 1;
  if (has_favicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->favicon(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int FaviconData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes favicon = 1;
    if (has_favicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->favicon());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaviconData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FaviconData*>(&from));
}

void FaviconData::MergeFrom(const FaviconData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_favicon()) {
      set_favicon(from.favicon());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaviconData::CopyFrom(const FaviconData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaviconData::IsInitialized() const {

  return true;
}

void FaviconData::Swap(FaviconData* other) {
  if (other != this) {
    std::swap(favicon_, other->favicon_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FaviconData::GetTypeName() const {
  return "sync_pb.FaviconData";
}


// ===================================================================

#ifndef _MSC_VER
const int FaviconImageSpecifics::kFaviconUrlFieldNumber;
const int FaviconImageSpecifics::kFaviconWebFieldNumber;
const int FaviconImageSpecifics::kFaviconWeb32FieldNumber;
const int FaviconImageSpecifics::kFaviconTouch64FieldNumber;
const int FaviconImageSpecifics::kFaviconTouchPrecomposed64FieldNumber;
#endif  // !_MSC_VER

FaviconImageSpecifics::FaviconImageSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FaviconImageSpecifics::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  favicon_web_ = const_cast< ::sync_pb::FaviconData*>(
      ::sync_pb::FaviconData::internal_default_instance());
#else
  favicon_web_ = const_cast< ::sync_pb::FaviconData*>(&::sync_pb::FaviconData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  favicon_web_32_ = const_cast< ::sync_pb::FaviconData*>(
      ::sync_pb::FaviconData::internal_default_instance());
#else
  favicon_web_32_ = const_cast< ::sync_pb::FaviconData*>(&::sync_pb::FaviconData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  favicon_touch_64_ = const_cast< ::sync_pb::FaviconData*>(
      ::sync_pb::FaviconData::internal_default_instance());
#else
  favicon_touch_64_ = const_cast< ::sync_pb::FaviconData*>(&::sync_pb::FaviconData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  favicon_touch_precomposed_64_ = const_cast< ::sync_pb::FaviconData*>(
      ::sync_pb::FaviconData::internal_default_instance());
#else
  favicon_touch_precomposed_64_ = const_cast< ::sync_pb::FaviconData*>(&::sync_pb::FaviconData::default_instance());
#endif
}

FaviconImageSpecifics::FaviconImageSpecifics(const FaviconImageSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FaviconImageSpecifics::SharedCtor() {
  _cached_size_ = 0;
  favicon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  favicon_web_ = NULL;
  favicon_web_32_ = NULL;
  favicon_touch_64_ = NULL;
  favicon_touch_precomposed_64_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaviconImageSpecifics::~FaviconImageSpecifics() {
  SharedDtor();
}

void FaviconImageSpecifics::SharedDtor() {
  if (favicon_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete favicon_web_;
    delete favicon_web_32_;
    delete favicon_touch_64_;
    delete favicon_touch_precomposed_64_;
  }
}

void FaviconImageSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FaviconImageSpecifics& FaviconImageSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

FaviconImageSpecifics* FaviconImageSpecifics::default_instance_ = NULL;

FaviconImageSpecifics* FaviconImageSpecifics::New() const {
  return new FaviconImageSpecifics;
}

void FaviconImageSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_favicon_url()) {
      if (favicon_url_ != &::google::protobuf::internal::GetEmptyString()) {
        favicon_url_->clear();
      }
    }
    if (has_favicon_web()) {
      if (favicon_web_ != NULL) favicon_web_->::sync_pb::FaviconData::Clear();
    }
    if (has_favicon_web_32()) {
      if (favicon_web_32_ != NULL) favicon_web_32_->::sync_pb::FaviconData::Clear();
    }
    if (has_favicon_touch_64()) {
      if (favicon_touch_64_ != NULL) favicon_touch_64_->::sync_pb::FaviconData::Clear();
    }
    if (has_favicon_touch_precomposed_64()) {
      if (favicon_touch_precomposed_64_ != NULL) favicon_touch_precomposed_64_->::sync_pb::FaviconData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaviconImageSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string favicon_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_favicon_web;
        break;
      }

      // optional .sync_pb.FaviconData favicon_web = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon_web:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_web()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_favicon_web_32;
        break;
      }

      // optional .sync_pb.FaviconData favicon_web_32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon_web_32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_web_32()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_favicon_touch_64;
        break;
      }

      // optional .sync_pb.FaviconData favicon_touch_64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon_touch_64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_touch_64()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_favicon_touch_precomposed_64;
        break;
      }

      // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon_touch_precomposed_64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_touch_precomposed_64()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaviconImageSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string favicon_url = 1;
  if (has_favicon_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->favicon_url(), output);
  }

  // optional .sync_pb.FaviconData favicon_web = 2;
  if (has_favicon_web()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->favicon_web(), output);
  }

  // optional .sync_pb.FaviconData favicon_web_32 = 3;
  if (has_favicon_web_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->favicon_web_32(), output);
  }

  // optional .sync_pb.FaviconData favicon_touch_64 = 4;
  if (has_favicon_touch_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->favicon_touch_64(), output);
  }

  // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
  if (has_favicon_touch_precomposed_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->favicon_touch_precomposed_64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int FaviconImageSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string favicon_url = 1;
    if (has_favicon_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon_url());
    }

    // optional .sync_pb.FaviconData favicon_web = 2;
    if (has_favicon_web()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->favicon_web());
    }

    // optional .sync_pb.FaviconData favicon_web_32 = 3;
    if (has_favicon_web_32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->favicon_web_32());
    }

    // optional .sync_pb.FaviconData favicon_touch_64 = 4;
    if (has_favicon_touch_64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->favicon_touch_64());
    }

    // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
    if (has_favicon_touch_precomposed_64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->favicon_touch_precomposed_64());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaviconImageSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FaviconImageSpecifics*>(&from));
}

void FaviconImageSpecifics::MergeFrom(const FaviconImageSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_favicon_url()) {
      set_favicon_url(from.favicon_url());
    }
    if (from.has_favicon_web()) {
      mutable_favicon_web()->::sync_pb::FaviconData::MergeFrom(from.favicon_web());
    }
    if (from.has_favicon_web_32()) {
      mutable_favicon_web_32()->::sync_pb::FaviconData::MergeFrom(from.favicon_web_32());
    }
    if (from.has_favicon_touch_64()) {
      mutable_favicon_touch_64()->::sync_pb::FaviconData::MergeFrom(from.favicon_touch_64());
    }
    if (from.has_favicon_touch_precomposed_64()) {
      mutable_favicon_touch_precomposed_64()->::sync_pb::FaviconData::MergeFrom(from.favicon_touch_precomposed_64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaviconImageSpecifics::CopyFrom(const FaviconImageSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaviconImageSpecifics::IsInitialized() const {

  return true;
}

void FaviconImageSpecifics::Swap(FaviconImageSpecifics* other) {
  if (other != this) {
    std::swap(favicon_url_, other->favicon_url_);
    std::swap(favicon_web_, other->favicon_web_);
    std::swap(favicon_web_32_, other->favicon_web_32_);
    std::swap(favicon_touch_64_, other->favicon_touch_64_);
    std::swap(favicon_touch_precomposed_64_, other->favicon_touch_precomposed_64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FaviconImageSpecifics::GetTypeName() const {
  return "sync_pb.FaviconImageSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
