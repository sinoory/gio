// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: synced_notification_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "synced_notification_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_synced_5fnotification_5fdata_2eproto() {
  delete SyncedNotificationIdentifier::default_instance_;
  delete SyncedNotificationCreator::default_instance_;
  delete SyncedNotificationRecipients::default_instance_;
  delete SyncedNotification::default_instance_;
  delete CoalescedSyncedNotification::default_instance_;
  delete SyncedNotificationList::default_instance_;
  delete MapData::default_instance_;
  delete MapData_Entry::default_instance_;
  delete Data::default_instance_;
  delete ListData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_synced_5fnotification_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_synced_5fnotification_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sync_pb::protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
  SyncedNotificationIdentifier::default_instance_ = new SyncedNotificationIdentifier();
  SyncedNotificationCreator::default_instance_ = new SyncedNotificationCreator();
  SyncedNotificationRecipients::default_instance_ = new SyncedNotificationRecipients();
  SyncedNotification::default_instance_ = new SyncedNotification();
  CoalescedSyncedNotification::default_instance_ = new CoalescedSyncedNotification();
  SyncedNotificationList::default_instance_ = new SyncedNotificationList();
  MapData::default_instance_ = new MapData();
  MapData_Entry::default_instance_ = new MapData_Entry();
  Data::default_instance_ = new Data();
  ListData::default_instance_ = new ListData();
  SyncedNotificationIdentifier::default_instance_->InitAsDefaultInstance();
  SyncedNotificationCreator::default_instance_->InitAsDefaultInstance();
  SyncedNotificationRecipients::default_instance_->InitAsDefaultInstance();
  SyncedNotification::default_instance_->InitAsDefaultInstance();
  CoalescedSyncedNotification::default_instance_->InitAsDefaultInstance();
  SyncedNotificationList::default_instance_->InitAsDefaultInstance();
  MapData::default_instance_->InitAsDefaultInstance();
  MapData_Entry::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  ListData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_synced_5fnotification_5fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_synced_5fnotification_5fdata_2eproto_once_);
void protobuf_AddDesc_synced_5fnotification_5fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_synced_5fnotification_5fdata_2eproto_once_,
                 &protobuf_AddDesc_synced_5fnotification_5fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_synced_5fnotification_5fdata_2eproto {
  StaticDescriptorInitializer_synced_5fnotification_5fdata_2eproto() {
    protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
  }
} static_descriptor_initializer_synced_5fnotification_5fdata_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SyncedNotificationIdentifier::kAppIdFieldNumber;
const int SyncedNotificationIdentifier::kCoalescingKeyFieldNumber;
#endif  // !_MSC_VER

SyncedNotificationIdentifier::SyncedNotificationIdentifier()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncedNotificationIdentifier::InitAsDefaultInstance() {
}

SyncedNotificationIdentifier::SyncedNotificationIdentifier(const SyncedNotificationIdentifier& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncedNotificationIdentifier::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  coalescing_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedNotificationIdentifier::~SyncedNotificationIdentifier() {
  SharedDtor();
}

void SyncedNotificationIdentifier::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete app_id_;
  }
  if (coalescing_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete coalescing_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncedNotificationIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedNotificationIdentifier& SyncedNotificationIdentifier::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#endif
  return *default_instance_;
}

SyncedNotificationIdentifier* SyncedNotificationIdentifier::default_instance_ = NULL;

SyncedNotificationIdentifier* SyncedNotificationIdentifier::New() const {
  return new SyncedNotificationIdentifier;
}

void SyncedNotificationIdentifier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::GetEmptyString()) {
        app_id_->clear();
      }
    }
    if (has_coalescing_key()) {
      if (coalescing_key_ != &::google::protobuf::internal::GetEmptyString()) {
        coalescing_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncedNotificationIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_coalescing_key;
        break;
      }

      // optional string coalescing_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coalescing_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coalescing_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncedNotificationIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->app_id(), output);
  }

  // optional string coalescing_key = 2;
  if (has_coalescing_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->coalescing_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncedNotificationIdentifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string coalescing_key = 2;
    if (has_coalescing_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coalescing_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedNotificationIdentifier::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedNotificationIdentifier*>(&from));
}

void SyncedNotificationIdentifier::MergeFrom(const SyncedNotificationIdentifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_coalescing_key()) {
      set_coalescing_key(from.coalescing_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncedNotificationIdentifier::CopyFrom(const SyncedNotificationIdentifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedNotificationIdentifier::IsInitialized() const {

  return true;
}

void SyncedNotificationIdentifier::Swap(SyncedNotificationIdentifier* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(coalescing_key_, other->coalescing_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncedNotificationIdentifier::GetTypeName() const {
  return "sync_pb.SyncedNotificationIdentifier";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncedNotificationCreator::kGaiaIdFieldNumber;
const int SyncedNotificationCreator::kIsSystemFieldNumber;
const int SyncedNotificationCreator::kAppIdFieldNumber;
#endif  // !_MSC_VER

SyncedNotificationCreator::SyncedNotificationCreator()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncedNotificationCreator::InitAsDefaultInstance() {
}

SyncedNotificationCreator::SyncedNotificationCreator(const SyncedNotificationCreator& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncedNotificationCreator::SharedCtor() {
  _cached_size_ = 0;
  gaia_id_ = GOOGLE_LONGLONG(0);
  is_system_ = false;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedNotificationCreator::~SyncedNotificationCreator() {
  SharedDtor();
}

void SyncedNotificationCreator::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete app_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncedNotificationCreator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedNotificationCreator& SyncedNotificationCreator::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#endif
  return *default_instance_;
}

SyncedNotificationCreator* SyncedNotificationCreator::default_instance_ = NULL;

SyncedNotificationCreator* SyncedNotificationCreator::New() const {
  return new SyncedNotificationCreator;
}

void SyncedNotificationCreator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gaia_id_ = GOOGLE_LONGLONG(0);
    is_system_ = false;
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::GetEmptyString()) {
        app_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncedNotificationCreator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gaia_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gaia_id_)));
          set_has_gaia_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_system;
        break;
      }

      // optional bool is_system = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_system:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_)));
          set_has_is_system();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_app_id;
        break;
      }

      // optional string app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncedNotificationCreator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 gaia_id = 1;
  if (has_gaia_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gaia_id(), output);
  }

  // optional bool is_system = 2;
  if (has_is_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_system(), output);
  }

  // optional string app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncedNotificationCreator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gaia_id = 1;
    if (has_gaia_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gaia_id());
    }

    // optional bool is_system = 2;
    if (has_is_system()) {
      total_size += 1 + 1;
    }

    // optional string app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedNotificationCreator::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedNotificationCreator*>(&from));
}

void SyncedNotificationCreator::MergeFrom(const SyncedNotificationCreator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gaia_id()) {
      set_gaia_id(from.gaia_id());
    }
    if (from.has_is_system()) {
      set_is_system(from.is_system());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncedNotificationCreator::CopyFrom(const SyncedNotificationCreator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedNotificationCreator::IsInitialized() const {

  return true;
}

void SyncedNotificationCreator::Swap(SyncedNotificationCreator* other) {
  if (other != this) {
    std::swap(gaia_id_, other->gaia_id_);
    std::swap(is_system_, other->is_system_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncedNotificationCreator::GetTypeName() const {
  return "sync_pb.SyncedNotificationCreator";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncedNotificationRecipients::kGaiaIdFieldNumber;
#endif  // !_MSC_VER

SyncedNotificationRecipients::SyncedNotificationRecipients()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncedNotificationRecipients::InitAsDefaultInstance() {
}

SyncedNotificationRecipients::SyncedNotificationRecipients(const SyncedNotificationRecipients& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncedNotificationRecipients::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedNotificationRecipients::~SyncedNotificationRecipients() {
  SharedDtor();
}

void SyncedNotificationRecipients::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncedNotificationRecipients::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedNotificationRecipients& SyncedNotificationRecipients::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#endif
  return *default_instance_;
}

SyncedNotificationRecipients* SyncedNotificationRecipients::default_instance_ = NULL;

SyncedNotificationRecipients* SyncedNotificationRecipients::New() const {
  return new SyncedNotificationRecipients;
}

void SyncedNotificationRecipients::Clear() {
  gaia_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncedNotificationRecipients::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 gaia_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gaia_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_gaia_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_gaia_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_gaia_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncedNotificationRecipients::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 gaia_id = 1;
  for (int i = 0; i < this->gaia_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->gaia_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncedNotificationRecipients::ByteSize() const {
  int total_size = 0;

  // repeated int64 gaia_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->gaia_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->gaia_id(i));
    }
    total_size += 1 * this->gaia_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedNotificationRecipients::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedNotificationRecipients*>(&from));
}

void SyncedNotificationRecipients::MergeFrom(const SyncedNotificationRecipients& from) {
  GOOGLE_CHECK_NE(&from, this);
  gaia_id_.MergeFrom(from.gaia_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncedNotificationRecipients::CopyFrom(const SyncedNotificationRecipients& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedNotificationRecipients::IsInitialized() const {

  return true;
}

void SyncedNotificationRecipients::Swap(SyncedNotificationRecipients* other) {
  if (other != this) {
    gaia_id_.Swap(&other->gaia_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncedNotificationRecipients::GetTypeName() const {
  return "sync_pb.SyncedNotificationRecipients";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncedNotification::kTypeFieldNumber;
const int SyncedNotification::kExternalIdFieldNumber;
const int SyncedNotification::kCreatorFieldNumber;
const int SyncedNotification::kClientDataFieldNumber;
#endif  // !_MSC_VER

SyncedNotification::SyncedNotification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncedNotification::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  creator_ = const_cast< ::sync_pb::SyncedNotificationCreator*>(
      ::sync_pb::SyncedNotificationCreator::internal_default_instance());
#else
  creator_ = const_cast< ::sync_pb::SyncedNotificationCreator*>(&::sync_pb::SyncedNotificationCreator::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  client_data_ = const_cast< ::sync_pb::MapData*>(
      ::sync_pb::MapData::internal_default_instance());
#else
  client_data_ = const_cast< ::sync_pb::MapData*>(&::sync_pb::MapData::default_instance());
#endif
}

SyncedNotification::SyncedNotification(const SyncedNotification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncedNotification::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  external_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  creator_ = NULL;
  client_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedNotification::~SyncedNotification() {
  SharedDtor();
}

void SyncedNotification::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyString()) {
    delete type_;
  }
  if (external_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete external_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete creator_;
    delete client_data_;
  }
}

void SyncedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedNotification& SyncedNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#endif
  return *default_instance_;
}

SyncedNotification* SyncedNotification::default_instance_ = NULL;

SyncedNotification* SyncedNotification::New() const {
  return new SyncedNotification;
}

void SyncedNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyString()) {
        type_->clear();
      }
    }
    if (has_external_id()) {
      if (external_id_ != &::google::protobuf::internal::GetEmptyString()) {
        external_id_->clear();
      }
    }
    if (has_creator()) {
      if (creator_ != NULL) creator_->::sync_pb::SyncedNotificationCreator::Clear();
    }
    if (has_client_data()) {
      if (client_data_ != NULL) client_data_->::sync_pb::MapData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_external_id;
        break;
      }

      // optional string external_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_creator;
        break;
      }

      // optional .sync_pb.SyncedNotificationCreator creator = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_data;
        break;
      }

      // optional .sync_pb.MapData client_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // optional string external_id = 2;
  if (has_external_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->external_id(), output);
  }

  // optional .sync_pb.SyncedNotificationCreator creator = 3;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->creator(), output);
  }

  // optional .sync_pb.MapData client_data = 4;
  if (has_client_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->client_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncedNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string external_id = 2;
    if (has_external_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_id());
    }

    // optional .sync_pb.SyncedNotificationCreator creator = 3;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creator());
    }

    // optional .sync_pb.MapData client_data = 4;
    if (has_client_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedNotification*>(&from));
}

void SyncedNotification::MergeFrom(const SyncedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_external_id()) {
      set_external_id(from.external_id());
    }
    if (from.has_creator()) {
      mutable_creator()->::sync_pb::SyncedNotificationCreator::MergeFrom(from.creator());
    }
    if (from.has_client_data()) {
      mutable_client_data()->::sync_pb::MapData::MergeFrom(from.client_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncedNotification::CopyFrom(const SyncedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedNotification::IsInitialized() const {

  return true;
}

void SyncedNotification::Swap(SyncedNotification* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(external_id_, other->external_id_);
    std::swap(creator_, other->creator_);
    std::swap(client_data_, other->client_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncedNotification::GetTypeName() const {
  return "sync_pb.SyncedNotification";
}


// ===================================================================

bool CoalescedSyncedNotification_ReadState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CoalescedSyncedNotification_ReadState CoalescedSyncedNotification::UNREAD;
const CoalescedSyncedNotification_ReadState CoalescedSyncedNotification::READ;
const CoalescedSyncedNotification_ReadState CoalescedSyncedNotification::DISMISSED;
const CoalescedSyncedNotification_ReadState CoalescedSyncedNotification::ReadState_MIN;
const CoalescedSyncedNotification_ReadState CoalescedSyncedNotification::ReadState_MAX;
const int CoalescedSyncedNotification::ReadState_ARRAYSIZE;
#endif  // _MSC_VER
bool CoalescedSyncedNotification_Priority_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CoalescedSyncedNotification_Priority CoalescedSyncedNotification::LOW;
const CoalescedSyncedNotification_Priority CoalescedSyncedNotification::STANDARD;
const CoalescedSyncedNotification_Priority CoalescedSyncedNotification::HIGH;
const CoalescedSyncedNotification_Priority CoalescedSyncedNotification::Priority_MIN;
const CoalescedSyncedNotification_Priority CoalescedSyncedNotification::Priority_MAX;
const int CoalescedSyncedNotification::Priority_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CoalescedSyncedNotification::kKeyFieldNumber;
const int CoalescedSyncedNotification::kAppIdFieldNumber;
const int CoalescedSyncedNotification::kNotificationFieldNumber;
const int CoalescedSyncedNotification::kRenderInfoFieldNumber;
const int CoalescedSyncedNotification::kReadStateFieldNumber;
const int CoalescedSyncedNotification::kCreationTimeMsecFieldNumber;
const int CoalescedSyncedNotification::kPriorityFieldNumber;
#endif  // !_MSC_VER

CoalescedSyncedNotification::CoalescedSyncedNotification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CoalescedSyncedNotification::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  render_info_ = const_cast< ::sync_pb::SyncedNotificationRenderInfo*>(
      ::sync_pb::SyncedNotificationRenderInfo::internal_default_instance());
#else
  render_info_ = const_cast< ::sync_pb::SyncedNotificationRenderInfo*>(&::sync_pb::SyncedNotificationRenderInfo::default_instance());
#endif
}

CoalescedSyncedNotification::CoalescedSyncedNotification(const CoalescedSyncedNotification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CoalescedSyncedNotification::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  render_info_ = NULL;
  read_state_ = 1;
  creation_time_msec_ = GOOGLE_ULONGLONG(0);
  priority_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoalescedSyncedNotification::~CoalescedSyncedNotification() {
  SharedDtor();
}

void CoalescedSyncedNotification::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (app_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete app_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete render_info_;
  }
}

void CoalescedSyncedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CoalescedSyncedNotification& CoalescedSyncedNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#endif
  return *default_instance_;
}

CoalescedSyncedNotification* CoalescedSyncedNotification::default_instance_ = NULL;

CoalescedSyncedNotification* CoalescedSyncedNotification::New() const {
  return new CoalescedSyncedNotification;
}

void CoalescedSyncedNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyString()) {
        key_->clear();
      }
    }
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::GetEmptyString()) {
        app_id_->clear();
      }
    }
    if (has_render_info()) {
      if (render_info_ != NULL) render_info_->::sync_pb::SyncedNotificationRenderInfo::Clear();
    }
    read_state_ = 1;
    creation_time_msec_ = GOOGLE_ULONGLONG(0);
    priority_ = 1;
  }
  notification_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoalescedSyncedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_id;
        break;
      }

      // optional string app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notification;
        break;
      }

      // repeated .sync_pb.SyncedNotification notification = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notification;
        if (input->ExpectTag(34)) goto parse_render_info;
        break;
      }

      // optional .sync_pb.SyncedNotificationRenderInfo render_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_render_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_render_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_read_state;
        break;
      }

      // optional .sync_pb.CoalescedSyncedNotification.ReadState read_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::CoalescedSyncedNotification_ReadState_IsValid(value)) {
            set_read_state(static_cast< ::sync_pb::CoalescedSyncedNotification_ReadState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_creation_time_msec;
        break;
      }

      // optional uint64 creation_time_msec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creation_time_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_msec_)));
          set_has_creation_time_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_priority;
        break;
      }

      // optional .sync_pb.CoalescedSyncedNotification.Priority priority = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::CoalescedSyncedNotification_Priority_IsValid(value)) {
            set_priority(static_cast< ::sync_pb::CoalescedSyncedNotification_Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoalescedSyncedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_id(), output);
  }

  // repeated .sync_pb.SyncedNotification notification = 3;
  for (int i = 0; i < this->notification_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->notification(i), output);
  }

  // optional .sync_pb.SyncedNotificationRenderInfo render_info = 4;
  if (has_render_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->render_info(), output);
  }

  // optional .sync_pb.CoalescedSyncedNotification.ReadState read_state = 5;
  if (has_read_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->read_state(), output);
  }

  // optional uint64 creation_time_msec = 6;
  if (has_creation_time_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->creation_time_msec(), output);
  }

  // optional .sync_pb.CoalescedSyncedNotification.Priority priority = 7;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int CoalescedSyncedNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional .sync_pb.SyncedNotificationRenderInfo render_info = 4;
    if (has_render_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->render_info());
    }

    // optional .sync_pb.CoalescedSyncedNotification.ReadState read_state = 5;
    if (has_read_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->read_state());
    }

    // optional uint64 creation_time_msec = 6;
    if (has_creation_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creation_time_msec());
    }

    // optional .sync_pb.CoalescedSyncedNotification.Priority priority = 7;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }

  }
  // repeated .sync_pb.SyncedNotification notification = 3;
  total_size += 1 * this->notification_size();
  for (int i = 0; i < this->notification_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notification(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoalescedSyncedNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CoalescedSyncedNotification*>(&from));
}

void CoalescedSyncedNotification::MergeFrom(const CoalescedSyncedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  notification_.MergeFrom(from.notification_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_render_info()) {
      mutable_render_info()->::sync_pb::SyncedNotificationRenderInfo::MergeFrom(from.render_info());
    }
    if (from.has_read_state()) {
      set_read_state(from.read_state());
    }
    if (from.has_creation_time_msec()) {
      set_creation_time_msec(from.creation_time_msec());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoalescedSyncedNotification::CopyFrom(const CoalescedSyncedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoalescedSyncedNotification::IsInitialized() const {

  return true;
}

void CoalescedSyncedNotification::Swap(CoalescedSyncedNotification* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(app_id_, other->app_id_);
    notification_.Swap(&other->notification_);
    std::swap(render_info_, other->render_info_);
    std::swap(read_state_, other->read_state_);
    std::swap(creation_time_msec_, other->creation_time_msec_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CoalescedSyncedNotification::GetTypeName() const {
  return "sync_pb.CoalescedSyncedNotification";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncedNotificationList::kCoalescedNotificationFieldNumber;
#endif  // !_MSC_VER

SyncedNotificationList::SyncedNotificationList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncedNotificationList::InitAsDefaultInstance() {
}

SyncedNotificationList::SyncedNotificationList(const SyncedNotificationList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncedNotificationList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedNotificationList::~SyncedNotificationList() {
  SharedDtor();
}

void SyncedNotificationList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncedNotificationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedNotificationList& SyncedNotificationList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#endif
  return *default_instance_;
}

SyncedNotificationList* SyncedNotificationList::default_instance_ = NULL;

SyncedNotificationList* SyncedNotificationList::New() const {
  return new SyncedNotificationList;
}

void SyncedNotificationList::Clear() {
  coalesced_notification_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncedNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.CoalescedSyncedNotification coalesced_notification = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coalesced_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coalesced_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_coalesced_notification;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncedNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sync_pb.CoalescedSyncedNotification coalesced_notification = 1;
  for (int i = 0; i < this->coalesced_notification_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->coalesced_notification(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncedNotificationList::ByteSize() const {
  int total_size = 0;

  // repeated .sync_pb.CoalescedSyncedNotification coalesced_notification = 1;
  total_size += 1 * this->coalesced_notification_size();
  for (int i = 0; i < this->coalesced_notification_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coalesced_notification(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedNotificationList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedNotificationList*>(&from));
}

void SyncedNotificationList::MergeFrom(const SyncedNotificationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  coalesced_notification_.MergeFrom(from.coalesced_notification_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncedNotificationList::CopyFrom(const SyncedNotificationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedNotificationList::IsInitialized() const {

  return true;
}

void SyncedNotificationList::Swap(SyncedNotificationList* other) {
  if (other != this) {
    coalesced_notification_.Swap(&other->coalesced_notification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncedNotificationList::GetTypeName() const {
  return "sync_pb.SyncedNotificationList";
}


// ===================================================================

#ifndef _MSC_VER
const int MapData_Entry::kKeyFieldNumber;
const int MapData_Entry::kValueFieldNumber;
#endif  // !_MSC_VER

MapData_Entry::MapData_Entry()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MapData_Entry::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  value_ = const_cast< ::sync_pb::Data*>(
      ::sync_pb::Data::internal_default_instance());
#else
  value_ = const_cast< ::sync_pb::Data*>(&::sync_pb::Data::default_instance());
#endif
}

MapData_Entry::MapData_Entry(const MapData_Entry& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MapData_Entry::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapData_Entry::~MapData_Entry() {
  SharedDtor();
}

void MapData_Entry::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete value_;
  }
}

void MapData_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapData_Entry& MapData_Entry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#endif
  return *default_instance_;
}

MapData_Entry* MapData_Entry::default_instance_ = NULL;

MapData_Entry* MapData_Entry::New() const {
  return new MapData_Entry;
}

void MapData_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyString()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::sync_pb::Data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapData_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .sync_pb.Data value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapData_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional .sync_pb.Data value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int MapData_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .sync_pb.Data value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapData_Entry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapData_Entry*>(&from));
}

void MapData_Entry::MergeFrom(const MapData_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::sync_pb::Data::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapData_Entry::CopyFrom(const MapData_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData_Entry::IsInitialized() const {

  return true;
}

void MapData_Entry::Swap(MapData_Entry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MapData_Entry::GetTypeName() const {
  return "sync_pb.MapData.Entry";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MapData::kEntryFieldNumber;
#endif  // !_MSC_VER

MapData::MapData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MapData::InitAsDefaultInstance() {
}

MapData::MapData(const MapData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MapData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapData::~MapData() {
  SharedDtor();
}

void MapData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapData& MapData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#endif
  return *default_instance_;
}

MapData* MapData::default_instance_ = NULL;

MapData* MapData::New() const {
  return new MapData;
}

void MapData::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.MapData.Entry entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sync_pb.MapData.Entry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int MapData::ByteSize() const {
  int total_size = 0;

  // repeated .sync_pb.MapData.Entry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapData*>(&from));
}

void MapData::MergeFrom(const MapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapData::CopyFrom(const MapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData::IsInitialized() const {

  return true;
}

void MapData::Swap(MapData* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MapData::GetTypeName() const {
  return "sync_pb.MapData";
}


// ===================================================================

#ifndef _MSC_VER
const int Data::kBooleanValueFieldNumber;
const int Data::kIntValueFieldNumber;
const int Data::kFloatValueFieldNumber;
const int Data::kStringValueFieldNumber;
const int Data::kListValueFieldNumber;
const int Data::kMapValueFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Data::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  list_value_ = const_cast< ::sync_pb::ListData*>(
      ::sync_pb::ListData::internal_default_instance());
#else
  list_value_ = const_cast< ::sync_pb::ListData*>(&::sync_pb::ListData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  map_value_ = const_cast< ::sync_pb::MapData*>(
      ::sync_pb::MapData::internal_default_instance());
#else
  map_value_ = const_cast< ::sync_pb::MapData*>(&::sync_pb::MapData::default_instance());
#endif
}

Data::Data(const Data& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  boolean_value_ = false;
  int_value_ = 0;
  float_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  list_value_ = NULL;
  map_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  SharedDtor();
}

void Data::SharedDtor() {
  if (string_value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete string_value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete list_value_;
    delete map_value_;
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Data& Data::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#endif
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boolean_value_ = false;
    int_value_ = 0;
    float_value_ = 0;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::GetEmptyString()) {
        string_value_->clear();
      }
    }
    if (has_list_value()) {
      if (list_value_ != NULL) list_value_->::sync_pb::ListData::Clear();
    }
    if (has_map_value()) {
      if (map_value_ != NULL) map_value_->::sync_pb::MapData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool boolean_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolean_value_)));
          set_has_boolean_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_value;
        break;
      }

      // optional int32 int_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_float_value;
        break;
      }

      // optional double float_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_string_value;
        break;
      }

      // optional string string_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_value;
        break;
      }

      // optional .sync_pb.ListData list_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_map_value;
        break;
      }

      // optional .sync_pb.MapData map_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool boolean_value = 1;
  if (has_boolean_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->boolean_value(), output);
  }

  // optional int32 int_value = 2;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_value(), output);
  }

  // optional double float_value = 3;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->float_value(), output);
  }

  // optional string string_value = 4;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->string_value(), output);
  }

  // optional .sync_pb.ListData list_value = 5;
  if (has_list_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->list_value(), output);
  }

  // optional .sync_pb.MapData map_value = 6;
  if (has_map_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->map_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool boolean_value = 1;
    if (has_boolean_value()) {
      total_size += 1 + 1;
    }

    // optional int32 int_value = 2;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional double float_value = 3;
    if (has_float_value()) {
      total_size += 1 + 8;
    }

    // optional string string_value = 4;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional .sync_pb.ListData list_value = 5;
    if (has_list_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_value());
    }

    // optional .sync_pb.MapData map_value = 6;
    if (has_map_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Data*>(&from));
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boolean_value()) {
      set_boolean_value(from.boolean_value());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
    if (from.has_list_value()) {
      mutable_list_value()->::sync_pb::ListData::MergeFrom(from.list_value());
    }
    if (from.has_map_value()) {
      mutable_map_value()->::sync_pb::MapData::MergeFrom(from.map_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {

  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(boolean_value_, other->boolean_value_);
    std::swap(int_value_, other->int_value_);
    std::swap(float_value_, other->float_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(list_value_, other->list_value_);
    std::swap(map_value_, other->map_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Data::GetTypeName() const {
  return "sync_pb.Data";
}


// ===================================================================

#ifndef _MSC_VER
const int ListData::kValueFieldNumber;
#endif  // !_MSC_VER

ListData::ListData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ListData::InitAsDefaultInstance() {
}

ListData::ListData(const ListData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ListData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListData::~ListData() {
  SharedDtor();
}

void ListData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ListData& ListData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5fdata_2eproto();
#endif
  return *default_instance_;
}

ListData* ListData::default_instance_ = NULL;

ListData* ListData::New() const {
  return new ListData;
}

void ListData::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.Data value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sync_pb.Data value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ListData::ByteSize() const {
  int total_size = 0;

  // repeated .sync_pb.Data value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ListData*>(&from));
}

void ListData::MergeFrom(const ListData& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListData::CopyFrom(const ListData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListData::IsInitialized() const {

  return true;
}

void ListData::Swap(ListData* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ListData::GetTypeName() const {
  return "sync_pb.ListData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
