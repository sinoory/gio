// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bookmark_specifics.proto

#ifndef PROTOBUF_bookmark_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_bookmark_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/base/sync_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_EXPORT protobuf_AddDesc_bookmark_5fspecifics_2eproto();
void protobuf_AssignDesc_bookmark_5fspecifics_2eproto();
void protobuf_ShutdownFile_bookmark_5fspecifics_2eproto();

class MetaInfo;
class BookmarkSpecifics;

// ===================================================================

class SYNC_EXPORT MetaInfo : public ::google::protobuf::MessageLite {
 public:
  MetaInfo();
  virtual ~MetaInfo();

  MetaInfo(const MetaInfo& from);

  inline MetaInfo& operator=(const MetaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MetaInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MetaInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MetaInfo* other);

  // implements Message ----------------------------------------------

  MetaInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MetaInfo& from);
  void MergeFrom(const MetaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:sync_pb.MetaInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_bookmark_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_bookmark_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_bookmark_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_bookmark_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static MetaInfo* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_EXPORT BookmarkSpecifics : public ::google::protobuf::MessageLite {
 public:
  BookmarkSpecifics();
  virtual ~BookmarkSpecifics();

  BookmarkSpecifics(const BookmarkSpecifics& from);

  inline BookmarkSpecifics& operator=(const BookmarkSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BookmarkSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BookmarkSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BookmarkSpecifics* other);

  // implements Message ----------------------------------------------

  BookmarkSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BookmarkSpecifics& from);
  void MergeFrom(const BookmarkSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional bytes favicon = 2;
  inline bool has_favicon() const;
  inline void clear_favicon();
  static const int kFaviconFieldNumber = 2;
  inline const ::std::string& favicon() const;
  inline void set_favicon(const ::std::string& value);
  inline void set_favicon(const char* value);
  inline void set_favicon(const void* value, size_t size);
  inline ::std::string* mutable_favicon();
  inline ::std::string* release_favicon();
  inline void set_allocated_favicon(::std::string* favicon);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int64 creation_time_us = 4;
  inline bool has_creation_time_us() const;
  inline void clear_creation_time_us();
  static const int kCreationTimeUsFieldNumber = 4;
  inline ::google::protobuf::int64 creation_time_us() const;
  inline void set_creation_time_us(::google::protobuf::int64 value);

  // optional string icon_url = 5;
  inline bool has_icon_url() const;
  inline void clear_icon_url();
  static const int kIconUrlFieldNumber = 5;
  inline const ::std::string& icon_url() const;
  inline void set_icon_url(const ::std::string& value);
  inline void set_icon_url(const char* value);
  inline void set_icon_url(const char* value, size_t size);
  inline ::std::string* mutable_icon_url();
  inline ::std::string* release_icon_url();
  inline void set_allocated_icon_url(::std::string* icon_url);

  // repeated .sync_pb.MetaInfo meta_info = 6;
  inline int meta_info_size() const;
  inline void clear_meta_info();
  static const int kMetaInfoFieldNumber = 6;
  inline const ::sync_pb::MetaInfo& meta_info(int index) const;
  inline ::sync_pb::MetaInfo* mutable_meta_info(int index);
  inline ::sync_pb::MetaInfo* add_meta_info();
  inline const ::google::protobuf::RepeatedPtrField< ::sync_pb::MetaInfo >&
      meta_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::sync_pb::MetaInfo >*
      mutable_meta_info();

  // @@protoc_insertion_point(class_scope:sync_pb.BookmarkSpecifics)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_favicon();
  inline void clear_has_favicon();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_creation_time_us();
  inline void clear_has_creation_time_us();
  inline void set_has_icon_url();
  inline void clear_has_icon_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* favicon_;
  ::std::string* title_;
  ::google::protobuf::int64 creation_time_us_;
  ::std::string* icon_url_;
  ::google::protobuf::RepeatedPtrField< ::sync_pb::MetaInfo > meta_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_bookmark_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_bookmark_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_bookmark_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_bookmark_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static BookmarkSpecifics* default_instance_;
};
// ===================================================================


// ===================================================================

// MetaInfo

// optional string key = 1;
inline bool MetaInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaInfo::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MetaInfo::key() const {
  return *key_;
}
inline void MetaInfo::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MetaInfo::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MetaInfo::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaInfo::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* MetaInfo::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MetaInfo::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string value = 2;
inline bool MetaInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaInfo::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& MetaInfo::value() const {
  return *value_;
}
inline void MetaInfo::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void MetaInfo::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void MetaInfo::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaInfo::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* MetaInfo::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MetaInfo::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// BookmarkSpecifics

// optional string url = 1;
inline bool BookmarkSpecifics::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BookmarkSpecifics::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BookmarkSpecifics::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BookmarkSpecifics::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& BookmarkSpecifics::url() const {
  return *url_;
}
inline void BookmarkSpecifics::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BookmarkSpecifics::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void BookmarkSpecifics::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BookmarkSpecifics::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* BookmarkSpecifics::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void BookmarkSpecifics::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bytes favicon = 2;
inline bool BookmarkSpecifics::has_favicon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BookmarkSpecifics::set_has_favicon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BookmarkSpecifics::clear_has_favicon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BookmarkSpecifics::clear_favicon() {
  if (favicon_ != &::google::protobuf::internal::GetEmptyString()) {
    favicon_->clear();
  }
  clear_has_favicon();
}
inline const ::std::string& BookmarkSpecifics::favicon() const {
  return *favicon_;
}
inline void BookmarkSpecifics::set_favicon(const ::std::string& value) {
  set_has_favicon();
  if (favicon_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_ = new ::std::string;
  }
  favicon_->assign(value);
}
inline void BookmarkSpecifics::set_favicon(const char* value) {
  set_has_favicon();
  if (favicon_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_ = new ::std::string;
  }
  favicon_->assign(value);
}
inline void BookmarkSpecifics::set_favicon(const void* value, size_t size) {
  set_has_favicon();
  if (favicon_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_ = new ::std::string;
  }
  favicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BookmarkSpecifics::mutable_favicon() {
  set_has_favicon();
  if (favicon_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_ = new ::std::string;
  }
  return favicon_;
}
inline ::std::string* BookmarkSpecifics::release_favicon() {
  clear_has_favicon();
  if (favicon_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = favicon_;
    favicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void BookmarkSpecifics::set_allocated_favicon(::std::string* favicon) {
  if (favicon_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_;
  }
  if (favicon) {
    set_has_favicon();
    favicon_ = favicon;
  } else {
    clear_has_favicon();
    favicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string title = 3;
inline bool BookmarkSpecifics::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BookmarkSpecifics::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BookmarkSpecifics::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BookmarkSpecifics::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& BookmarkSpecifics::title() const {
  return *title_;
}
inline void BookmarkSpecifics::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void BookmarkSpecifics::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void BookmarkSpecifics::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BookmarkSpecifics::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* BookmarkSpecifics::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void BookmarkSpecifics::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int64 creation_time_us = 4;
inline bool BookmarkSpecifics::has_creation_time_us() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BookmarkSpecifics::set_has_creation_time_us() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BookmarkSpecifics::clear_has_creation_time_us() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BookmarkSpecifics::clear_creation_time_us() {
  creation_time_us_ = GOOGLE_LONGLONG(0);
  clear_has_creation_time_us();
}
inline ::google::protobuf::int64 BookmarkSpecifics::creation_time_us() const {
  return creation_time_us_;
}
inline void BookmarkSpecifics::set_creation_time_us(::google::protobuf::int64 value) {
  set_has_creation_time_us();
  creation_time_us_ = value;
}

// optional string icon_url = 5;
inline bool BookmarkSpecifics::has_icon_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BookmarkSpecifics::set_has_icon_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BookmarkSpecifics::clear_has_icon_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BookmarkSpecifics::clear_icon_url() {
  if (icon_url_ != &::google::protobuf::internal::GetEmptyString()) {
    icon_url_->clear();
  }
  clear_has_icon_url();
}
inline const ::std::string& BookmarkSpecifics::icon_url() const {
  return *icon_url_;
}
inline void BookmarkSpecifics::set_icon_url(const ::std::string& value) {
  set_has_icon_url();
  if (icon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    icon_url_ = new ::std::string;
  }
  icon_url_->assign(value);
}
inline void BookmarkSpecifics::set_icon_url(const char* value) {
  set_has_icon_url();
  if (icon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    icon_url_ = new ::std::string;
  }
  icon_url_->assign(value);
}
inline void BookmarkSpecifics::set_icon_url(const char* value, size_t size) {
  set_has_icon_url();
  if (icon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    icon_url_ = new ::std::string;
  }
  icon_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BookmarkSpecifics::mutable_icon_url() {
  set_has_icon_url();
  if (icon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    icon_url_ = new ::std::string;
  }
  return icon_url_;
}
inline ::std::string* BookmarkSpecifics::release_icon_url() {
  clear_has_icon_url();
  if (icon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = icon_url_;
    icon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void BookmarkSpecifics::set_allocated_icon_url(::std::string* icon_url) {
  if (icon_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete icon_url_;
  }
  if (icon_url) {
    set_has_icon_url();
    icon_url_ = icon_url;
  } else {
    clear_has_icon_url();
    icon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .sync_pb.MetaInfo meta_info = 6;
inline int BookmarkSpecifics::meta_info_size() const {
  return meta_info_.size();
}
inline void BookmarkSpecifics::clear_meta_info() {
  meta_info_.Clear();
}
inline const ::sync_pb::MetaInfo& BookmarkSpecifics::meta_info(int index) const {
  return meta_info_.Get(index);
}
inline ::sync_pb::MetaInfo* BookmarkSpecifics::mutable_meta_info(int index) {
  return meta_info_.Mutable(index);
}
inline ::sync_pb::MetaInfo* BookmarkSpecifics::add_meta_info() {
  return meta_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sync_pb::MetaInfo >&
BookmarkSpecifics::meta_info() const {
  return meta_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::sync_pb::MetaInfo >*
BookmarkSpecifics::mutable_meta_info() {
  return &meta_info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bookmark_5fspecifics_2eproto__INCLUDED
