// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: synced_notification_render.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "synced_notification_render.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_synced_5fnotification_5frender_2eproto() {
  delete SyncedNotificationRenderInfo::default_instance_;
  delete CollapsedInfo::default_instance_;
  delete ExpandedInfo::default_instance_;
  delete SimpleCollapsedLayout::default_instance_;
  delete SimpleExpandedLayout::default_instance_;
  delete Media::default_instance_;
  delete Target::default_instance_;
  delete SyncedNotificationDestination::default_instance_;
  delete SyncedNotificationAction::default_instance_;
  delete SyncedNotificationImage::default_instance_;
  delete SyncedNotificationProfileImage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_synced_5fnotification_5frender_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_synced_5fnotification_5frender_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SyncedNotificationRenderInfo::default_instance_ = new SyncedNotificationRenderInfo();
  CollapsedInfo::default_instance_ = new CollapsedInfo();
  ExpandedInfo::default_instance_ = new ExpandedInfo();
  SimpleCollapsedLayout::default_instance_ = new SimpleCollapsedLayout();
  SimpleExpandedLayout::default_instance_ = new SimpleExpandedLayout();
  Media::default_instance_ = new Media();
  Target::default_instance_ = new Target();
  SyncedNotificationDestination::default_instance_ = new SyncedNotificationDestination();
  SyncedNotificationAction::default_instance_ = new SyncedNotificationAction();
  SyncedNotificationImage::default_instance_ = new SyncedNotificationImage();
  SyncedNotificationProfileImage::default_instance_ = new SyncedNotificationProfileImage();
  SyncedNotificationRenderInfo::default_instance_->InitAsDefaultInstance();
  CollapsedInfo::default_instance_->InitAsDefaultInstance();
  ExpandedInfo::default_instance_->InitAsDefaultInstance();
  SimpleCollapsedLayout::default_instance_->InitAsDefaultInstance();
  SimpleExpandedLayout::default_instance_->InitAsDefaultInstance();
  Media::default_instance_->InitAsDefaultInstance();
  Target::default_instance_->InitAsDefaultInstance();
  SyncedNotificationDestination::default_instance_->InitAsDefaultInstance();
  SyncedNotificationAction::default_instance_->InitAsDefaultInstance();
  SyncedNotificationImage::default_instance_->InitAsDefaultInstance();
  SyncedNotificationProfileImage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_synced_5fnotification_5frender_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_synced_5fnotification_5frender_2eproto_once_);
void protobuf_AddDesc_synced_5fnotification_5frender_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_synced_5fnotification_5frender_2eproto_once_,
                 &protobuf_AddDesc_synced_5fnotification_5frender_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_synced_5fnotification_5frender_2eproto {
  StaticDescriptorInitializer_synced_5fnotification_5frender_2eproto() {
    protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
  }
} static_descriptor_initializer_synced_5fnotification_5frender_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SyncedNotificationRenderInfo::kCollapsedInfoFieldNumber;
const int SyncedNotificationRenderInfo::kExpandedInfoFieldNumber;
#endif  // !_MSC_VER

SyncedNotificationRenderInfo::SyncedNotificationRenderInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncedNotificationRenderInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  collapsed_info_ = const_cast< ::sync_pb::CollapsedInfo*>(
      ::sync_pb::CollapsedInfo::internal_default_instance());
#else
  collapsed_info_ = const_cast< ::sync_pb::CollapsedInfo*>(&::sync_pb::CollapsedInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  expanded_info_ = const_cast< ::sync_pb::ExpandedInfo*>(
      ::sync_pb::ExpandedInfo::internal_default_instance());
#else
  expanded_info_ = const_cast< ::sync_pb::ExpandedInfo*>(&::sync_pb::ExpandedInfo::default_instance());
#endif
}

SyncedNotificationRenderInfo::SyncedNotificationRenderInfo(const SyncedNotificationRenderInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncedNotificationRenderInfo::SharedCtor() {
  _cached_size_ = 0;
  collapsed_info_ = NULL;
  expanded_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedNotificationRenderInfo::~SyncedNotificationRenderInfo() {
  SharedDtor();
}

void SyncedNotificationRenderInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete collapsed_info_;
    delete expanded_info_;
  }
}

void SyncedNotificationRenderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedNotificationRenderInfo& SyncedNotificationRenderInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

SyncedNotificationRenderInfo* SyncedNotificationRenderInfo::default_instance_ = NULL;

SyncedNotificationRenderInfo* SyncedNotificationRenderInfo::New() const {
  return new SyncedNotificationRenderInfo;
}

void SyncedNotificationRenderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_collapsed_info()) {
      if (collapsed_info_ != NULL) collapsed_info_->::sync_pb::CollapsedInfo::Clear();
    }
    if (has_expanded_info()) {
      if (expanded_info_ != NULL) expanded_info_->::sync_pb::ExpandedInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncedNotificationRenderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.CollapsedInfo collapsed_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collapsed_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expanded_info;
        break;
      }

      // optional .sync_pb.ExpandedInfo expanded_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expanded_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expanded_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncedNotificationRenderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.CollapsedInfo collapsed_info = 1;
  if (has_collapsed_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->collapsed_info(), output);
  }

  // optional .sync_pb.ExpandedInfo expanded_info = 2;
  if (has_expanded_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->expanded_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncedNotificationRenderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.CollapsedInfo collapsed_info = 1;
    if (has_collapsed_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collapsed_info());
    }

    // optional .sync_pb.ExpandedInfo expanded_info = 2;
    if (has_expanded_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expanded_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedNotificationRenderInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedNotificationRenderInfo*>(&from));
}

void SyncedNotificationRenderInfo::MergeFrom(const SyncedNotificationRenderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collapsed_info()) {
      mutable_collapsed_info()->::sync_pb::CollapsedInfo::MergeFrom(from.collapsed_info());
    }
    if (from.has_expanded_info()) {
      mutable_expanded_info()->::sync_pb::ExpandedInfo::MergeFrom(from.expanded_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncedNotificationRenderInfo::CopyFrom(const SyncedNotificationRenderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedNotificationRenderInfo::IsInitialized() const {

  return true;
}

void SyncedNotificationRenderInfo::Swap(SyncedNotificationRenderInfo* other) {
  if (other != this) {
    std::swap(collapsed_info_, other->collapsed_info_);
    std::swap(expanded_info_, other->expanded_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncedNotificationRenderInfo::GetTypeName() const {
  return "sync_pb.SyncedNotificationRenderInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CollapsedInfo::kSimpleCollapsedLayoutFieldNumber;
const int CollapsedInfo::kCreationTimestampUsecFieldNumber;
const int CollapsedInfo::kDefaultDestinationFieldNumber;
const int CollapsedInfo::kTargetFieldNumber;
const int CollapsedInfo::kMetaTagFieldNumber;
#endif  // !_MSC_VER

CollapsedInfo::CollapsedInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CollapsedInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  simple_collapsed_layout_ = const_cast< ::sync_pb::SimpleCollapsedLayout*>(
      ::sync_pb::SimpleCollapsedLayout::internal_default_instance());
#else
  simple_collapsed_layout_ = const_cast< ::sync_pb::SimpleCollapsedLayout*>(&::sync_pb::SimpleCollapsedLayout::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  default_destination_ = const_cast< ::sync_pb::SyncedNotificationDestination*>(
      ::sync_pb::SyncedNotificationDestination::internal_default_instance());
#else
  default_destination_ = const_cast< ::sync_pb::SyncedNotificationDestination*>(&::sync_pb::SyncedNotificationDestination::default_instance());
#endif
}

CollapsedInfo::CollapsedInfo(const CollapsedInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CollapsedInfo::SharedCtor() {
  _cached_size_ = 0;
  simple_collapsed_layout_ = NULL;
  creation_timestamp_usec_ = GOOGLE_ULONGLONG(0);
  default_destination_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollapsedInfo::~CollapsedInfo() {
  SharedDtor();
}

void CollapsedInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete simple_collapsed_layout_;
    delete default_destination_;
  }
}

void CollapsedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CollapsedInfo& CollapsedInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

CollapsedInfo* CollapsedInfo::default_instance_ = NULL;

CollapsedInfo* CollapsedInfo::New() const {
  return new CollapsedInfo;
}

void CollapsedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_simple_collapsed_layout()) {
      if (simple_collapsed_layout_ != NULL) simple_collapsed_layout_->::sync_pb::SimpleCollapsedLayout::Clear();
    }
    creation_timestamp_usec_ = GOOGLE_ULONGLONG(0);
    if (has_default_destination()) {
      if (default_destination_ != NULL) default_destination_->::sync_pb::SyncedNotificationDestination::Clear();
    }
  }
  target_.Clear();
  meta_tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollapsedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SimpleCollapsedLayout simple_collapsed_layout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_collapsed_layout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_creation_timestamp_usec;
        break;
      }

      // optional uint64 creation_timestamp_usec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creation_timestamp_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_timestamp_usec_)));
          set_has_creation_timestamp_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_default_destination;
        break;
      }

      // optional .sync_pb.SyncedNotificationDestination default_destination = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_destination()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }

      // repeated .sync_pb.Target target = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_target;
        if (input->ExpectTag(42)) goto parse_meta_tag;
        break;
      }

      // repeated string meta_tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_meta_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_meta_tag;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollapsedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.SimpleCollapsedLayout simple_collapsed_layout = 1;
  if (has_simple_collapsed_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->simple_collapsed_layout(), output);
  }

  // optional uint64 creation_timestamp_usec = 2;
  if (has_creation_timestamp_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->creation_timestamp_usec(), output);
  }

  // optional .sync_pb.SyncedNotificationDestination default_destination = 3;
  if (has_default_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->default_destination(), output);
  }

  // repeated .sync_pb.Target target = 4;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->target(i), output);
  }

  // repeated string meta_tag = 5;
  for (int i = 0; i < this->meta_tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->meta_tag(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int CollapsedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.SimpleCollapsedLayout simple_collapsed_layout = 1;
    if (has_simple_collapsed_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple_collapsed_layout());
    }

    // optional uint64 creation_timestamp_usec = 2;
    if (has_creation_timestamp_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creation_timestamp_usec());
    }

    // optional .sync_pb.SyncedNotificationDestination default_destination = 3;
    if (has_default_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_destination());
    }

  }
  // repeated .sync_pb.Target target = 4;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target(i));
  }

  // repeated string meta_tag = 5;
  total_size += 1 * this->meta_tag_size();
  for (int i = 0; i < this->meta_tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->meta_tag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollapsedInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CollapsedInfo*>(&from));
}

void CollapsedInfo::MergeFrom(const CollapsedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_.MergeFrom(from.target_);
  meta_tag_.MergeFrom(from.meta_tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simple_collapsed_layout()) {
      mutable_simple_collapsed_layout()->::sync_pb::SimpleCollapsedLayout::MergeFrom(from.simple_collapsed_layout());
    }
    if (from.has_creation_timestamp_usec()) {
      set_creation_timestamp_usec(from.creation_timestamp_usec());
    }
    if (from.has_default_destination()) {
      mutable_default_destination()->::sync_pb::SyncedNotificationDestination::MergeFrom(from.default_destination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollapsedInfo::CopyFrom(const CollapsedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollapsedInfo::IsInitialized() const {

  return true;
}

void CollapsedInfo::Swap(CollapsedInfo* other) {
  if (other != this) {
    std::swap(simple_collapsed_layout_, other->simple_collapsed_layout_);
    std::swap(creation_timestamp_usec_, other->creation_timestamp_usec_);
    std::swap(default_destination_, other->default_destination_);
    target_.Swap(&other->target_);
    meta_tag_.Swap(&other->meta_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CollapsedInfo::GetTypeName() const {
  return "sync_pb.CollapsedInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ExpandedInfo::kSimpleExpandedLayoutFieldNumber;
const int ExpandedInfo::kCollapsedInfoFieldNumber;
const int ExpandedInfo::kTargetFieldNumber;
const int ExpandedInfo::kMetaTagFieldNumber;
#endif  // !_MSC_VER

ExpandedInfo::ExpandedInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ExpandedInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  simple_expanded_layout_ = const_cast< ::sync_pb::SimpleExpandedLayout*>(
      ::sync_pb::SimpleExpandedLayout::internal_default_instance());
#else
  simple_expanded_layout_ = const_cast< ::sync_pb::SimpleExpandedLayout*>(&::sync_pb::SimpleExpandedLayout::default_instance());
#endif
}

ExpandedInfo::ExpandedInfo(const ExpandedInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ExpandedInfo::SharedCtor() {
  _cached_size_ = 0;
  simple_expanded_layout_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpandedInfo::~ExpandedInfo() {
  SharedDtor();
}

void ExpandedInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete simple_expanded_layout_;
  }
}

void ExpandedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExpandedInfo& ExpandedInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

ExpandedInfo* ExpandedInfo::default_instance_ = NULL;

ExpandedInfo* ExpandedInfo::New() const {
  return new ExpandedInfo;
}

void ExpandedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_simple_expanded_layout()) {
      if (simple_expanded_layout_ != NULL) simple_expanded_layout_->::sync_pb::SimpleExpandedLayout::Clear();
    }
  }
  collapsed_info_.Clear();
  target_.Clear();
  meta_tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpandedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SimpleExpandedLayout simple_expanded_layout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_expanded_layout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_collapsed_info;
        break;
      }

      // repeated .sync_pb.CollapsedInfo collapsed_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collapsed_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collapsed_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_collapsed_info;
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // repeated .sync_pb.Target target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        if (input->ExpectTag(34)) goto parse_meta_tag;
        break;
      }

      // repeated string meta_tag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_meta_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_meta_tag;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpandedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.SimpleExpandedLayout simple_expanded_layout = 1;
  if (has_simple_expanded_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->simple_expanded_layout(), output);
  }

  // repeated .sync_pb.CollapsedInfo collapsed_info = 2;
  for (int i = 0; i < this->collapsed_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->collapsed_info(i), output);
  }

  // repeated .sync_pb.Target target = 3;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->target(i), output);
  }

  // repeated string meta_tag = 4;
  for (int i = 0; i < this->meta_tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->meta_tag(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ExpandedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.SimpleExpandedLayout simple_expanded_layout = 1;
    if (has_simple_expanded_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple_expanded_layout());
    }

  }
  // repeated .sync_pb.CollapsedInfo collapsed_info = 2;
  total_size += 1 * this->collapsed_info_size();
  for (int i = 0; i < this->collapsed_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collapsed_info(i));
  }

  // repeated .sync_pb.Target target = 3;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target(i));
  }

  // repeated string meta_tag = 4;
  total_size += 1 * this->meta_tag_size();
  for (int i = 0; i < this->meta_tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->meta_tag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpandedInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExpandedInfo*>(&from));
}

void ExpandedInfo::MergeFrom(const ExpandedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  collapsed_info_.MergeFrom(from.collapsed_info_);
  target_.MergeFrom(from.target_);
  meta_tag_.MergeFrom(from.meta_tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simple_expanded_layout()) {
      mutable_simple_expanded_layout()->::sync_pb::SimpleExpandedLayout::MergeFrom(from.simple_expanded_layout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpandedInfo::CopyFrom(const ExpandedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedInfo::IsInitialized() const {

  return true;
}

void ExpandedInfo::Swap(ExpandedInfo* other) {
  if (other != this) {
    std::swap(simple_expanded_layout_, other->simple_expanded_layout_);
    collapsed_info_.Swap(&other->collapsed_info_);
    target_.Swap(&other->target_);
    meta_tag_.Swap(&other->meta_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ExpandedInfo::GetTypeName() const {
  return "sync_pb.ExpandedInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleCollapsedLayout::kAppIconFieldNumber;
const int SimpleCollapsedLayout::kProfileImageFieldNumber;
const int SimpleCollapsedLayout::kHeadingFieldNumber;
const int SimpleCollapsedLayout::kDescriptionFieldNumber;
const int SimpleCollapsedLayout::kMediaFieldNumber;
const int SimpleCollapsedLayout::kAnnotationFieldNumber;
#endif  // !_MSC_VER

SimpleCollapsedLayout::SimpleCollapsedLayout()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SimpleCollapsedLayout::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  app_icon_ = const_cast< ::sync_pb::SyncedNotificationImage*>(
      ::sync_pb::SyncedNotificationImage::internal_default_instance());
#else
  app_icon_ = const_cast< ::sync_pb::SyncedNotificationImage*>(&::sync_pb::SyncedNotificationImage::default_instance());
#endif
}

SimpleCollapsedLayout::SimpleCollapsedLayout(const SimpleCollapsedLayout& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleCollapsedLayout::SharedCtor() {
  _cached_size_ = 0;
  app_icon_ = NULL;
  heading_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  annotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleCollapsedLayout::~SimpleCollapsedLayout() {
  SharedDtor();
}

void SimpleCollapsedLayout::SharedDtor() {
  if (heading_ != &::google::protobuf::internal::GetEmptyString()) {
    delete heading_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyString()) {
    delete description_;
  }
  if (annotation_ != &::google::protobuf::internal::GetEmptyString()) {
    delete annotation_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete app_icon_;
  }
}

void SimpleCollapsedLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SimpleCollapsedLayout& SimpleCollapsedLayout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

SimpleCollapsedLayout* SimpleCollapsedLayout::default_instance_ = NULL;

SimpleCollapsedLayout* SimpleCollapsedLayout::New() const {
  return new SimpleCollapsedLayout;
}

void SimpleCollapsedLayout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_icon()) {
      if (app_icon_ != NULL) app_icon_->::sync_pb::SyncedNotificationImage::Clear();
    }
    if (has_heading()) {
      if (heading_ != &::google::protobuf::internal::GetEmptyString()) {
        heading_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyString()) {
        description_->clear();
      }
    }
    if (has_annotation()) {
      if (annotation_ != &::google::protobuf::internal::GetEmptyString()) {
        annotation_->clear();
      }
    }
  }
  profile_image_.Clear();
  media_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleCollapsedLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SyncedNotificationImage app_icon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_profile_image;
        break;
      }

      // repeated .sync_pb.SyncedNotificationProfileImage profile_image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_profile_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_profile_image;
        if (input->ExpectTag(26)) goto parse_heading;
        break;
      }

      // optional string heading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heading:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heading()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_media;
        break;
      }

      // repeated .sync_pb.Media media = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_media()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_media;
        if (input->ExpectTag(50)) goto parse_annotation;
        break;
      }

      // optional string annotation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimpleCollapsedLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.SyncedNotificationImage app_icon = 1;
  if (has_app_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->app_icon(), output);
  }

  // repeated .sync_pb.SyncedNotificationProfileImage profile_image = 2;
  for (int i = 0; i < this->profile_image_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->profile_image(i), output);
  }

  // optional string heading = 3;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->heading(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->description(), output);
  }

  // repeated .sync_pb.Media media = 5;
  for (int i = 0; i < this->media_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->media(i), output);
  }

  // optional string annotation = 6;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->annotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SimpleCollapsedLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.SyncedNotificationImage app_icon = 1;
    if (has_app_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_icon());
    }

    // optional string heading = 3;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->heading());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string annotation = 6;
    if (has_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->annotation());
    }

  }
  // repeated .sync_pb.SyncedNotificationProfileImage profile_image = 2;
  total_size += 1 * this->profile_image_size();
  for (int i = 0; i < this->profile_image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->profile_image(i));
  }

  // repeated .sync_pb.Media media = 5;
  total_size += 1 * this->media_size();
  for (int i = 0; i < this->media_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->media(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleCollapsedLayout::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SimpleCollapsedLayout*>(&from));
}

void SimpleCollapsedLayout::MergeFrom(const SimpleCollapsedLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  profile_image_.MergeFrom(from.profile_image_);
  media_.MergeFrom(from.media_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_icon()) {
      mutable_app_icon()->::sync_pb::SyncedNotificationImage::MergeFrom(from.app_icon());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_annotation()) {
      set_annotation(from.annotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleCollapsedLayout::CopyFrom(const SimpleCollapsedLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleCollapsedLayout::IsInitialized() const {

  return true;
}

void SimpleCollapsedLayout::Swap(SimpleCollapsedLayout* other) {
  if (other != this) {
    std::swap(app_icon_, other->app_icon_);
    profile_image_.Swap(&other->profile_image_);
    std::swap(heading_, other->heading_);
    std::swap(description_, other->description_);
    media_.Swap(&other->media_);
    std::swap(annotation_, other->annotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SimpleCollapsedLayout::GetTypeName() const {
  return "sync_pb.SimpleCollapsedLayout";
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleExpandedLayout::kTitleFieldNumber;
const int SimpleExpandedLayout::kTextFieldNumber;
const int SimpleExpandedLayout::kMediaFieldNumber;
const int SimpleExpandedLayout::kProfileImageFieldNumber;
const int SimpleExpandedLayout::kTargetFieldNumber;
#endif  // !_MSC_VER

SimpleExpandedLayout::SimpleExpandedLayout()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SimpleExpandedLayout::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  profile_image_ = const_cast< ::sync_pb::SyncedNotificationProfileImage*>(
      ::sync_pb::SyncedNotificationProfileImage::internal_default_instance());
#else
  profile_image_ = const_cast< ::sync_pb::SyncedNotificationProfileImage*>(&::sync_pb::SyncedNotificationProfileImage::default_instance());
#endif
}

SimpleExpandedLayout::SimpleExpandedLayout(const SimpleExpandedLayout& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleExpandedLayout::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  profile_image_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleExpandedLayout::~SimpleExpandedLayout() {
  SharedDtor();
}

void SimpleExpandedLayout::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyString()) {
    delete text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete profile_image_;
  }
}

void SimpleExpandedLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SimpleExpandedLayout& SimpleExpandedLayout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

SimpleExpandedLayout* SimpleExpandedLayout::default_instance_ = NULL;

SimpleExpandedLayout* SimpleExpandedLayout::New() const {
  return new SimpleExpandedLayout;
}

void SimpleExpandedLayout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyString()) {
        title_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyString()) {
        text_->clear();
      }
    }
    if (has_profile_image()) {
      if (profile_image_ != NULL) profile_image_->::sync_pb::SyncedNotificationProfileImage::Clear();
    }
  }
  media_.Clear();
  target_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleExpandedLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_media;
        break;
      }

      // repeated .sync_pb.Media media = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_media()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_media;
        if (input->ExpectTag(34)) goto parse_profile_image;
        break;
      }

      // optional .sync_pb.SyncedNotificationProfileImage profile_image = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_target;
        break;
      }

      // repeated .sync_pb.Target target = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_target;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimpleExpandedLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  // repeated .sync_pb.Media media = 3;
  for (int i = 0; i < this->media_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->media(i), output);
  }

  // optional .sync_pb.SyncedNotificationProfileImage profile_image = 4;
  if (has_profile_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->profile_image(), output);
  }

  // repeated .sync_pb.Target target = 5;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->target(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SimpleExpandedLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .sync_pb.SyncedNotificationProfileImage profile_image = 4;
    if (has_profile_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profile_image());
    }

  }
  // repeated .sync_pb.Media media = 3;
  total_size += 1 * this->media_size();
  for (int i = 0; i < this->media_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->media(i));
  }

  // repeated .sync_pb.Target target = 5;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleExpandedLayout::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SimpleExpandedLayout*>(&from));
}

void SimpleExpandedLayout::MergeFrom(const SimpleExpandedLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  media_.MergeFrom(from.media_);
  target_.MergeFrom(from.target_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_profile_image()) {
      mutable_profile_image()->::sync_pb::SyncedNotificationProfileImage::MergeFrom(from.profile_image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleExpandedLayout::CopyFrom(const SimpleExpandedLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleExpandedLayout::IsInitialized() const {

  return true;
}

void SimpleExpandedLayout::Swap(SimpleExpandedLayout* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(text_, other->text_);
    media_.Swap(&other->media_);
    std::swap(profile_image_, other->profile_image_);
    target_.Swap(&other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SimpleExpandedLayout::GetTypeName() const {
  return "sync_pb.SimpleExpandedLayout";
}


// ===================================================================

#ifndef _MSC_VER
const int Media::kImageFieldNumber;
#endif  // !_MSC_VER

Media::Media()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Media::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  image_ = const_cast< ::sync_pb::SyncedNotificationImage*>(
      ::sync_pb::SyncedNotificationImage::internal_default_instance());
#else
  image_ = const_cast< ::sync_pb::SyncedNotificationImage*>(&::sync_pb::SyncedNotificationImage::default_instance());
#endif
}

Media::Media(const Media& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Media::SharedCtor() {
  _cached_size_ = 0;
  image_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Media::~Media() {
  SharedDtor();
}

void Media::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete image_;
  }
}

void Media::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Media& Media::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

Media* Media::default_instance_ = NULL;

Media* Media::New() const {
  return new Media;
}

void Media::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image()) {
      if (image_ != NULL) image_->::sync_pb::SyncedNotificationImage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Media::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SyncedNotificationImage image = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Media::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.SyncedNotificationImage image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int Media::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.SyncedNotificationImage image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Media::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Media*>(&from));
}

void Media::MergeFrom(const Media& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      mutable_image()->::sync_pb::SyncedNotificationImage::MergeFrom(from.image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Media::CopyFrom(const Media& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media::IsInitialized() const {

  return true;
}

void Media::Swap(Media* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Media::GetTypeName() const {
  return "sync_pb.Media";
}


// ===================================================================

#ifndef _MSC_VER
const int Target::kDestinationFieldNumber;
const int Target::kActionFieldNumber;
const int Target::kTargetKeyFieldNumber;
#endif  // !_MSC_VER

Target::Target()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Target::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  destination_ = const_cast< ::sync_pb::SyncedNotificationDestination*>(
      ::sync_pb::SyncedNotificationDestination::internal_default_instance());
#else
  destination_ = const_cast< ::sync_pb::SyncedNotificationDestination*>(&::sync_pb::SyncedNotificationDestination::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  action_ = const_cast< ::sync_pb::SyncedNotificationAction*>(
      ::sync_pb::SyncedNotificationAction::internal_default_instance());
#else
  action_ = const_cast< ::sync_pb::SyncedNotificationAction*>(&::sync_pb::SyncedNotificationAction::default_instance());
#endif
}

Target::Target(const Target& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Target::SharedCtor() {
  _cached_size_ = 0;
  destination_ = NULL;
  action_ = NULL;
  target_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Target::~Target() {
  SharedDtor();
}

void Target::SharedDtor() {
  if (target_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete target_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete destination_;
    delete action_;
  }
}

void Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Target& Target::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

Target* Target::default_instance_ = NULL;

Target* Target::New() const {
  return new Target;
}

void Target::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_destination()) {
      if (destination_ != NULL) destination_->::sync_pb::SyncedNotificationDestination::Clear();
    }
    if (has_action()) {
      if (action_ != NULL) action_->::sync_pb::SyncedNotificationAction::Clear();
    }
    if (has_target_key()) {
      if (target_key_ != &::google::protobuf::internal::GetEmptyString()) {
        target_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SyncedNotificationDestination destination = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_action;
        break;
      }

      // optional .sync_pb.SyncedNotificationAction action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_key;
        break;
      }

      // optional string target_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.SyncedNotificationDestination destination = 1;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->destination(), output);
  }

  // optional .sync_pb.SyncedNotificationAction action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->action(), output);
  }

  // optional string target_key = 3;
  if (has_target_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->target_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int Target::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.SyncedNotificationDestination destination = 1;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destination());
    }

    // optional .sync_pb.SyncedNotificationAction action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

    // optional string target_key = 3;
    if (has_target_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Target::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Target*>(&from));
}

void Target::MergeFrom(const Target& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destination()) {
      mutable_destination()->::sync_pb::SyncedNotificationDestination::MergeFrom(from.destination());
    }
    if (from.has_action()) {
      mutable_action()->::sync_pb::SyncedNotificationAction::MergeFrom(from.action());
    }
    if (from.has_target_key()) {
      set_target_key(from.target_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Target::CopyFrom(const Target& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {

  return true;
}

void Target::Swap(Target* other) {
  if (other != this) {
    std::swap(destination_, other->destination_);
    std::swap(action_, other->action_);
    std::swap(target_key_, other->target_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Target::GetTypeName() const {
  return "sync_pb.Target";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncedNotificationDestination::kTextFieldNumber;
const int SyncedNotificationDestination::kIconFieldNumber;
const int SyncedNotificationDestination::kUrlFieldNumber;
const int SyncedNotificationDestination::kAccessibilityLabelFieldNumber;
#endif  // !_MSC_VER

SyncedNotificationDestination::SyncedNotificationDestination()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncedNotificationDestination::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  icon_ = const_cast< ::sync_pb::SyncedNotificationImage*>(
      ::sync_pb::SyncedNotificationImage::internal_default_instance());
#else
  icon_ = const_cast< ::sync_pb::SyncedNotificationImage*>(&::sync_pb::SyncedNotificationImage::default_instance());
#endif
}

SyncedNotificationDestination::SyncedNotificationDestination(const SyncedNotificationDestination& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncedNotificationDestination::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  icon_ = NULL;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  accessibility_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedNotificationDestination::~SyncedNotificationDestination() {
  SharedDtor();
}

void SyncedNotificationDestination::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyString()) {
    delete text_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (accessibility_label_ != &::google::protobuf::internal::GetEmptyString()) {
    delete accessibility_label_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete icon_;
  }
}

void SyncedNotificationDestination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedNotificationDestination& SyncedNotificationDestination::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

SyncedNotificationDestination* SyncedNotificationDestination::default_instance_ = NULL;

SyncedNotificationDestination* SyncedNotificationDestination::New() const {
  return new SyncedNotificationDestination;
}

void SyncedNotificationDestination::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyString()) {
        text_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != NULL) icon_->::sync_pb::SyncedNotificationImage::Clear();
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyString()) {
        url_->clear();
      }
    }
    if (has_accessibility_label()) {
      if (accessibility_label_ != &::google::protobuf::internal::GetEmptyString()) {
        accessibility_label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncedNotificationDestination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // optional .sync_pb.SyncedNotificationImage icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_accessibility_label;
        break;
      }

      // optional string accessibility_label = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessibility_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessibility_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncedNotificationDestination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional .sync_pb.SyncedNotificationImage icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->icon(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional string accessibility_label = 4;
  if (has_accessibility_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->accessibility_label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncedNotificationDestination::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .sync_pb.SyncedNotificationImage icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icon());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string accessibility_label = 4;
    if (has_accessibility_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessibility_label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedNotificationDestination::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedNotificationDestination*>(&from));
}

void SyncedNotificationDestination::MergeFrom(const SyncedNotificationDestination& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_icon()) {
      mutable_icon()->::sync_pb::SyncedNotificationImage::MergeFrom(from.icon());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_accessibility_label()) {
      set_accessibility_label(from.accessibility_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncedNotificationDestination::CopyFrom(const SyncedNotificationDestination& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedNotificationDestination::IsInitialized() const {

  return true;
}

void SyncedNotificationDestination::Swap(SyncedNotificationDestination* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(icon_, other->icon_);
    std::swap(url_, other->url_);
    std::swap(accessibility_label_, other->accessibility_label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncedNotificationDestination::GetTypeName() const {
  return "sync_pb.SyncedNotificationDestination";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncedNotificationAction::kTextFieldNumber;
const int SyncedNotificationAction::kIconFieldNumber;
const int SyncedNotificationAction::kUrlFieldNumber;
const int SyncedNotificationAction::kRequestDataFieldNumber;
const int SyncedNotificationAction::kAccessibilityLabelFieldNumber;
const int SyncedNotificationAction::kMetaTagFieldNumber;
#endif  // !_MSC_VER

SyncedNotificationAction::SyncedNotificationAction()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncedNotificationAction::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  icon_ = const_cast< ::sync_pb::SyncedNotificationImage*>(
      ::sync_pb::SyncedNotificationImage::internal_default_instance());
#else
  icon_ = const_cast< ::sync_pb::SyncedNotificationImage*>(&::sync_pb::SyncedNotificationImage::default_instance());
#endif
}

SyncedNotificationAction::SyncedNotificationAction(const SyncedNotificationAction& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncedNotificationAction::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  icon_ = NULL;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  request_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  accessibility_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedNotificationAction::~SyncedNotificationAction() {
  SharedDtor();
}

void SyncedNotificationAction::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyString()) {
    delete text_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (request_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete request_data_;
  }
  if (accessibility_label_ != &::google::protobuf::internal::GetEmptyString()) {
    delete accessibility_label_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete icon_;
  }
}

void SyncedNotificationAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedNotificationAction& SyncedNotificationAction::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

SyncedNotificationAction* SyncedNotificationAction::default_instance_ = NULL;

SyncedNotificationAction* SyncedNotificationAction::New() const {
  return new SyncedNotificationAction;
}

void SyncedNotificationAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyString()) {
        text_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != NULL) icon_->::sync_pb::SyncedNotificationImage::Clear();
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyString()) {
        url_->clear();
      }
    }
    if (has_request_data()) {
      if (request_data_ != &::google::protobuf::internal::GetEmptyString()) {
        request_data_->clear();
      }
    }
    if (has_accessibility_label()) {
      if (accessibility_label_ != &::google::protobuf::internal::GetEmptyString()) {
        accessibility_label_->clear();
      }
    }
  }
  meta_tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncedNotificationAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // optional .sync_pb.SyncedNotificationImage icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request_data;
        break;
      }

      // optional string request_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_accessibility_label;
        break;
      }

      // optional string accessibility_label = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessibility_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessibility_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_meta_tag;
        break;
      }

      // repeated string meta_tag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_meta_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_meta_tag;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncedNotificationAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional .sync_pb.SyncedNotificationImage icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->icon(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional string request_data = 4;
  if (has_request_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->request_data(), output);
  }

  // optional string accessibility_label = 5;
  if (has_accessibility_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->accessibility_label(), output);
  }

  // repeated string meta_tag = 6;
  for (int i = 0; i < this->meta_tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->meta_tag(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncedNotificationAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .sync_pb.SyncedNotificationImage icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icon());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string request_data = 4;
    if (has_request_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_data());
    }

    // optional string accessibility_label = 5;
    if (has_accessibility_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessibility_label());
    }

  }
  // repeated string meta_tag = 6;
  total_size += 1 * this->meta_tag_size();
  for (int i = 0; i < this->meta_tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->meta_tag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedNotificationAction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedNotificationAction*>(&from));
}

void SyncedNotificationAction::MergeFrom(const SyncedNotificationAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  meta_tag_.MergeFrom(from.meta_tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_icon()) {
      mutable_icon()->::sync_pb::SyncedNotificationImage::MergeFrom(from.icon());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_request_data()) {
      set_request_data(from.request_data());
    }
    if (from.has_accessibility_label()) {
      set_accessibility_label(from.accessibility_label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncedNotificationAction::CopyFrom(const SyncedNotificationAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedNotificationAction::IsInitialized() const {

  return true;
}

void SyncedNotificationAction::Swap(SyncedNotificationAction* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(icon_, other->icon_);
    std::swap(url_, other->url_);
    std::swap(request_data_, other->request_data_);
    std::swap(accessibility_label_, other->accessibility_label_);
    meta_tag_.Swap(&other->meta_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncedNotificationAction::GetTypeName() const {
  return "sync_pb.SyncedNotificationAction";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncedNotificationImage::kUrlFieldNumber;
const int SyncedNotificationImage::kAltTextFieldNumber;
const int SyncedNotificationImage::kPreferredWidthFieldNumber;
const int SyncedNotificationImage::kPreferredHeightFieldNumber;
#endif  // !_MSC_VER

SyncedNotificationImage::SyncedNotificationImage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncedNotificationImage::InitAsDefaultInstance() {
}

SyncedNotificationImage::SyncedNotificationImage(const SyncedNotificationImage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncedNotificationImage::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  alt_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  preferred_width_ = 0;
  preferred_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedNotificationImage::~SyncedNotificationImage() {
  SharedDtor();
}

void SyncedNotificationImage::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (alt_text_ != &::google::protobuf::internal::GetEmptyString()) {
    delete alt_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncedNotificationImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedNotificationImage& SyncedNotificationImage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

SyncedNotificationImage* SyncedNotificationImage::default_instance_ = NULL;

SyncedNotificationImage* SyncedNotificationImage::New() const {
  return new SyncedNotificationImage;
}

void SyncedNotificationImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyString()) {
        url_->clear();
      }
    }
    if (has_alt_text()) {
      if (alt_text_ != &::google::protobuf::internal::GetEmptyString()) {
        alt_text_->clear();
      }
    }
    preferred_width_ = 0;
    preferred_height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncedNotificationImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alt_text;
        break;
      }

      // optional string alt_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alt_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alt_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_preferred_width;
        break;
      }

      // optional int32 preferred_width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preferred_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preferred_width_)));
          set_has_preferred_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_preferred_height;
        break;
      }

      // optional int32 preferred_height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preferred_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preferred_height_)));
          set_has_preferred_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncedNotificationImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

  // optional string alt_text = 2;
  if (has_alt_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alt_text(), output);
  }

  // optional int32 preferred_width = 3;
  if (has_preferred_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->preferred_width(), output);
  }

  // optional int32 preferred_height = 4;
  if (has_preferred_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->preferred_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncedNotificationImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string alt_text = 2;
    if (has_alt_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alt_text());
    }

    // optional int32 preferred_width = 3;
    if (has_preferred_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preferred_width());
    }

    // optional int32 preferred_height = 4;
    if (has_preferred_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preferred_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedNotificationImage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedNotificationImage*>(&from));
}

void SyncedNotificationImage::MergeFrom(const SyncedNotificationImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_alt_text()) {
      set_alt_text(from.alt_text());
    }
    if (from.has_preferred_width()) {
      set_preferred_width(from.preferred_width());
    }
    if (from.has_preferred_height()) {
      set_preferred_height(from.preferred_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncedNotificationImage::CopyFrom(const SyncedNotificationImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedNotificationImage::IsInitialized() const {

  return true;
}

void SyncedNotificationImage::Swap(SyncedNotificationImage* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(alt_text_, other->alt_text_);
    std::swap(preferred_width_, other->preferred_width_);
    std::swap(preferred_height_, other->preferred_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncedNotificationImage::GetTypeName() const {
  return "sync_pb.SyncedNotificationImage";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncedNotificationProfileImage::kImageUrlFieldNumber;
const int SyncedNotificationProfileImage::kOidFieldNumber;
const int SyncedNotificationProfileImage::kDisplayNameFieldNumber;
#endif  // !_MSC_VER

SyncedNotificationProfileImage::SyncedNotificationProfileImage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncedNotificationProfileImage::InitAsDefaultInstance() {
}

SyncedNotificationProfileImage::SyncedNotificationProfileImage(const SyncedNotificationProfileImage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncedNotificationProfileImage::SharedCtor() {
  _cached_size_ = 0;
  image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  oid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncedNotificationProfileImage::~SyncedNotificationProfileImage() {
  SharedDtor();
}

void SyncedNotificationProfileImage::SharedDtor() {
  if (image_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete image_url_;
  }
  if (oid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete oid_;
  }
  if (display_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete display_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncedNotificationProfileImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncedNotificationProfileImage& SyncedNotificationProfileImage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_synced_5fnotification_5frender_2eproto();
#endif
  return *default_instance_;
}

SyncedNotificationProfileImage* SyncedNotificationProfileImage::default_instance_ = NULL;

SyncedNotificationProfileImage* SyncedNotificationProfileImage::New() const {
  return new SyncedNotificationProfileImage;
}

void SyncedNotificationProfileImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image_url()) {
      if (image_url_ != &::google::protobuf::internal::GetEmptyString()) {
        image_url_->clear();
      }
    }
    if (has_oid()) {
      if (oid_ != &::google::protobuf::internal::GetEmptyString()) {
        oid_->clear();
      }
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::GetEmptyString()) {
        display_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncedNotificationProfileImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oid;
        break;
      }

      // optional string oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display_name;
        break;
      }

      // optional string display_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncedNotificationProfileImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string image_url = 1;
  if (has_image_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->image_url(), output);
  }

  // optional string oid = 2;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->oid(), output);
  }

  // optional string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->display_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncedNotificationProfileImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string image_url = 1;
    if (has_image_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_url());
    }

    // optional string oid = 2;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oid());
    }

    // optional string display_name = 3;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncedNotificationProfileImage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncedNotificationProfileImage*>(&from));
}

void SyncedNotificationProfileImage::MergeFrom(const SyncedNotificationProfileImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image_url()) {
      set_image_url(from.image_url());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncedNotificationProfileImage::CopyFrom(const SyncedNotificationProfileImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedNotificationProfileImage::IsInitialized() const {

  return true;
}

void SyncedNotificationProfileImage::Swap(SyncedNotificationProfileImage* other) {
  if (other != this) {
    std::swap(image_url_, other->image_url_);
    std::swap(oid_, other->oid_);
    std::swap(display_name_, other->display_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncedNotificationProfileImage::GetTypeName() const {
  return "sync_pb.SyncedNotificationProfileImage";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
