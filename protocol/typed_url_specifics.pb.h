// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: typed_url_specifics.proto

#ifndef PROTOBUF_typed_5furl_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_typed_5furl_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/base/sync_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_EXPORT protobuf_AddDesc_typed_5furl_5fspecifics_2eproto();
void protobuf_AssignDesc_typed_5furl_5fspecifics_2eproto();
void protobuf_ShutdownFile_typed_5furl_5fspecifics_2eproto();

class TypedUrlSpecifics;

// ===================================================================

class SYNC_EXPORT TypedUrlSpecifics : public ::google::protobuf::MessageLite {
 public:
  TypedUrlSpecifics();
  virtual ~TypedUrlSpecifics();

  TypedUrlSpecifics(const TypedUrlSpecifics& from);

  inline TypedUrlSpecifics& operator=(const TypedUrlSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const TypedUrlSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TypedUrlSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TypedUrlSpecifics* other);

  // implements Message ----------------------------------------------

  TypedUrlSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TypedUrlSpecifics& from);
  void MergeFrom(const TypedUrlSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional bool hidden = 4;
  inline bool has_hidden() const;
  inline void clear_hidden();
  static const int kHiddenFieldNumber = 4;
  inline bool hidden() const;
  inline void set_hidden(bool value);

  // repeated int64 visits = 7 [packed = true];
  inline int visits_size() const;
  inline void clear_visits();
  static const int kVisitsFieldNumber = 7;
  inline ::google::protobuf::int64 visits(int index) const;
  inline void set_visits(int index, ::google::protobuf::int64 value);
  inline void add_visits(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      visits() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_visits();

  // repeated int32 visit_transitions = 8 [packed = true];
  inline int visit_transitions_size() const;
  inline void clear_visit_transitions();
  static const int kVisitTransitionsFieldNumber = 8;
  inline ::google::protobuf::int32 visit_transitions(int index) const;
  inline void set_visit_transitions(int index, ::google::protobuf::int32 value);
  inline void add_visit_transitions(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      visit_transitions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_visit_transitions();

  // @@protoc_insertion_point(class_scope:sync_pb.TypedUrlSpecifics)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_hidden();
  inline void clear_has_hidden();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* title_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > visits_;
  mutable int _visits_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > visit_transitions_;
  mutable int _visit_transitions_cached_byte_size_;
  bool hidden_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_typed_5furl_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_typed_5furl_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_typed_5furl_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_typed_5furl_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static TypedUrlSpecifics* default_instance_;
};
// ===================================================================


// ===================================================================

// TypedUrlSpecifics

// optional string url = 1;
inline bool TypedUrlSpecifics::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TypedUrlSpecifics::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TypedUrlSpecifics::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TypedUrlSpecifics::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& TypedUrlSpecifics::url() const {
  return *url_;
}
inline void TypedUrlSpecifics::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void TypedUrlSpecifics::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void TypedUrlSpecifics::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TypedUrlSpecifics::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* TypedUrlSpecifics::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void TypedUrlSpecifics::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string title = 2;
inline bool TypedUrlSpecifics::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TypedUrlSpecifics::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TypedUrlSpecifics::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TypedUrlSpecifics::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& TypedUrlSpecifics::title() const {
  return *title_;
}
inline void TypedUrlSpecifics::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void TypedUrlSpecifics::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void TypedUrlSpecifics::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TypedUrlSpecifics::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* TypedUrlSpecifics::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void TypedUrlSpecifics::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bool hidden = 4;
inline bool TypedUrlSpecifics::has_hidden() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TypedUrlSpecifics::set_has_hidden() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TypedUrlSpecifics::clear_has_hidden() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TypedUrlSpecifics::clear_hidden() {
  hidden_ = false;
  clear_has_hidden();
}
inline bool TypedUrlSpecifics::hidden() const {
  return hidden_;
}
inline void TypedUrlSpecifics::set_hidden(bool value) {
  set_has_hidden();
  hidden_ = value;
}

// repeated int64 visits = 7 [packed = true];
inline int TypedUrlSpecifics::visits_size() const {
  return visits_.size();
}
inline void TypedUrlSpecifics::clear_visits() {
  visits_.Clear();
}
inline ::google::protobuf::int64 TypedUrlSpecifics::visits(int index) const {
  return visits_.Get(index);
}
inline void TypedUrlSpecifics::set_visits(int index, ::google::protobuf::int64 value) {
  visits_.Set(index, value);
}
inline void TypedUrlSpecifics::add_visits(::google::protobuf::int64 value) {
  visits_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TypedUrlSpecifics::visits() const {
  return visits_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TypedUrlSpecifics::mutable_visits() {
  return &visits_;
}

// repeated int32 visit_transitions = 8 [packed = true];
inline int TypedUrlSpecifics::visit_transitions_size() const {
  return visit_transitions_.size();
}
inline void TypedUrlSpecifics::clear_visit_transitions() {
  visit_transitions_.Clear();
}
inline ::google::protobuf::int32 TypedUrlSpecifics::visit_transitions(int index) const {
  return visit_transitions_.Get(index);
}
inline void TypedUrlSpecifics::set_visit_transitions(int index, ::google::protobuf::int32 value) {
  visit_transitions_.Set(index, value);
}
inline void TypedUrlSpecifics::add_visit_transitions(::google::protobuf::int32 value) {
  visit_transitions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TypedUrlSpecifics::visit_transitions() const {
  return visit_transitions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TypedUrlSpecifics::mutable_visit_transitions() {
  return &visit_transitions_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_typed_5furl_5fspecifics_2eproto__INCLUDED
