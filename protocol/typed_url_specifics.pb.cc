// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: typed_url_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "typed_url_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_typed_5furl_5fspecifics_2eproto() {
  delete TypedUrlSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_typed_5furl_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_typed_5furl_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  TypedUrlSpecifics::default_instance_ = new TypedUrlSpecifics();
  TypedUrlSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_typed_5furl_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_typed_5furl_5fspecifics_2eproto_once_);
void protobuf_AddDesc_typed_5furl_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_typed_5furl_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_typed_5furl_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_typed_5furl_5fspecifics_2eproto {
  StaticDescriptorInitializer_typed_5furl_5fspecifics_2eproto() {
    protobuf_AddDesc_typed_5furl_5fspecifics_2eproto();
  }
} static_descriptor_initializer_typed_5furl_5fspecifics_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int TypedUrlSpecifics::kUrlFieldNumber;
const int TypedUrlSpecifics::kTitleFieldNumber;
const int TypedUrlSpecifics::kHiddenFieldNumber;
const int TypedUrlSpecifics::kVisitsFieldNumber;
const int TypedUrlSpecifics::kVisitTransitionsFieldNumber;
#endif  // !_MSC_VER

TypedUrlSpecifics::TypedUrlSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TypedUrlSpecifics::InitAsDefaultInstance() {
}

TypedUrlSpecifics::TypedUrlSpecifics(const TypedUrlSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TypedUrlSpecifics::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  hidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypedUrlSpecifics::~TypedUrlSpecifics() {
  SharedDtor();
}

void TypedUrlSpecifics::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TypedUrlSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TypedUrlSpecifics& TypedUrlSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_typed_5furl_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_typed_5furl_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

TypedUrlSpecifics* TypedUrlSpecifics::default_instance_ = NULL;

TypedUrlSpecifics* TypedUrlSpecifics::New() const {
  return new TypedUrlSpecifics;
}

void TypedUrlSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyString()) {
        url_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyString()) {
        title_->clear();
      }
    }
    hidden_ = false;
  }
  visits_.Clear();
  visit_transitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypedUrlSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hidden;
        break;
      }

      // optional bool hidden = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_visits;
        break;
      }

      // repeated int64 visits = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_visits())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 58, input, this->mutable_visits())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_visit_transitions;
        break;
      }

      // repeated int32 visit_transitions = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visit_transitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_visit_transitions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_visit_transitions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TypedUrlSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional bool hidden = 4;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hidden(), output);
  }

  // repeated int64 visits = 7 [packed = true];
  if (this->visits_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_visits_cached_byte_size_);
  }
  for (int i = 0; i < this->visits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->visits(i), output);
  }

  // repeated int32 visit_transitions = 8 [packed = true];
  if (this->visit_transitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_visit_transitions_cached_byte_size_);
  }
  for (int i = 0; i < this->visit_transitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->visit_transitions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int TypedUrlSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional bool hidden = 4;
    if (has_hidden()) {
      total_size += 1 + 1;
    }

  }
  // repeated int64 visits = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->visits_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->visits(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _visits_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 visit_transitions = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->visit_transitions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->visit_transitions(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _visit_transitions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypedUrlSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TypedUrlSpecifics*>(&from));
}

void TypedUrlSpecifics::MergeFrom(const TypedUrlSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  visits_.MergeFrom(from.visits_);
  visit_transitions_.MergeFrom(from.visit_transitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypedUrlSpecifics::CopyFrom(const TypedUrlSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypedUrlSpecifics::IsInitialized() const {

  return true;
}

void TypedUrlSpecifics::Swap(TypedUrlSpecifics* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(title_, other->title_);
    std::swap(hidden_, other->hidden_);
    visits_.Swap(&other->visits_);
    visit_transitions_.Swap(&other->visit_transitions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TypedUrlSpecifics::GetTypeName() const {
  return "sync_pb.TypedUrlSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
