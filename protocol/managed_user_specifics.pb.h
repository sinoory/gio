// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: managed_user_specifics.proto

#ifndef PROTOBUF_managed_5fuser_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_managed_5fuser_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/base/sync_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_EXPORT protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto();
void protobuf_AssignDesc_managed_5fuser_5fspecifics_2eproto();
void protobuf_ShutdownFile_managed_5fuser_5fspecifics_2eproto();

class ManagedUserSpecifics;

// ===================================================================

class SYNC_EXPORT ManagedUserSpecifics : public ::google::protobuf::MessageLite {
 public:
  ManagedUserSpecifics();
  virtual ~ManagedUserSpecifics();

  ManagedUserSpecifics(const ManagedUserSpecifics& from);

  inline ManagedUserSpecifics& operator=(const ManagedUserSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ManagedUserSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ManagedUserSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ManagedUserSpecifics* other);

  // implements Message ----------------------------------------------

  ManagedUserSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ManagedUserSpecifics& from);
  void MergeFrom(const ManagedUserSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool acknowledged = 3 [default = false];
  inline bool has_acknowledged() const;
  inline void clear_acknowledged();
  static const int kAcknowledgedFieldNumber = 3;
  inline bool acknowledged() const;
  inline void set_acknowledged(bool value);

  // optional string master_key = 4;
  inline bool has_master_key() const;
  inline void clear_master_key();
  static const int kMasterKeyFieldNumber = 4;
  inline const ::std::string& master_key() const;
  inline void set_master_key(const ::std::string& value);
  inline void set_master_key(const char* value);
  inline void set_master_key(const char* value, size_t size);
  inline ::std::string* mutable_master_key();
  inline ::std::string* release_master_key();
  inline void set_allocated_master_key(::std::string* master_key);

  // optional string chrome_avatar = 5;
  inline bool has_chrome_avatar() const;
  inline void clear_chrome_avatar();
  static const int kChromeAvatarFieldNumber = 5;
  inline const ::std::string& chrome_avatar() const;
  inline void set_chrome_avatar(const ::std::string& value);
  inline void set_chrome_avatar(const char* value);
  inline void set_chrome_avatar(const char* value, size_t size);
  inline ::std::string* mutable_chrome_avatar();
  inline ::std::string* release_chrome_avatar();
  inline void set_allocated_chrome_avatar(::std::string* chrome_avatar);

  // optional string chromeos_avatar = 6;
  inline bool has_chromeos_avatar() const;
  inline void clear_chromeos_avatar();
  static const int kChromeosAvatarFieldNumber = 6;
  inline const ::std::string& chromeos_avatar() const;
  inline void set_chromeos_avatar(const ::std::string& value);
  inline void set_chromeos_avatar(const char* value);
  inline void set_chromeos_avatar(const char* value, size_t size);
  inline ::std::string* mutable_chromeos_avatar();
  inline ::std::string* release_chromeos_avatar();
  inline void set_allocated_chromeos_avatar(::std::string* chromeos_avatar);

  // optional string password_signature_key = 7;
  inline bool has_password_signature_key() const;
  inline void clear_password_signature_key();
  static const int kPasswordSignatureKeyFieldNumber = 7;
  inline const ::std::string& password_signature_key() const;
  inline void set_password_signature_key(const ::std::string& value);
  inline void set_password_signature_key(const char* value);
  inline void set_password_signature_key(const char* value, size_t size);
  inline ::std::string* mutable_password_signature_key();
  inline ::std::string* release_password_signature_key();
  inline void set_allocated_password_signature_key(::std::string* password_signature_key);

  // optional string password_encryption_key = 8;
  inline bool has_password_encryption_key() const;
  inline void clear_password_encryption_key();
  static const int kPasswordEncryptionKeyFieldNumber = 8;
  inline const ::std::string& password_encryption_key() const;
  inline void set_password_encryption_key(const ::std::string& value);
  inline void set_password_encryption_key(const char* value);
  inline void set_password_encryption_key(const char* value, size_t size);
  inline ::std::string* mutable_password_encryption_key();
  inline ::std::string* release_password_encryption_key();
  inline void set_allocated_password_encryption_key(::std::string* password_encryption_key);

  // @@protoc_insertion_point(class_scope:sync_pb.ManagedUserSpecifics)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_acknowledged();
  inline void clear_has_acknowledged();
  inline void set_has_master_key();
  inline void clear_has_master_key();
  inline void set_has_chrome_avatar();
  inline void clear_has_chrome_avatar();
  inline void set_has_chromeos_avatar();
  inline void clear_has_chromeos_avatar();
  inline void set_has_password_signature_key();
  inline void clear_has_password_signature_key();
  inline void set_has_password_encryption_key();
  inline void clear_has_password_encryption_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* name_;
  ::std::string* master_key_;
  ::std::string* chrome_avatar_;
  ::std::string* chromeos_avatar_;
  ::std::string* password_signature_key_;
  ::std::string* password_encryption_key_;
  bool acknowledged_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_managed_5fuser_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_managed_5fuser_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static ManagedUserSpecifics* default_instance_;
};
// ===================================================================


// ===================================================================

// ManagedUserSpecifics

// optional string id = 1;
inline bool ManagedUserSpecifics::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManagedUserSpecifics::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManagedUserSpecifics::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManagedUserSpecifics::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ManagedUserSpecifics::id() const {
  return *id_;
}
inline void ManagedUserSpecifics::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ManagedUserSpecifics::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ManagedUserSpecifics::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManagedUserSpecifics::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ManagedUserSpecifics::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ManagedUserSpecifics::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string name = 2;
inline bool ManagedUserSpecifics::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManagedUserSpecifics::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManagedUserSpecifics::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManagedUserSpecifics::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ManagedUserSpecifics::name() const {
  return *name_;
}
inline void ManagedUserSpecifics::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ManagedUserSpecifics::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ManagedUserSpecifics::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManagedUserSpecifics::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ManagedUserSpecifics::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ManagedUserSpecifics::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bool acknowledged = 3 [default = false];
inline bool ManagedUserSpecifics::has_acknowledged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManagedUserSpecifics::set_has_acknowledged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ManagedUserSpecifics::clear_has_acknowledged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ManagedUserSpecifics::clear_acknowledged() {
  acknowledged_ = false;
  clear_has_acknowledged();
}
inline bool ManagedUserSpecifics::acknowledged() const {
  return acknowledged_;
}
inline void ManagedUserSpecifics::set_acknowledged(bool value) {
  set_has_acknowledged();
  acknowledged_ = value;
}

// optional string master_key = 4;
inline bool ManagedUserSpecifics::has_master_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ManagedUserSpecifics::set_has_master_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ManagedUserSpecifics::clear_has_master_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ManagedUserSpecifics::clear_master_key() {
  if (master_key_ != &::google::protobuf::internal::GetEmptyString()) {
    master_key_->clear();
  }
  clear_has_master_key();
}
inline const ::std::string& ManagedUserSpecifics::master_key() const {
  return *master_key_;
}
inline void ManagedUserSpecifics::set_master_key(const ::std::string& value) {
  set_has_master_key();
  if (master_key_ == &::google::protobuf::internal::GetEmptyString()) {
    master_key_ = new ::std::string;
  }
  master_key_->assign(value);
}
inline void ManagedUserSpecifics::set_master_key(const char* value) {
  set_has_master_key();
  if (master_key_ == &::google::protobuf::internal::GetEmptyString()) {
    master_key_ = new ::std::string;
  }
  master_key_->assign(value);
}
inline void ManagedUserSpecifics::set_master_key(const char* value, size_t size) {
  set_has_master_key();
  if (master_key_ == &::google::protobuf::internal::GetEmptyString()) {
    master_key_ = new ::std::string;
  }
  master_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManagedUserSpecifics::mutable_master_key() {
  set_has_master_key();
  if (master_key_ == &::google::protobuf::internal::GetEmptyString()) {
    master_key_ = new ::std::string;
  }
  return master_key_;
}
inline ::std::string* ManagedUserSpecifics::release_master_key() {
  clear_has_master_key();
  if (master_key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = master_key_;
    master_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ManagedUserSpecifics::set_allocated_master_key(::std::string* master_key) {
  if (master_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete master_key_;
  }
  if (master_key) {
    set_has_master_key();
    master_key_ = master_key;
  } else {
    clear_has_master_key();
    master_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string chrome_avatar = 5;
inline bool ManagedUserSpecifics::has_chrome_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ManagedUserSpecifics::set_has_chrome_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ManagedUserSpecifics::clear_has_chrome_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ManagedUserSpecifics::clear_chrome_avatar() {
  if (chrome_avatar_ != &::google::protobuf::internal::GetEmptyString()) {
    chrome_avatar_->clear();
  }
  clear_has_chrome_avatar();
}
inline const ::std::string& ManagedUserSpecifics::chrome_avatar() const {
  return *chrome_avatar_;
}
inline void ManagedUserSpecifics::set_chrome_avatar(const ::std::string& value) {
  set_has_chrome_avatar();
  if (chrome_avatar_ == &::google::protobuf::internal::GetEmptyString()) {
    chrome_avatar_ = new ::std::string;
  }
  chrome_avatar_->assign(value);
}
inline void ManagedUserSpecifics::set_chrome_avatar(const char* value) {
  set_has_chrome_avatar();
  if (chrome_avatar_ == &::google::protobuf::internal::GetEmptyString()) {
    chrome_avatar_ = new ::std::string;
  }
  chrome_avatar_->assign(value);
}
inline void ManagedUserSpecifics::set_chrome_avatar(const char* value, size_t size) {
  set_has_chrome_avatar();
  if (chrome_avatar_ == &::google::protobuf::internal::GetEmptyString()) {
    chrome_avatar_ = new ::std::string;
  }
  chrome_avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManagedUserSpecifics::mutable_chrome_avatar() {
  set_has_chrome_avatar();
  if (chrome_avatar_ == &::google::protobuf::internal::GetEmptyString()) {
    chrome_avatar_ = new ::std::string;
  }
  return chrome_avatar_;
}
inline ::std::string* ManagedUserSpecifics::release_chrome_avatar() {
  clear_has_chrome_avatar();
  if (chrome_avatar_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = chrome_avatar_;
    chrome_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ManagedUserSpecifics::set_allocated_chrome_avatar(::std::string* chrome_avatar) {
  if (chrome_avatar_ != &::google::protobuf::internal::GetEmptyString()) {
    delete chrome_avatar_;
  }
  if (chrome_avatar) {
    set_has_chrome_avatar();
    chrome_avatar_ = chrome_avatar;
  } else {
    clear_has_chrome_avatar();
    chrome_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string chromeos_avatar = 6;
inline bool ManagedUserSpecifics::has_chromeos_avatar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ManagedUserSpecifics::set_has_chromeos_avatar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ManagedUserSpecifics::clear_has_chromeos_avatar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ManagedUserSpecifics::clear_chromeos_avatar() {
  if (chromeos_avatar_ != &::google::protobuf::internal::GetEmptyString()) {
    chromeos_avatar_->clear();
  }
  clear_has_chromeos_avatar();
}
inline const ::std::string& ManagedUserSpecifics::chromeos_avatar() const {
  return *chromeos_avatar_;
}
inline void ManagedUserSpecifics::set_chromeos_avatar(const ::std::string& value) {
  set_has_chromeos_avatar();
  if (chromeos_avatar_ == &::google::protobuf::internal::GetEmptyString()) {
    chromeos_avatar_ = new ::std::string;
  }
  chromeos_avatar_->assign(value);
}
inline void ManagedUserSpecifics::set_chromeos_avatar(const char* value) {
  set_has_chromeos_avatar();
  if (chromeos_avatar_ == &::google::protobuf::internal::GetEmptyString()) {
    chromeos_avatar_ = new ::std::string;
  }
  chromeos_avatar_->assign(value);
}
inline void ManagedUserSpecifics::set_chromeos_avatar(const char* value, size_t size) {
  set_has_chromeos_avatar();
  if (chromeos_avatar_ == &::google::protobuf::internal::GetEmptyString()) {
    chromeos_avatar_ = new ::std::string;
  }
  chromeos_avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManagedUserSpecifics::mutable_chromeos_avatar() {
  set_has_chromeos_avatar();
  if (chromeos_avatar_ == &::google::protobuf::internal::GetEmptyString()) {
    chromeos_avatar_ = new ::std::string;
  }
  return chromeos_avatar_;
}
inline ::std::string* ManagedUserSpecifics::release_chromeos_avatar() {
  clear_has_chromeos_avatar();
  if (chromeos_avatar_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = chromeos_avatar_;
    chromeos_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ManagedUserSpecifics::set_allocated_chromeos_avatar(::std::string* chromeos_avatar) {
  if (chromeos_avatar_ != &::google::protobuf::internal::GetEmptyString()) {
    delete chromeos_avatar_;
  }
  if (chromeos_avatar) {
    set_has_chromeos_avatar();
    chromeos_avatar_ = chromeos_avatar;
  } else {
    clear_has_chromeos_avatar();
    chromeos_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string password_signature_key = 7;
inline bool ManagedUserSpecifics::has_password_signature_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ManagedUserSpecifics::set_has_password_signature_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ManagedUserSpecifics::clear_has_password_signature_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ManagedUserSpecifics::clear_password_signature_key() {
  if (password_signature_key_ != &::google::protobuf::internal::GetEmptyString()) {
    password_signature_key_->clear();
  }
  clear_has_password_signature_key();
}
inline const ::std::string& ManagedUserSpecifics::password_signature_key() const {
  return *password_signature_key_;
}
inline void ManagedUserSpecifics::set_password_signature_key(const ::std::string& value) {
  set_has_password_signature_key();
  if (password_signature_key_ == &::google::protobuf::internal::GetEmptyString()) {
    password_signature_key_ = new ::std::string;
  }
  password_signature_key_->assign(value);
}
inline void ManagedUserSpecifics::set_password_signature_key(const char* value) {
  set_has_password_signature_key();
  if (password_signature_key_ == &::google::protobuf::internal::GetEmptyString()) {
    password_signature_key_ = new ::std::string;
  }
  password_signature_key_->assign(value);
}
inline void ManagedUserSpecifics::set_password_signature_key(const char* value, size_t size) {
  set_has_password_signature_key();
  if (password_signature_key_ == &::google::protobuf::internal::GetEmptyString()) {
    password_signature_key_ = new ::std::string;
  }
  password_signature_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManagedUserSpecifics::mutable_password_signature_key() {
  set_has_password_signature_key();
  if (password_signature_key_ == &::google::protobuf::internal::GetEmptyString()) {
    password_signature_key_ = new ::std::string;
  }
  return password_signature_key_;
}
inline ::std::string* ManagedUserSpecifics::release_password_signature_key() {
  clear_has_password_signature_key();
  if (password_signature_key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = password_signature_key_;
    password_signature_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ManagedUserSpecifics::set_allocated_password_signature_key(::std::string* password_signature_key) {
  if (password_signature_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete password_signature_key_;
  }
  if (password_signature_key) {
    set_has_password_signature_key();
    password_signature_key_ = password_signature_key;
  } else {
    clear_has_password_signature_key();
    password_signature_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string password_encryption_key = 8;
inline bool ManagedUserSpecifics::has_password_encryption_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ManagedUserSpecifics::set_has_password_encryption_key() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ManagedUserSpecifics::clear_has_password_encryption_key() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ManagedUserSpecifics::clear_password_encryption_key() {
  if (password_encryption_key_ != &::google::protobuf::internal::GetEmptyString()) {
    password_encryption_key_->clear();
  }
  clear_has_password_encryption_key();
}
inline const ::std::string& ManagedUserSpecifics::password_encryption_key() const {
  return *password_encryption_key_;
}
inline void ManagedUserSpecifics::set_password_encryption_key(const ::std::string& value) {
  set_has_password_encryption_key();
  if (password_encryption_key_ == &::google::protobuf::internal::GetEmptyString()) {
    password_encryption_key_ = new ::std::string;
  }
  password_encryption_key_->assign(value);
}
inline void ManagedUserSpecifics::set_password_encryption_key(const char* value) {
  set_has_password_encryption_key();
  if (password_encryption_key_ == &::google::protobuf::internal::GetEmptyString()) {
    password_encryption_key_ = new ::std::string;
  }
  password_encryption_key_->assign(value);
}
inline void ManagedUserSpecifics::set_password_encryption_key(const char* value, size_t size) {
  set_has_password_encryption_key();
  if (password_encryption_key_ == &::google::protobuf::internal::GetEmptyString()) {
    password_encryption_key_ = new ::std::string;
  }
  password_encryption_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManagedUserSpecifics::mutable_password_encryption_key() {
  set_has_password_encryption_key();
  if (password_encryption_key_ == &::google::protobuf::internal::GetEmptyString()) {
    password_encryption_key_ = new ::std::string;
  }
  return password_encryption_key_;
}
inline ::std::string* ManagedUserSpecifics::release_password_encryption_key() {
  clear_has_password_encryption_key();
  if (password_encryption_key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = password_encryption_key_;
    password_encryption_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ManagedUserSpecifics::set_allocated_password_encryption_key(::std::string* password_encryption_key) {
  if (password_encryption_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete password_encryption_key_;
  }
  if (password_encryption_key) {
    set_has_password_encryption_key();
    password_encryption_key_ = password_encryption_key;
  } else {
    clear_has_password_encryption_key();
    password_encryption_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_managed_5fuser_5fspecifics_2eproto__INCLUDED
