// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_specifics.proto

#ifndef PROTOBUF_password_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_password_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "encryption.pb.h"
// @@protoc_insertion_point(includes)
#include "sync/base/sync_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_EXPORT protobuf_AddDesc_password_5fspecifics_2eproto();
void protobuf_AssignDesc_password_5fspecifics_2eproto();
void protobuf_ShutdownFile_password_5fspecifics_2eproto();

class PasswordSpecificsData;
class PasswordSpecifics;

// ===================================================================

class SYNC_EXPORT PasswordSpecificsData : public ::google::protobuf::MessageLite {
 public:
  PasswordSpecificsData();
  virtual ~PasswordSpecificsData();

  PasswordSpecificsData(const PasswordSpecificsData& from);

  inline PasswordSpecificsData& operator=(const PasswordSpecificsData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PasswordSpecificsData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PasswordSpecificsData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PasswordSpecificsData* other);

  // implements Message ----------------------------------------------

  PasswordSpecificsData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PasswordSpecificsData& from);
  void MergeFrom(const PasswordSpecificsData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 scheme = 1;
  inline bool has_scheme() const;
  inline void clear_scheme();
  static const int kSchemeFieldNumber = 1;
  inline ::google::protobuf::int32 scheme() const;
  inline void set_scheme(::google::protobuf::int32 value);

  // optional string signon_realm = 2;
  inline bool has_signon_realm() const;
  inline void clear_signon_realm();
  static const int kSignonRealmFieldNumber = 2;
  inline const ::std::string& signon_realm() const;
  inline void set_signon_realm(const ::std::string& value);
  inline void set_signon_realm(const char* value);
  inline void set_signon_realm(const char* value, size_t size);
  inline ::std::string* mutable_signon_realm();
  inline ::std::string* release_signon_realm();
  inline void set_allocated_signon_realm(::std::string* signon_realm);

  // optional string origin = 3;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 3;
  inline const ::std::string& origin() const;
  inline void set_origin(const ::std::string& value);
  inline void set_origin(const char* value);
  inline void set_origin(const char* value, size_t size);
  inline ::std::string* mutable_origin();
  inline ::std::string* release_origin();
  inline void set_allocated_origin(::std::string* origin);

  // optional string action = 4;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 4;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  inline void set_allocated_action(::std::string* action);

  // optional string username_element = 5;
  inline bool has_username_element() const;
  inline void clear_username_element();
  static const int kUsernameElementFieldNumber = 5;
  inline const ::std::string& username_element() const;
  inline void set_username_element(const ::std::string& value);
  inline void set_username_element(const char* value);
  inline void set_username_element(const char* value, size_t size);
  inline ::std::string* mutable_username_element();
  inline ::std::string* release_username_element();
  inline void set_allocated_username_element(::std::string* username_element);

  // optional string username_value = 6;
  inline bool has_username_value() const;
  inline void clear_username_value();
  static const int kUsernameValueFieldNumber = 6;
  inline const ::std::string& username_value() const;
  inline void set_username_value(const ::std::string& value);
  inline void set_username_value(const char* value);
  inline void set_username_value(const char* value, size_t size);
  inline ::std::string* mutable_username_value();
  inline ::std::string* release_username_value();
  inline void set_allocated_username_value(::std::string* username_value);

  // optional string password_element = 7;
  inline bool has_password_element() const;
  inline void clear_password_element();
  static const int kPasswordElementFieldNumber = 7;
  inline const ::std::string& password_element() const;
  inline void set_password_element(const ::std::string& value);
  inline void set_password_element(const char* value);
  inline void set_password_element(const char* value, size_t size);
  inline ::std::string* mutable_password_element();
  inline ::std::string* release_password_element();
  inline void set_allocated_password_element(::std::string* password_element);

  // optional string password_value = 8;
  inline bool has_password_value() const;
  inline void clear_password_value();
  static const int kPasswordValueFieldNumber = 8;
  inline const ::std::string& password_value() const;
  inline void set_password_value(const ::std::string& value);
  inline void set_password_value(const char* value);
  inline void set_password_value(const char* value, size_t size);
  inline ::std::string* mutable_password_value();
  inline ::std::string* release_password_value();
  inline void set_allocated_password_value(::std::string* password_value);

  // optional bool ssl_valid = 9;
  inline bool has_ssl_valid() const;
  inline void clear_ssl_valid();
  static const int kSslValidFieldNumber = 9;
  inline bool ssl_valid() const;
  inline void set_ssl_valid(bool value);

  // optional bool preferred = 10;
  inline bool has_preferred() const;
  inline void clear_preferred();
  static const int kPreferredFieldNumber = 10;
  inline bool preferred() const;
  inline void set_preferred(bool value);

  // optional int64 date_created = 11;
  inline bool has_date_created() const;
  inline void clear_date_created();
  static const int kDateCreatedFieldNumber = 11;
  inline ::google::protobuf::int64 date_created() const;
  inline void set_date_created(::google::protobuf::int64 value);

  // optional bool blacklisted = 12;
  inline bool has_blacklisted() const;
  inline void clear_blacklisted();
  static const int kBlacklistedFieldNumber = 12;
  inline bool blacklisted() const;
  inline void set_blacklisted(bool value);

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData)
 private:
  inline void set_has_scheme();
  inline void clear_has_scheme();
  inline void set_has_signon_realm();
  inline void clear_has_signon_realm();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_username_element();
  inline void clear_has_username_element();
  inline void set_has_username_value();
  inline void clear_has_username_value();
  inline void set_has_password_element();
  inline void clear_has_password_element();
  inline void set_has_password_value();
  inline void clear_has_password_value();
  inline void set_has_ssl_valid();
  inline void clear_has_ssl_valid();
  inline void set_has_preferred();
  inline void clear_has_preferred();
  inline void set_has_date_created();
  inline void clear_has_date_created();
  inline void set_has_blacklisted();
  inline void clear_has_blacklisted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* signon_realm_;
  ::std::string* origin_;
  ::std::string* action_;
  ::std::string* username_element_;
  ::std::string* username_value_;
  ::std::string* password_element_;
  ::std::string* password_value_;
  ::google::protobuf::int32 scheme_;
  bool ssl_valid_;
  bool preferred_;
  bool blacklisted_;
  ::google::protobuf::int64 date_created_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_password_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_password_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_password_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_password_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static PasswordSpecificsData* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_EXPORT PasswordSpecifics : public ::google::protobuf::MessageLite {
 public:
  PasswordSpecifics();
  virtual ~PasswordSpecifics();

  PasswordSpecifics(const PasswordSpecifics& from);

  inline PasswordSpecifics& operator=(const PasswordSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const PasswordSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PasswordSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PasswordSpecifics* other);

  // implements Message ----------------------------------------------

  PasswordSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PasswordSpecifics& from);
  void MergeFrom(const PasswordSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .sync_pb.EncryptedData encrypted = 1;
  inline bool has_encrypted() const;
  inline void clear_encrypted();
  static const int kEncryptedFieldNumber = 1;
  inline const ::sync_pb::EncryptedData& encrypted() const;
  inline ::sync_pb::EncryptedData* mutable_encrypted();
  inline ::sync_pb::EncryptedData* release_encrypted();
  inline void set_allocated_encrypted(::sync_pb::EncryptedData* encrypted);

  // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
  inline bool has_client_only_encrypted_data() const;
  inline void clear_client_only_encrypted_data();
  static const int kClientOnlyEncryptedDataFieldNumber = 2;
  inline const ::sync_pb::PasswordSpecificsData& client_only_encrypted_data() const;
  inline ::sync_pb::PasswordSpecificsData* mutable_client_only_encrypted_data();
  inline ::sync_pb::PasswordSpecificsData* release_client_only_encrypted_data();
  inline void set_allocated_client_only_encrypted_data(::sync_pb::PasswordSpecificsData* client_only_encrypted_data);

  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecifics)
 private:
  inline void set_has_encrypted();
  inline void clear_has_encrypted();
  inline void set_has_client_only_encrypted_data();
  inline void clear_has_client_only_encrypted_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::sync_pb::EncryptedData* encrypted_;
  ::sync_pb::PasswordSpecificsData* client_only_encrypted_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_password_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_password_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_password_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_password_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static PasswordSpecifics* default_instance_;
};
// ===================================================================


// ===================================================================

// PasswordSpecificsData

// optional int32 scheme = 1;
inline bool PasswordSpecificsData::has_scheme() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PasswordSpecificsData::set_has_scheme() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PasswordSpecificsData::clear_has_scheme() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PasswordSpecificsData::clear_scheme() {
  scheme_ = 0;
  clear_has_scheme();
}
inline ::google::protobuf::int32 PasswordSpecificsData::scheme() const {
  return scheme_;
}
inline void PasswordSpecificsData::set_scheme(::google::protobuf::int32 value) {
  set_has_scheme();
  scheme_ = value;
}

// optional string signon_realm = 2;
inline bool PasswordSpecificsData::has_signon_realm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PasswordSpecificsData::set_has_signon_realm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PasswordSpecificsData::clear_has_signon_realm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PasswordSpecificsData::clear_signon_realm() {
  if (signon_realm_ != &::google::protobuf::internal::GetEmptyString()) {
    signon_realm_->clear();
  }
  clear_has_signon_realm();
}
inline const ::std::string& PasswordSpecificsData::signon_realm() const {
  return *signon_realm_;
}
inline void PasswordSpecificsData::set_signon_realm(const ::std::string& value) {
  set_has_signon_realm();
  if (signon_realm_ == &::google::protobuf::internal::GetEmptyString()) {
    signon_realm_ = new ::std::string;
  }
  signon_realm_->assign(value);
}
inline void PasswordSpecificsData::set_signon_realm(const char* value) {
  set_has_signon_realm();
  if (signon_realm_ == &::google::protobuf::internal::GetEmptyString()) {
    signon_realm_ = new ::std::string;
  }
  signon_realm_->assign(value);
}
inline void PasswordSpecificsData::set_signon_realm(const char* value, size_t size) {
  set_has_signon_realm();
  if (signon_realm_ == &::google::protobuf::internal::GetEmptyString()) {
    signon_realm_ = new ::std::string;
  }
  signon_realm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PasswordSpecificsData::mutable_signon_realm() {
  set_has_signon_realm();
  if (signon_realm_ == &::google::protobuf::internal::GetEmptyString()) {
    signon_realm_ = new ::std::string;
  }
  return signon_realm_;
}
inline ::std::string* PasswordSpecificsData::release_signon_realm() {
  clear_has_signon_realm();
  if (signon_realm_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = signon_realm_;
    signon_realm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PasswordSpecificsData::set_allocated_signon_realm(::std::string* signon_realm) {
  if (signon_realm_ != &::google::protobuf::internal::GetEmptyString()) {
    delete signon_realm_;
  }
  if (signon_realm) {
    set_has_signon_realm();
    signon_realm_ = signon_realm;
  } else {
    clear_has_signon_realm();
    signon_realm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string origin = 3;
inline bool PasswordSpecificsData::has_origin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PasswordSpecificsData::set_has_origin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PasswordSpecificsData::clear_has_origin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PasswordSpecificsData::clear_origin() {
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    origin_->clear();
  }
  clear_has_origin();
}
inline const ::std::string& PasswordSpecificsData::origin() const {
  return *origin_;
}
inline void PasswordSpecificsData::set_origin(const ::std::string& value) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  origin_->assign(value);
}
inline void PasswordSpecificsData::set_origin(const char* value) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  origin_->assign(value);
}
inline void PasswordSpecificsData::set_origin(const char* value, size_t size) {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  origin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PasswordSpecificsData::mutable_origin() {
  set_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    origin_ = new ::std::string;
  }
  return origin_;
}
inline ::std::string* PasswordSpecificsData::release_origin() {
  clear_has_origin();
  if (origin_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = origin_;
    origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PasswordSpecificsData::set_allocated_origin(::std::string* origin) {
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    delete origin_;
  }
  if (origin) {
    set_has_origin();
    origin_ = origin;
  } else {
    clear_has_origin();
    origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string action = 4;
inline bool PasswordSpecificsData::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PasswordSpecificsData::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PasswordSpecificsData::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PasswordSpecificsData::clear_action() {
  if (action_ != &::google::protobuf::internal::GetEmptyString()) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& PasswordSpecificsData::action() const {
  return *action_;
}
inline void PasswordSpecificsData::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyString()) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void PasswordSpecificsData::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyString()) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void PasswordSpecificsData::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyString()) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PasswordSpecificsData::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyString()) {
    action_ = new ::std::string;
  }
  return action_;
}
inline ::std::string* PasswordSpecificsData::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PasswordSpecificsData::set_allocated_action(::std::string* action) {
  if (action_ != &::google::protobuf::internal::GetEmptyString()) {
    delete action_;
  }
  if (action) {
    set_has_action();
    action_ = action;
  } else {
    clear_has_action();
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string username_element = 5;
inline bool PasswordSpecificsData::has_username_element() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PasswordSpecificsData::set_has_username_element() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PasswordSpecificsData::clear_has_username_element() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PasswordSpecificsData::clear_username_element() {
  if (username_element_ != &::google::protobuf::internal::GetEmptyString()) {
    username_element_->clear();
  }
  clear_has_username_element();
}
inline const ::std::string& PasswordSpecificsData::username_element() const {
  return *username_element_;
}
inline void PasswordSpecificsData::set_username_element(const ::std::string& value) {
  set_has_username_element();
  if (username_element_ == &::google::protobuf::internal::GetEmptyString()) {
    username_element_ = new ::std::string;
  }
  username_element_->assign(value);
}
inline void PasswordSpecificsData::set_username_element(const char* value) {
  set_has_username_element();
  if (username_element_ == &::google::protobuf::internal::GetEmptyString()) {
    username_element_ = new ::std::string;
  }
  username_element_->assign(value);
}
inline void PasswordSpecificsData::set_username_element(const char* value, size_t size) {
  set_has_username_element();
  if (username_element_ == &::google::protobuf::internal::GetEmptyString()) {
    username_element_ = new ::std::string;
  }
  username_element_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PasswordSpecificsData::mutable_username_element() {
  set_has_username_element();
  if (username_element_ == &::google::protobuf::internal::GetEmptyString()) {
    username_element_ = new ::std::string;
  }
  return username_element_;
}
inline ::std::string* PasswordSpecificsData::release_username_element() {
  clear_has_username_element();
  if (username_element_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = username_element_;
    username_element_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PasswordSpecificsData::set_allocated_username_element(::std::string* username_element) {
  if (username_element_ != &::google::protobuf::internal::GetEmptyString()) {
    delete username_element_;
  }
  if (username_element) {
    set_has_username_element();
    username_element_ = username_element;
  } else {
    clear_has_username_element();
    username_element_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string username_value = 6;
inline bool PasswordSpecificsData::has_username_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PasswordSpecificsData::set_has_username_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PasswordSpecificsData::clear_has_username_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PasswordSpecificsData::clear_username_value() {
  if (username_value_ != &::google::protobuf::internal::GetEmptyString()) {
    username_value_->clear();
  }
  clear_has_username_value();
}
inline const ::std::string& PasswordSpecificsData::username_value() const {
  return *username_value_;
}
inline void PasswordSpecificsData::set_username_value(const ::std::string& value) {
  set_has_username_value();
  if (username_value_ == &::google::protobuf::internal::GetEmptyString()) {
    username_value_ = new ::std::string;
  }
  username_value_->assign(value);
}
inline void PasswordSpecificsData::set_username_value(const char* value) {
  set_has_username_value();
  if (username_value_ == &::google::protobuf::internal::GetEmptyString()) {
    username_value_ = new ::std::string;
  }
  username_value_->assign(value);
}
inline void PasswordSpecificsData::set_username_value(const char* value, size_t size) {
  set_has_username_value();
  if (username_value_ == &::google::protobuf::internal::GetEmptyString()) {
    username_value_ = new ::std::string;
  }
  username_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PasswordSpecificsData::mutable_username_value() {
  set_has_username_value();
  if (username_value_ == &::google::protobuf::internal::GetEmptyString()) {
    username_value_ = new ::std::string;
  }
  return username_value_;
}
inline ::std::string* PasswordSpecificsData::release_username_value() {
  clear_has_username_value();
  if (username_value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = username_value_;
    username_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PasswordSpecificsData::set_allocated_username_value(::std::string* username_value) {
  if (username_value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete username_value_;
  }
  if (username_value) {
    set_has_username_value();
    username_value_ = username_value;
  } else {
    clear_has_username_value();
    username_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string password_element = 7;
inline bool PasswordSpecificsData::has_password_element() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PasswordSpecificsData::set_has_password_element() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PasswordSpecificsData::clear_has_password_element() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PasswordSpecificsData::clear_password_element() {
  if (password_element_ != &::google::protobuf::internal::GetEmptyString()) {
    password_element_->clear();
  }
  clear_has_password_element();
}
inline const ::std::string& PasswordSpecificsData::password_element() const {
  return *password_element_;
}
inline void PasswordSpecificsData::set_password_element(const ::std::string& value) {
  set_has_password_element();
  if (password_element_ == &::google::protobuf::internal::GetEmptyString()) {
    password_element_ = new ::std::string;
  }
  password_element_->assign(value);
}
inline void PasswordSpecificsData::set_password_element(const char* value) {
  set_has_password_element();
  if (password_element_ == &::google::protobuf::internal::GetEmptyString()) {
    password_element_ = new ::std::string;
  }
  password_element_->assign(value);
}
inline void PasswordSpecificsData::set_password_element(const char* value, size_t size) {
  set_has_password_element();
  if (password_element_ == &::google::protobuf::internal::GetEmptyString()) {
    password_element_ = new ::std::string;
  }
  password_element_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PasswordSpecificsData::mutable_password_element() {
  set_has_password_element();
  if (password_element_ == &::google::protobuf::internal::GetEmptyString()) {
    password_element_ = new ::std::string;
  }
  return password_element_;
}
inline ::std::string* PasswordSpecificsData::release_password_element() {
  clear_has_password_element();
  if (password_element_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = password_element_;
    password_element_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PasswordSpecificsData::set_allocated_password_element(::std::string* password_element) {
  if (password_element_ != &::google::protobuf::internal::GetEmptyString()) {
    delete password_element_;
  }
  if (password_element) {
    set_has_password_element();
    password_element_ = password_element;
  } else {
    clear_has_password_element();
    password_element_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string password_value = 8;
inline bool PasswordSpecificsData::has_password_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PasswordSpecificsData::set_has_password_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PasswordSpecificsData::clear_has_password_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PasswordSpecificsData::clear_password_value() {
  if (password_value_ != &::google::protobuf::internal::GetEmptyString()) {
    password_value_->clear();
  }
  clear_has_password_value();
}
inline const ::std::string& PasswordSpecificsData::password_value() const {
  return *password_value_;
}
inline void PasswordSpecificsData::set_password_value(const ::std::string& value) {
  set_has_password_value();
  if (password_value_ == &::google::protobuf::internal::GetEmptyString()) {
    password_value_ = new ::std::string;
  }
  password_value_->assign(value);
}
inline void PasswordSpecificsData::set_password_value(const char* value) {
  set_has_password_value();
  if (password_value_ == &::google::protobuf::internal::GetEmptyString()) {
    password_value_ = new ::std::string;
  }
  password_value_->assign(value);
}
inline void PasswordSpecificsData::set_password_value(const char* value, size_t size) {
  set_has_password_value();
  if (password_value_ == &::google::protobuf::internal::GetEmptyString()) {
    password_value_ = new ::std::string;
  }
  password_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PasswordSpecificsData::mutable_password_value() {
  set_has_password_value();
  if (password_value_ == &::google::protobuf::internal::GetEmptyString()) {
    password_value_ = new ::std::string;
  }
  return password_value_;
}
inline ::std::string* PasswordSpecificsData::release_password_value() {
  clear_has_password_value();
  if (password_value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = password_value_;
    password_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PasswordSpecificsData::set_allocated_password_value(::std::string* password_value) {
  if (password_value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete password_value_;
  }
  if (password_value) {
    set_has_password_value();
    password_value_ = password_value;
  } else {
    clear_has_password_value();
    password_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bool ssl_valid = 9;
inline bool PasswordSpecificsData::has_ssl_valid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PasswordSpecificsData::set_has_ssl_valid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PasswordSpecificsData::clear_has_ssl_valid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PasswordSpecificsData::clear_ssl_valid() {
  ssl_valid_ = false;
  clear_has_ssl_valid();
}
inline bool PasswordSpecificsData::ssl_valid() const {
  return ssl_valid_;
}
inline void PasswordSpecificsData::set_ssl_valid(bool value) {
  set_has_ssl_valid();
  ssl_valid_ = value;
}

// optional bool preferred = 10;
inline bool PasswordSpecificsData::has_preferred() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PasswordSpecificsData::set_has_preferred() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PasswordSpecificsData::clear_has_preferred() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PasswordSpecificsData::clear_preferred() {
  preferred_ = false;
  clear_has_preferred();
}
inline bool PasswordSpecificsData::preferred() const {
  return preferred_;
}
inline void PasswordSpecificsData::set_preferred(bool value) {
  set_has_preferred();
  preferred_ = value;
}

// optional int64 date_created = 11;
inline bool PasswordSpecificsData::has_date_created() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PasswordSpecificsData::set_has_date_created() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PasswordSpecificsData::clear_has_date_created() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PasswordSpecificsData::clear_date_created() {
  date_created_ = GOOGLE_LONGLONG(0);
  clear_has_date_created();
}
inline ::google::protobuf::int64 PasswordSpecificsData::date_created() const {
  return date_created_;
}
inline void PasswordSpecificsData::set_date_created(::google::protobuf::int64 value) {
  set_has_date_created();
  date_created_ = value;
}

// optional bool blacklisted = 12;
inline bool PasswordSpecificsData::has_blacklisted() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PasswordSpecificsData::set_has_blacklisted() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PasswordSpecificsData::clear_has_blacklisted() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PasswordSpecificsData::clear_blacklisted() {
  blacklisted_ = false;
  clear_has_blacklisted();
}
inline bool PasswordSpecificsData::blacklisted() const {
  return blacklisted_;
}
inline void PasswordSpecificsData::set_blacklisted(bool value) {
  set_has_blacklisted();
  blacklisted_ = value;
}

// -------------------------------------------------------------------

// PasswordSpecifics

// optional .sync_pb.EncryptedData encrypted = 1;
inline bool PasswordSpecifics::has_encrypted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PasswordSpecifics::set_has_encrypted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PasswordSpecifics::clear_has_encrypted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PasswordSpecifics::clear_encrypted() {
  if (encrypted_ != NULL) encrypted_->::sync_pb::EncryptedData::Clear();
  clear_has_encrypted();
}
inline const ::sync_pb::EncryptedData& PasswordSpecifics::encrypted() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return encrypted_ != NULL ? *encrypted_ : *default_instance().encrypted_;
#else
  return encrypted_ != NULL ? *encrypted_ : *default_instance_->encrypted_;
#endif
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::mutable_encrypted() {
  set_has_encrypted();
  if (encrypted_ == NULL) encrypted_ = new ::sync_pb::EncryptedData;
  return encrypted_;
}
inline ::sync_pb::EncryptedData* PasswordSpecifics::release_encrypted() {
  clear_has_encrypted();
  ::sync_pb::EncryptedData* temp = encrypted_;
  encrypted_ = NULL;
  return temp;
}
inline void PasswordSpecifics::set_allocated_encrypted(::sync_pb::EncryptedData* encrypted) {
  delete encrypted_;
  encrypted_ = encrypted;
  if (encrypted) {
    set_has_encrypted();
  } else {
    clear_has_encrypted();
  }
}

// optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
inline bool PasswordSpecifics::has_client_only_encrypted_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PasswordSpecifics::set_has_client_only_encrypted_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PasswordSpecifics::clear_has_client_only_encrypted_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PasswordSpecifics::clear_client_only_encrypted_data() {
  if (client_only_encrypted_data_ != NULL) client_only_encrypted_data_->::sync_pb::PasswordSpecificsData::Clear();
  clear_has_client_only_encrypted_data();
}
inline const ::sync_pb::PasswordSpecificsData& PasswordSpecifics::client_only_encrypted_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return client_only_encrypted_data_ != NULL ? *client_only_encrypted_data_ : *default_instance().client_only_encrypted_data_;
#else
  return client_only_encrypted_data_ != NULL ? *client_only_encrypted_data_ : *default_instance_->client_only_encrypted_data_;
#endif
}
inline ::sync_pb::PasswordSpecificsData* PasswordSpecifics::mutable_client_only_encrypted_data() {
  set_has_client_only_encrypted_data();
  if (client_only_encrypted_data_ == NULL) client_only_encrypted_data_ = new ::sync_pb::PasswordSpecificsData;
  return client_only_encrypted_data_;
}
inline ::sync_pb::PasswordSpecificsData* PasswordSpecifics::release_client_only_encrypted_data() {
  clear_has_client_only_encrypted_data();
  ::sync_pb::PasswordSpecificsData* temp = client_only_encrypted_data_;
  client_only_encrypted_data_ = NULL;
  return temp;
}
inline void PasswordSpecifics::set_allocated_client_only_encrypted_data(::sync_pb::PasswordSpecificsData* client_only_encrypted_data) {
  delete client_only_encrypted_data_;
  client_only_encrypted_data_ = client_only_encrypted_data;
  if (client_only_encrypted_data) {
    set_has_client_only_encrypted_data();
  } else {
    clear_has_client_only_encrypted_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_password_5fspecifics_2eproto__INCLUDED
