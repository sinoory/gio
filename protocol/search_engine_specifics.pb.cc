// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search_engine_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "search_engine_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_search_5fengine_5fspecifics_2eproto() {
  delete SearchEngineSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_search_5fengine_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_search_5fengine_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SearchEngineSpecifics::default_instance_ = new SearchEngineSpecifics();
  SearchEngineSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_search_5fengine_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_search_5fengine_5fspecifics_2eproto_once_);
void protobuf_AddDesc_search_5fengine_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_search_5fengine_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_search_5fengine_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_search_5fengine_5fspecifics_2eproto {
  StaticDescriptorInitializer_search_5fengine_5fspecifics_2eproto() {
    protobuf_AddDesc_search_5fengine_5fspecifics_2eproto();
  }
} static_descriptor_initializer_search_5fengine_5fspecifics_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SearchEngineSpecifics::kShortNameFieldNumber;
const int SearchEngineSpecifics::kKeywordFieldNumber;
const int SearchEngineSpecifics::kFaviconUrlFieldNumber;
const int SearchEngineSpecifics::kUrlFieldNumber;
const int SearchEngineSpecifics::kSafeForAutoreplaceFieldNumber;
const int SearchEngineSpecifics::kOriginatingUrlFieldNumber;
const int SearchEngineSpecifics::kDateCreatedFieldNumber;
const int SearchEngineSpecifics::kInputEncodingsFieldNumber;
const int SearchEngineSpecifics::kShowInDefaultListFieldNumber;
const int SearchEngineSpecifics::kSuggestionsUrlFieldNumber;
const int SearchEngineSpecifics::kPrepopulateIdFieldNumber;
const int SearchEngineSpecifics::kAutogenerateKeywordFieldNumber;
const int SearchEngineSpecifics::kInstantUrlFieldNumber;
const int SearchEngineSpecifics::kLastModifiedFieldNumber;
const int SearchEngineSpecifics::kSyncGuidFieldNumber;
const int SearchEngineSpecifics::kAlternateUrlsFieldNumber;
const int SearchEngineSpecifics::kSearchTermsReplacementKeyFieldNumber;
const int SearchEngineSpecifics::kImageUrlFieldNumber;
const int SearchEngineSpecifics::kSearchUrlPostParamsFieldNumber;
const int SearchEngineSpecifics::kSuggestionsUrlPostParamsFieldNumber;
const int SearchEngineSpecifics::kInstantUrlPostParamsFieldNumber;
const int SearchEngineSpecifics::kImageUrlPostParamsFieldNumber;
const int SearchEngineSpecifics::kNewTabUrlFieldNumber;
#endif  // !_MSC_VER

SearchEngineSpecifics::SearchEngineSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SearchEngineSpecifics::InitAsDefaultInstance() {
}

SearchEngineSpecifics::SearchEngineSpecifics(const SearchEngineSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SearchEngineSpecifics::SharedCtor() {
  _cached_size_ = 0;
  short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  favicon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  safe_for_autoreplace_ = false;
  originating_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  date_created_ = GOOGLE_LONGLONG(0);
  input_encodings_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  show_in_default_list_ = false;
  suggestions_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  prepopulate_id_ = 0;
  autogenerate_keyword_ = false;
  instant_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  last_modified_ = GOOGLE_LONGLONG(0);
  sync_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  search_terms_replacement_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  search_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  suggestions_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  instant_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  image_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  new_tab_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchEngineSpecifics::~SearchEngineSpecifics() {
  SharedDtor();
}

void SearchEngineSpecifics::SharedDtor() {
  if (short_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete short_name_;
  }
  if (keyword_ != &::google::protobuf::internal::GetEmptyString()) {
    delete keyword_;
  }
  if (favicon_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_url_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (originating_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete originating_url_;
  }
  if (input_encodings_ != &::google::protobuf::internal::GetEmptyString()) {
    delete input_encodings_;
  }
  if (suggestions_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete suggestions_url_;
  }
  if (instant_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete instant_url_;
  }
  if (sync_guid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete sync_guid_;
  }
  if (search_terms_replacement_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete search_terms_replacement_key_;
  }
  if (image_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete image_url_;
  }
  if (search_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    delete search_url_post_params_;
  }
  if (suggestions_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    delete suggestions_url_post_params_;
  }
  if (instant_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    delete instant_url_post_params_;
  }
  if (image_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    delete image_url_post_params_;
  }
  if (new_tab_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete new_tab_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchEngineSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchEngineSpecifics& SearchEngineSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_search_5fengine_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_search_5fengine_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

SearchEngineSpecifics* SearchEngineSpecifics::default_instance_ = NULL;

SearchEngineSpecifics* SearchEngineSpecifics::New() const {
  return new SearchEngineSpecifics;
}

void SearchEngineSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_short_name()) {
      if (short_name_ != &::google::protobuf::internal::GetEmptyString()) {
        short_name_->clear();
      }
    }
    if (has_keyword()) {
      if (keyword_ != &::google::protobuf::internal::GetEmptyString()) {
        keyword_->clear();
      }
    }
    if (has_favicon_url()) {
      if (favicon_url_ != &::google::protobuf::internal::GetEmptyString()) {
        favicon_url_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyString()) {
        url_->clear();
      }
    }
    safe_for_autoreplace_ = false;
    if (has_originating_url()) {
      if (originating_url_ != &::google::protobuf::internal::GetEmptyString()) {
        originating_url_->clear();
      }
    }
    date_created_ = GOOGLE_LONGLONG(0);
    if (has_input_encodings()) {
      if (input_encodings_ != &::google::protobuf::internal::GetEmptyString()) {
        input_encodings_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    show_in_default_list_ = false;
    if (has_suggestions_url()) {
      if (suggestions_url_ != &::google::protobuf::internal::GetEmptyString()) {
        suggestions_url_->clear();
      }
    }
    prepopulate_id_ = 0;
    autogenerate_keyword_ = false;
    if (has_instant_url()) {
      if (instant_url_ != &::google::protobuf::internal::GetEmptyString()) {
        instant_url_->clear();
      }
    }
    last_modified_ = GOOGLE_LONGLONG(0);
    if (has_sync_guid()) {
      if (sync_guid_ != &::google::protobuf::internal::GetEmptyString()) {
        sync_guid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_search_terms_replacement_key()) {
      if (search_terms_replacement_key_ != &::google::protobuf::internal::GetEmptyString()) {
        search_terms_replacement_key_->clear();
      }
    }
    if (has_image_url()) {
      if (image_url_ != &::google::protobuf::internal::GetEmptyString()) {
        image_url_->clear();
      }
    }
    if (has_search_url_post_params()) {
      if (search_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
        search_url_post_params_->clear();
      }
    }
    if (has_suggestions_url_post_params()) {
      if (suggestions_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
        suggestions_url_post_params_->clear();
      }
    }
    if (has_instant_url_post_params()) {
      if (instant_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
        instant_url_post_params_->clear();
      }
    }
    if (has_image_url_post_params()) {
      if (image_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
        image_url_post_params_->clear();
      }
    }
    if (has_new_tab_url()) {
      if (new_tab_url_ != &::google::protobuf::internal::GetEmptyString()) {
        new_tab_url_->clear();
      }
    }
  }
  alternate_urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchEngineSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string short_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keyword;
        break;
      }

      // optional string keyword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_favicon_url;
        break;
      }

      // optional string favicon_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional string url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_safe_for_autoreplace;
        break;
      }

      // optional bool safe_for_autoreplace = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_safe_for_autoreplace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &safe_for_autoreplace_)));
          set_has_safe_for_autoreplace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_originating_url;
        break;
      }

      // optional string originating_url = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originating_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originating_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_date_created;
        break;
      }

      // optional int64 date_created = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_created_)));
          set_has_date_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_input_encodings;
        break;
      }

      // optional string input_encodings = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_encodings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_encodings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_show_in_default_list;
        break;
      }

      // optional bool show_in_default_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_in_default_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_in_default_list_)));
          set_has_show_in_default_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_suggestions_url;
        break;
      }

      // optional string suggestions_url = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggestions_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggestions_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_prepopulate_id;
        break;
      }

      // optional int32 prepopulate_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prepopulate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prepopulate_id_)));
          set_has_prepopulate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_autogenerate_keyword;
        break;
      }

      // optional bool autogenerate_keyword = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autogenerate_keyword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autogenerate_keyword_)));
          set_has_autogenerate_keyword();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_instant_url;
        break;
      }

      // optional string instant_url = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instant_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instant_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_last_modified;
        break;
      }

      // optional int64 last_modified = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_modified_)));
          set_has_last_modified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_sync_guid;
        break;
      }

      // optional string sync_guid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sync_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_alternate_urls;
        break;
      }

      // repeated string alternate_urls = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alternate_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alternate_urls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_alternate_urls;
        if (input->ExpectTag(162)) goto parse_search_terms_replacement_key;
        break;
      }

      // optional string search_terms_replacement_key = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_terms_replacement_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_terms_replacement_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_image_url;
        break;
      }

      // optional string image_url = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_search_url_post_params;
        break;
      }

      // optional string search_url_post_params = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_url_post_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_url_post_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_suggestions_url_post_params;
        break;
      }

      // optional string suggestions_url_post_params = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggestions_url_post_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggestions_url_post_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_instant_url_post_params;
        break;
      }

      // optional string instant_url_post_params = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instant_url_post_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instant_url_post_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_image_url_post_params;
        break;
      }

      // optional string image_url_post_params = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_url_post_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url_post_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_new_tab_url;
        break;
      }

      // optional string new_tab_url = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_tab_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_tab_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchEngineSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string short_name = 1;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->short_name(), output);
  }

  // optional string keyword = 2;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->keyword(), output);
  }

  // optional string favicon_url = 3;
  if (has_favicon_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->favicon_url(), output);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->url(), output);
  }

  // optional bool safe_for_autoreplace = 5;
  if (has_safe_for_autoreplace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->safe_for_autoreplace(), output);
  }

  // optional string originating_url = 6;
  if (has_originating_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->originating_url(), output);
  }

  // optional int64 date_created = 7;
  if (has_date_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->date_created(), output);
  }

  // optional string input_encodings = 8;
  if (has_input_encodings()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->input_encodings(), output);
  }

  // optional bool show_in_default_list = 9;
  if (has_show_in_default_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->show_in_default_list(), output);
  }

  // optional string suggestions_url = 10;
  if (has_suggestions_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->suggestions_url(), output);
  }

  // optional int32 prepopulate_id = 11;
  if (has_prepopulate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->prepopulate_id(), output);
  }

  // optional bool autogenerate_keyword = 12;
  if (has_autogenerate_keyword()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->autogenerate_keyword(), output);
  }

  // optional string instant_url = 15;
  if (has_instant_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->instant_url(), output);
  }

  // optional int64 last_modified = 17;
  if (has_last_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->last_modified(), output);
  }

  // optional string sync_guid = 18;
  if (has_sync_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->sync_guid(), output);
  }

  // repeated string alternate_urls = 19;
  for (int i = 0; i < this->alternate_urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->alternate_urls(i), output);
  }

  // optional string search_terms_replacement_key = 20;
  if (has_search_terms_replacement_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->search_terms_replacement_key(), output);
  }

  // optional string image_url = 21;
  if (has_image_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->image_url(), output);
  }

  // optional string search_url_post_params = 22;
  if (has_search_url_post_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->search_url_post_params(), output);
  }

  // optional string suggestions_url_post_params = 23;
  if (has_suggestions_url_post_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->suggestions_url_post_params(), output);
  }

  // optional string instant_url_post_params = 24;
  if (has_instant_url_post_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->instant_url_post_params(), output);
  }

  // optional string image_url_post_params = 25;
  if (has_image_url_post_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->image_url_post_params(), output);
  }

  // optional string new_tab_url = 26;
  if (has_new_tab_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->new_tab_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SearchEngineSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string short_name = 1;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }

    // optional string keyword = 2;
    if (has_keyword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyword());
    }

    // optional string favicon_url = 3;
    if (has_favicon_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon_url());
    }

    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bool safe_for_autoreplace = 5;
    if (has_safe_for_autoreplace()) {
      total_size += 1 + 1;
    }

    // optional string originating_url = 6;
    if (has_originating_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originating_url());
    }

    // optional int64 date_created = 7;
    if (has_date_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date_created());
    }

    // optional string input_encodings = 8;
    if (has_input_encodings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_encodings());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool show_in_default_list = 9;
    if (has_show_in_default_list()) {
      total_size += 1 + 1;
    }

    // optional string suggestions_url = 10;
    if (has_suggestions_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggestions_url());
    }

    // optional int32 prepopulate_id = 11;
    if (has_prepopulate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prepopulate_id());
    }

    // optional bool autogenerate_keyword = 12;
    if (has_autogenerate_keyword()) {
      total_size += 1 + 1;
    }

    // optional string instant_url = 15;
    if (has_instant_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instant_url());
    }

    // optional int64 last_modified = 17;
    if (has_last_modified()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_modified());
    }

    // optional string sync_guid = 18;
    if (has_sync_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sync_guid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string search_terms_replacement_key = 20;
    if (has_search_terms_replacement_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_terms_replacement_key());
    }

    // optional string image_url = 21;
    if (has_image_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_url());
    }

    // optional string search_url_post_params = 22;
    if (has_search_url_post_params()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_url_post_params());
    }

    // optional string suggestions_url_post_params = 23;
    if (has_suggestions_url_post_params()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggestions_url_post_params());
    }

    // optional string instant_url_post_params = 24;
    if (has_instant_url_post_params()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instant_url_post_params());
    }

    // optional string image_url_post_params = 25;
    if (has_image_url_post_params()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_url_post_params());
    }

    // optional string new_tab_url = 26;
    if (has_new_tab_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_tab_url());
    }

  }
  // repeated string alternate_urls = 19;
  total_size += 2 * this->alternate_urls_size();
  for (int i = 0; i < this->alternate_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alternate_urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchEngineSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchEngineSpecifics*>(&from));
}

void SearchEngineSpecifics::MergeFrom(const SearchEngineSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  alternate_urls_.MergeFrom(from.alternate_urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_short_name()) {
      set_short_name(from.short_name());
    }
    if (from.has_keyword()) {
      set_keyword(from.keyword());
    }
    if (from.has_favicon_url()) {
      set_favicon_url(from.favicon_url());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_safe_for_autoreplace()) {
      set_safe_for_autoreplace(from.safe_for_autoreplace());
    }
    if (from.has_originating_url()) {
      set_originating_url(from.originating_url());
    }
    if (from.has_date_created()) {
      set_date_created(from.date_created());
    }
    if (from.has_input_encodings()) {
      set_input_encodings(from.input_encodings());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_show_in_default_list()) {
      set_show_in_default_list(from.show_in_default_list());
    }
    if (from.has_suggestions_url()) {
      set_suggestions_url(from.suggestions_url());
    }
    if (from.has_prepopulate_id()) {
      set_prepopulate_id(from.prepopulate_id());
    }
    if (from.has_autogenerate_keyword()) {
      set_autogenerate_keyword(from.autogenerate_keyword());
    }
    if (from.has_instant_url()) {
      set_instant_url(from.instant_url());
    }
    if (from.has_last_modified()) {
      set_last_modified(from.last_modified());
    }
    if (from.has_sync_guid()) {
      set_sync_guid(from.sync_guid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_search_terms_replacement_key()) {
      set_search_terms_replacement_key(from.search_terms_replacement_key());
    }
    if (from.has_image_url()) {
      set_image_url(from.image_url());
    }
    if (from.has_search_url_post_params()) {
      set_search_url_post_params(from.search_url_post_params());
    }
    if (from.has_suggestions_url_post_params()) {
      set_suggestions_url_post_params(from.suggestions_url_post_params());
    }
    if (from.has_instant_url_post_params()) {
      set_instant_url_post_params(from.instant_url_post_params());
    }
    if (from.has_image_url_post_params()) {
      set_image_url_post_params(from.image_url_post_params());
    }
    if (from.has_new_tab_url()) {
      set_new_tab_url(from.new_tab_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchEngineSpecifics::CopyFrom(const SearchEngineSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchEngineSpecifics::IsInitialized() const {

  return true;
}

void SearchEngineSpecifics::Swap(SearchEngineSpecifics* other) {
  if (other != this) {
    std::swap(short_name_, other->short_name_);
    std::swap(keyword_, other->keyword_);
    std::swap(favicon_url_, other->favicon_url_);
    std::swap(url_, other->url_);
    std::swap(safe_for_autoreplace_, other->safe_for_autoreplace_);
    std::swap(originating_url_, other->originating_url_);
    std::swap(date_created_, other->date_created_);
    std::swap(input_encodings_, other->input_encodings_);
    std::swap(show_in_default_list_, other->show_in_default_list_);
    std::swap(suggestions_url_, other->suggestions_url_);
    std::swap(prepopulate_id_, other->prepopulate_id_);
    std::swap(autogenerate_keyword_, other->autogenerate_keyword_);
    std::swap(instant_url_, other->instant_url_);
    std::swap(last_modified_, other->last_modified_);
    std::swap(sync_guid_, other->sync_guid_);
    alternate_urls_.Swap(&other->alternate_urls_);
    std::swap(search_terms_replacement_key_, other->search_terms_replacement_key_);
    std::swap(image_url_, other->image_url_);
    std::swap(search_url_post_params_, other->search_url_post_params_);
    std::swap(suggestions_url_post_params_, other->suggestions_url_post_params_);
    std::swap(instant_url_post_params_, other->instant_url_post_params_);
    std::swap(image_url_post_params_, other->image_url_post_params_);
    std::swap(new_tab_url_, other->new_tab_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchEngineSpecifics::GetTypeName() const {
  return "sync_pb.SearchEngineSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
