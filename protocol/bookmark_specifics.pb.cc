// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bookmark_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bookmark_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_bookmark_5fspecifics_2eproto() {
  delete MetaInfo::default_instance_;
  delete BookmarkSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_bookmark_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_bookmark_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MetaInfo::default_instance_ = new MetaInfo();
  BookmarkSpecifics::default_instance_ = new BookmarkSpecifics();
  MetaInfo::default_instance_->InitAsDefaultInstance();
  BookmarkSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bookmark_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_bookmark_5fspecifics_2eproto_once_);
void protobuf_AddDesc_bookmark_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_bookmark_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_bookmark_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bookmark_5fspecifics_2eproto {
  StaticDescriptorInitializer_bookmark_5fspecifics_2eproto() {
    protobuf_AddDesc_bookmark_5fspecifics_2eproto();
  }
} static_descriptor_initializer_bookmark_5fspecifics_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MetaInfo::kKeyFieldNumber;
const int MetaInfo::kValueFieldNumber;
#endif  // !_MSC_VER

MetaInfo::MetaInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MetaInfo::InitAsDefaultInstance() {
}

MetaInfo::MetaInfo(const MetaInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MetaInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaInfo::~MetaInfo() {
  SharedDtor();
}

void MetaInfo::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MetaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MetaInfo& MetaInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_bookmark_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_bookmark_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

MetaInfo* MetaInfo::default_instance_ = NULL;

MetaInfo* MetaInfo::New() const {
  return new MetaInfo;
}

void MetaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyString()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int MetaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MetaInfo*>(&from));
}

void MetaInfo::MergeFrom(const MetaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaInfo::CopyFrom(const MetaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaInfo::IsInitialized() const {

  return true;
}

void MetaInfo::Swap(MetaInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MetaInfo::GetTypeName() const {
  return "sync_pb.MetaInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int BookmarkSpecifics::kUrlFieldNumber;
const int BookmarkSpecifics::kFaviconFieldNumber;
const int BookmarkSpecifics::kTitleFieldNumber;
const int BookmarkSpecifics::kCreationTimeUsFieldNumber;
const int BookmarkSpecifics::kIconUrlFieldNumber;
const int BookmarkSpecifics::kMetaInfoFieldNumber;
#endif  // !_MSC_VER

BookmarkSpecifics::BookmarkSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BookmarkSpecifics::InitAsDefaultInstance() {
}

BookmarkSpecifics::BookmarkSpecifics(const BookmarkSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BookmarkSpecifics::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  favicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  creation_time_us_ = GOOGLE_LONGLONG(0);
  icon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BookmarkSpecifics::~BookmarkSpecifics() {
  SharedDtor();
}

void BookmarkSpecifics::SharedDtor() {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (favicon_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (icon_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete icon_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BookmarkSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BookmarkSpecifics& BookmarkSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_bookmark_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_bookmark_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

BookmarkSpecifics* BookmarkSpecifics::default_instance_ = NULL;

BookmarkSpecifics* BookmarkSpecifics::New() const {
  return new BookmarkSpecifics;
}

void BookmarkSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyString()) {
        url_->clear();
      }
    }
    if (has_favicon()) {
      if (favicon_ != &::google::protobuf::internal::GetEmptyString()) {
        favicon_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyString()) {
        title_->clear();
      }
    }
    creation_time_us_ = GOOGLE_LONGLONG(0);
    if (has_icon_url()) {
      if (icon_url_ != &::google::protobuf::internal::GetEmptyString()) {
        icon_url_->clear();
      }
    }
  }
  meta_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BookmarkSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_favicon;
        break;
      }

      // optional bytes favicon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_favicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_creation_time_us;
        break;
      }

      // optional int64 creation_time_us = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creation_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_time_us_)));
          set_has_creation_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon_url;
        break;
      }

      // optional string icon_url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_meta_info;
        break;
      }

      // repeated .sync_pb.MetaInfo meta_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_meta_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_meta_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BookmarkSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

  // optional bytes favicon = 2;
  if (has_favicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->favicon(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional int64 creation_time_us = 4;
  if (has_creation_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->creation_time_us(), output);
  }

  // optional string icon_url = 5;
  if (has_icon_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon_url(), output);
  }

  // repeated .sync_pb.MetaInfo meta_info = 6;
  for (int i = 0; i < this->meta_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->meta_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int BookmarkSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bytes favicon = 2;
    if (has_favicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->favicon());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int64 creation_time_us = 4;
    if (has_creation_time_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creation_time_us());
    }

    // optional string icon_url = 5;
    if (has_icon_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_url());
    }

  }
  // repeated .sync_pb.MetaInfo meta_info = 6;
  total_size += 1 * this->meta_info_size();
  for (int i = 0; i < this->meta_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->meta_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BookmarkSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BookmarkSpecifics*>(&from));
}

void BookmarkSpecifics::MergeFrom(const BookmarkSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  meta_info_.MergeFrom(from.meta_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_favicon()) {
      set_favicon(from.favicon());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_creation_time_us()) {
      set_creation_time_us(from.creation_time_us());
    }
    if (from.has_icon_url()) {
      set_icon_url(from.icon_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BookmarkSpecifics::CopyFrom(const BookmarkSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookmarkSpecifics::IsInitialized() const {

  return true;
}

void BookmarkSpecifics::Swap(BookmarkSpecifics* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(favicon_, other->favicon_);
    std::swap(title_, other->title_);
    std::swap(creation_time_us_, other->creation_time_us_);
    std::swap(icon_url_, other->icon_url_);
    meta_info_.Swap(&other->meta_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BookmarkSpecifics::GetTypeName() const {
  return "sync_pb.BookmarkSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
