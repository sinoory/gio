// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_debug_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_debug_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_client_5fdebug_5finfo_2eproto() {
  delete TypeHint::default_instance_;
  delete SourceInfo::default_instance_;
  delete SyncCycleCompletedEventInfo::default_instance_;
  delete DatatypeAssociationStats::default_instance_;
  delete DebugEventInfo::default_instance_;
  delete DebugInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_client_5fdebug_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_client_5fdebug_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sync_pb::protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto();
  ::sync_pb::protobuf_AddDesc_sync_5fenums_2eproto();
  TypeHint::default_instance_ = new TypeHint();
  SourceInfo::default_instance_ = new SourceInfo();
  SyncCycleCompletedEventInfo::default_instance_ = new SyncCycleCompletedEventInfo();
  DatatypeAssociationStats::default_instance_ = new DatatypeAssociationStats();
  DebugEventInfo::default_instance_ = new DebugEventInfo();
  DebugInfo::default_instance_ = new DebugInfo();
  TypeHint::default_instance_->InitAsDefaultInstance();
  SourceInfo::default_instance_->InitAsDefaultInstance();
  SyncCycleCompletedEventInfo::default_instance_->InitAsDefaultInstance();
  DatatypeAssociationStats::default_instance_->InitAsDefaultInstance();
  DebugEventInfo::default_instance_->InitAsDefaultInstance();
  DebugInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fdebug_5finfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_client_5fdebug_5finfo_2eproto_once_);
void protobuf_AddDesc_client_5fdebug_5finfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_client_5fdebug_5finfo_2eproto_once_,
                 &protobuf_AddDesc_client_5fdebug_5finfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fdebug_5finfo_2eproto {
  StaticDescriptorInitializer_client_5fdebug_5finfo_2eproto() {
    protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
  }
} static_descriptor_initializer_client_5fdebug_5finfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int TypeHint::kDataTypeIdFieldNumber;
const int TypeHint::kHasValidHintFieldNumber;
#endif  // !_MSC_VER

TypeHint::TypeHint()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TypeHint::InitAsDefaultInstance() {
}

TypeHint::TypeHint(const TypeHint& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TypeHint::SharedCtor() {
  _cached_size_ = 0;
  data_type_id_ = 0;
  has_valid_hint_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypeHint::~TypeHint() {
  SharedDtor();
}

void TypeHint::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TypeHint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TypeHint& TypeHint::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#endif
  return *default_instance_;
}

TypeHint* TypeHint::default_instance_ = NULL;

TypeHint* TypeHint::New() const {
  return new TypeHint;
}

void TypeHint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_type_id_ = 0;
    has_valid_hint_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypeHint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_id_)));
          set_has_data_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_has_valid_hint;
        break;
      }

      // optional bool has_valid_hint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_valid_hint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_valid_hint_)));
          set_has_has_valid_hint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TypeHint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data_type_id = 1;
  if (has_data_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_type_id(), output);
  }

  // optional bool has_valid_hint = 2;
  if (has_has_valid_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_valid_hint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int TypeHint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data_type_id = 1;
    if (has_data_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type_id());
    }

    // optional bool has_valid_hint = 2;
    if (has_has_valid_hint()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeHint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TypeHint*>(&from));
}

void TypeHint::MergeFrom(const TypeHint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_type_id()) {
      set_data_type_id(from.data_type_id());
    }
    if (from.has_has_valid_hint()) {
      set_has_valid_hint(from.has_valid_hint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypeHint::CopyFrom(const TypeHint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeHint::IsInitialized() const {

  return true;
}

void TypeHint::Swap(TypeHint* other) {
  if (other != this) {
    std::swap(data_type_id_, other->data_type_id_);
    std::swap(has_valid_hint_, other->has_valid_hint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TypeHint::GetTypeName() const {
  return "sync_pb.TypeHint";
}


// ===================================================================

#ifndef _MSC_VER
const int SourceInfo::kSourceFieldNumber;
const int SourceInfo::kTypeHintFieldNumber;
#endif  // !_MSC_VER

SourceInfo::SourceInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SourceInfo::InitAsDefaultInstance() {
}

SourceInfo::SourceInfo(const SourceInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SourceInfo::SharedCtor() {
  _cached_size_ = 0;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SourceInfo::~SourceInfo() {
  SharedDtor();
}

void SourceInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SourceInfo& SourceInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#endif
  return *default_instance_;
}

SourceInfo* SourceInfo::default_instance_ = NULL;

SourceInfo* SourceInfo::New() const {
  return new SourceInfo;
}

void SourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_ = 0;
  }
  type_hint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource_IsValid(value)) {
            set_source(static_cast< ::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_hint;
        break;
      }

      // repeated .sync_pb.TypeHint type_hint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_type_hint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type_hint;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // repeated .sync_pb.TypeHint type_hint = 2;
  for (int i = 0; i < this->type_hint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->type_hint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  // repeated .sync_pb.TypeHint type_hint = 2;
  total_size += 1 * this->type_hint_size();
  for (int i = 0; i < this->type_hint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->type_hint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SourceInfo*>(&from));
}

void SourceInfo::MergeFrom(const SourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_hint_.MergeFrom(from.type_hint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SourceInfo::CopyFrom(const SourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceInfo::IsInitialized() const {

  return true;
}

void SourceInfo::Swap(SourceInfo* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    type_hint_.Swap(&other->type_hint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SourceInfo::GetTypeName() const {
  return "sync_pb.SourceInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncCycleCompletedEventInfo::kNumBlockingConflictsFieldNumber;
const int SyncCycleCompletedEventInfo::kNumNonBlockingConflictsFieldNumber;
const int SyncCycleCompletedEventInfo::kNumEncryptionConflictsFieldNumber;
const int SyncCycleCompletedEventInfo::kNumHierarchyConflictsFieldNumber;
const int SyncCycleCompletedEventInfo::kNumSimpleConflictsFieldNumber;
const int SyncCycleCompletedEventInfo::kNumServerConflictsFieldNumber;
const int SyncCycleCompletedEventInfo::kNumUpdatesDownloadedFieldNumber;
const int SyncCycleCompletedEventInfo::kNumReflectedUpdatesDownloadedFieldNumber;
const int SyncCycleCompletedEventInfo::kCallerInfoFieldNumber;
const int SyncCycleCompletedEventInfo::kSourceInfoFieldNumber;
#endif  // !_MSC_VER

SyncCycleCompletedEventInfo::SyncCycleCompletedEventInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncCycleCompletedEventInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  caller_info_ = const_cast< ::sync_pb::GetUpdatesCallerInfo*>(
      ::sync_pb::GetUpdatesCallerInfo::internal_default_instance());
#else
  caller_info_ = const_cast< ::sync_pb::GetUpdatesCallerInfo*>(&::sync_pb::GetUpdatesCallerInfo::default_instance());
#endif
}

SyncCycleCompletedEventInfo::SyncCycleCompletedEventInfo(const SyncCycleCompletedEventInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncCycleCompletedEventInfo::SharedCtor() {
  _cached_size_ = 0;
  num_blocking_conflicts_ = 0;
  num_non_blocking_conflicts_ = 0;
  num_encryption_conflicts_ = 0;
  num_hierarchy_conflicts_ = 0;
  num_simple_conflicts_ = 0;
  num_server_conflicts_ = 0;
  num_updates_downloaded_ = 0;
  num_reflected_updates_downloaded_ = 0;
  caller_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncCycleCompletedEventInfo::~SyncCycleCompletedEventInfo() {
  SharedDtor();
}

void SyncCycleCompletedEventInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete caller_info_;
  }
}

void SyncCycleCompletedEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncCycleCompletedEventInfo& SyncCycleCompletedEventInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#endif
  return *default_instance_;
}

SyncCycleCompletedEventInfo* SyncCycleCompletedEventInfo::default_instance_ = NULL;

SyncCycleCompletedEventInfo* SyncCycleCompletedEventInfo::New() const {
  return new SyncCycleCompletedEventInfo;
}

void SyncCycleCompletedEventInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_blocking_conflicts_ = 0;
    num_non_blocking_conflicts_ = 0;
    num_encryption_conflicts_ = 0;
    num_hierarchy_conflicts_ = 0;
    num_simple_conflicts_ = 0;
    num_server_conflicts_ = 0;
    num_updates_downloaded_ = 0;
    num_reflected_updates_downloaded_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_caller_info()) {
      if (caller_info_ != NULL) caller_info_->::sync_pb::GetUpdatesCallerInfo::Clear();
    }
  }
  source_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncCycleCompletedEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_blocking_conflicts = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_blocking_conflicts_)));
          set_has_num_blocking_conflicts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_non_blocking_conflicts;
        break;
      }

      // optional int32 num_non_blocking_conflicts = 3 [deprecated = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_non_blocking_conflicts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_non_blocking_conflicts_)));
          set_has_num_non_blocking_conflicts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_encryption_conflicts;
        break;
      }

      // optional int32 num_encryption_conflicts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_encryption_conflicts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_encryption_conflicts_)));
          set_has_num_encryption_conflicts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_hierarchy_conflicts;
        break;
      }

      // optional int32 num_hierarchy_conflicts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_hierarchy_conflicts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hierarchy_conflicts_)));
          set_has_num_hierarchy_conflicts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_simple_conflicts;
        break;
      }

      // optional int32 num_simple_conflicts = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_simple_conflicts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_simple_conflicts_)));
          set_has_num_simple_conflicts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_num_server_conflicts;
        break;
      }

      // optional int32 num_server_conflicts = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_server_conflicts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_server_conflicts_)));
          set_has_num_server_conflicts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_num_updates_downloaded;
        break;
      }

      // optional int32 num_updates_downloaded = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_updates_downloaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_updates_downloaded_)));
          set_has_num_updates_downloaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_num_reflected_updates_downloaded;
        break;
      }

      // optional int32 num_reflected_updates_downloaded = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_reflected_updates_downloaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_reflected_updates_downloaded_)));
          set_has_num_reflected_updates_downloaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_caller_info;
        break;
      }

      // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caller_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caller_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_source_info;
        break;
      }

      // repeated .sync_pb.SourceInfo source_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_source_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncCycleCompletedEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_blocking_conflicts = 2 [deprecated = true];
  if (has_num_blocking_conflicts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_blocking_conflicts(), output);
  }

  // optional int32 num_non_blocking_conflicts = 3 [deprecated = true];
  if (has_num_non_blocking_conflicts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_non_blocking_conflicts(), output);
  }

  // optional int32 num_encryption_conflicts = 4;
  if (has_num_encryption_conflicts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_encryption_conflicts(), output);
  }

  // optional int32 num_hierarchy_conflicts = 5;
  if (has_num_hierarchy_conflicts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_hierarchy_conflicts(), output);
  }

  // optional int32 num_simple_conflicts = 6;
  if (has_num_simple_conflicts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_simple_conflicts(), output);
  }

  // optional int32 num_server_conflicts = 7;
  if (has_num_server_conflicts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_server_conflicts(), output);
  }

  // optional int32 num_updates_downloaded = 8;
  if (has_num_updates_downloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_updates_downloaded(), output);
  }

  // optional int32 num_reflected_updates_downloaded = 9;
  if (has_num_reflected_updates_downloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_reflected_updates_downloaded(), output);
  }

  // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
  if (has_caller_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->caller_info(), output);
  }

  // repeated .sync_pb.SourceInfo source_info = 11;
  for (int i = 0; i < this->source_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->source_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncCycleCompletedEventInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_blocking_conflicts = 2 [deprecated = true];
    if (has_num_blocking_conflicts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_blocking_conflicts());
    }

    // optional int32 num_non_blocking_conflicts = 3 [deprecated = true];
    if (has_num_non_blocking_conflicts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_non_blocking_conflicts());
    }

    // optional int32 num_encryption_conflicts = 4;
    if (has_num_encryption_conflicts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_encryption_conflicts());
    }

    // optional int32 num_hierarchy_conflicts = 5;
    if (has_num_hierarchy_conflicts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_hierarchy_conflicts());
    }

    // optional int32 num_simple_conflicts = 6;
    if (has_num_simple_conflicts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_simple_conflicts());
    }

    // optional int32 num_server_conflicts = 7;
    if (has_num_server_conflicts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_server_conflicts());
    }

    // optional int32 num_updates_downloaded = 8;
    if (has_num_updates_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_updates_downloaded());
    }

    // optional int32 num_reflected_updates_downloaded = 9;
    if (has_num_reflected_updates_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_reflected_updates_downloaded());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .sync_pb.GetUpdatesCallerInfo caller_info = 10;
    if (has_caller_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caller_info());
    }

  }
  // repeated .sync_pb.SourceInfo source_info = 11;
  total_size += 1 * this->source_info_size();
  for (int i = 0; i < this->source_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->source_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncCycleCompletedEventInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncCycleCompletedEventInfo*>(&from));
}

void SyncCycleCompletedEventInfo::MergeFrom(const SyncCycleCompletedEventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  source_info_.MergeFrom(from.source_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_blocking_conflicts()) {
      set_num_blocking_conflicts(from.num_blocking_conflicts());
    }
    if (from.has_num_non_blocking_conflicts()) {
      set_num_non_blocking_conflicts(from.num_non_blocking_conflicts());
    }
    if (from.has_num_encryption_conflicts()) {
      set_num_encryption_conflicts(from.num_encryption_conflicts());
    }
    if (from.has_num_hierarchy_conflicts()) {
      set_num_hierarchy_conflicts(from.num_hierarchy_conflicts());
    }
    if (from.has_num_simple_conflicts()) {
      set_num_simple_conflicts(from.num_simple_conflicts());
    }
    if (from.has_num_server_conflicts()) {
      set_num_server_conflicts(from.num_server_conflicts());
    }
    if (from.has_num_updates_downloaded()) {
      set_num_updates_downloaded(from.num_updates_downloaded());
    }
    if (from.has_num_reflected_updates_downloaded()) {
      set_num_reflected_updates_downloaded(from.num_reflected_updates_downloaded());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_caller_info()) {
      mutable_caller_info()->::sync_pb::GetUpdatesCallerInfo::MergeFrom(from.caller_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncCycleCompletedEventInfo::CopyFrom(const SyncCycleCompletedEventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncCycleCompletedEventInfo::IsInitialized() const {

  if (has_caller_info()) {
    if (!this->caller_info().IsInitialized()) return false;
  }
  return true;
}

void SyncCycleCompletedEventInfo::Swap(SyncCycleCompletedEventInfo* other) {
  if (other != this) {
    std::swap(num_blocking_conflicts_, other->num_blocking_conflicts_);
    std::swap(num_non_blocking_conflicts_, other->num_non_blocking_conflicts_);
    std::swap(num_encryption_conflicts_, other->num_encryption_conflicts_);
    std::swap(num_hierarchy_conflicts_, other->num_hierarchy_conflicts_);
    std::swap(num_simple_conflicts_, other->num_simple_conflicts_);
    std::swap(num_server_conflicts_, other->num_server_conflicts_);
    std::swap(num_updates_downloaded_, other->num_updates_downloaded_);
    std::swap(num_reflected_updates_downloaded_, other->num_reflected_updates_downloaded_);
    std::swap(caller_info_, other->caller_info_);
    source_info_.Swap(&other->source_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncCycleCompletedEventInfo::GetTypeName() const {
  return "sync_pb.SyncCycleCompletedEventInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int DatatypeAssociationStats::kDataTypeIdFieldNumber;
const int DatatypeAssociationStats::kNumLocalItemsBeforeAssociationFieldNumber;
const int DatatypeAssociationStats::kNumSyncItemsBeforeAssociationFieldNumber;
const int DatatypeAssociationStats::kNumLocalItemsAfterAssociationFieldNumber;
const int DatatypeAssociationStats::kNumSyncItemsAfterAssociationFieldNumber;
const int DatatypeAssociationStats::kNumLocalItemsAddedFieldNumber;
const int DatatypeAssociationStats::kNumLocalItemsDeletedFieldNumber;
const int DatatypeAssociationStats::kNumLocalItemsModifiedFieldNumber;
const int DatatypeAssociationStats::kNumSyncItemsAddedFieldNumber;
const int DatatypeAssociationStats::kNumSyncItemsDeletedFieldNumber;
const int DatatypeAssociationStats::kNumSyncItemsModifiedFieldNumber;
const int DatatypeAssociationStats::kLocalVersionPreAssociationFieldNumber;
const int DatatypeAssociationStats::kSyncVersionPreAssociationFieldNumber;
const int DatatypeAssociationStats::kHadErrorFieldNumber;
const int DatatypeAssociationStats::kDownloadWaitTimeUsFieldNumber;
const int DatatypeAssociationStats::kDownloadTimeUsFieldNumber;
const int DatatypeAssociationStats::kAssociationWaitTimeForHighPriorityUsFieldNumber;
const int DatatypeAssociationStats::kAssociationWaitTimeForSamePriorityUsFieldNumber;
const int DatatypeAssociationStats::kAssociationTimeUsFieldNumber;
const int DatatypeAssociationStats::kHighPriorityTypeConfiguredBeforeFieldNumber;
const int DatatypeAssociationStats::kSamePriorityTypeConfiguredBeforeFieldNumber;
#endif  // !_MSC_VER

DatatypeAssociationStats::DatatypeAssociationStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DatatypeAssociationStats::InitAsDefaultInstance() {
}

DatatypeAssociationStats::DatatypeAssociationStats(const DatatypeAssociationStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DatatypeAssociationStats::SharedCtor() {
  _cached_size_ = 0;
  data_type_id_ = 0;
  num_local_items_before_association_ = 0;
  num_sync_items_before_association_ = 0;
  num_local_items_after_association_ = 0;
  num_sync_items_after_association_ = 0;
  num_local_items_added_ = 0;
  num_local_items_deleted_ = 0;
  num_local_items_modified_ = 0;
  num_sync_items_added_ = 0;
  num_sync_items_deleted_ = 0;
  num_sync_items_modified_ = 0;
  local_version_pre_association_ = GOOGLE_LONGLONG(0);
  sync_version_pre_association_ = GOOGLE_LONGLONG(0);
  had_error_ = false;
  download_wait_time_us_ = GOOGLE_LONGLONG(0);
  download_time_us_ = GOOGLE_LONGLONG(0);
  association_wait_time_for_high_priority_us_ = GOOGLE_LONGLONG(0);
  association_wait_time_for_same_priority_us_ = GOOGLE_LONGLONG(0);
  association_time_us_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatatypeAssociationStats::~DatatypeAssociationStats() {
  SharedDtor();
}

void DatatypeAssociationStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DatatypeAssociationStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DatatypeAssociationStats& DatatypeAssociationStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#endif
  return *default_instance_;
}

DatatypeAssociationStats* DatatypeAssociationStats::default_instance_ = NULL;

DatatypeAssociationStats* DatatypeAssociationStats::New() const {
  return new DatatypeAssociationStats;
}

void DatatypeAssociationStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_type_id_ = 0;
    num_local_items_before_association_ = 0;
    num_sync_items_before_association_ = 0;
    num_local_items_after_association_ = 0;
    num_sync_items_after_association_ = 0;
    num_local_items_added_ = 0;
    num_local_items_deleted_ = 0;
    num_local_items_modified_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    num_sync_items_added_ = 0;
    num_sync_items_deleted_ = 0;
    num_sync_items_modified_ = 0;
    local_version_pre_association_ = GOOGLE_LONGLONG(0);
    sync_version_pre_association_ = GOOGLE_LONGLONG(0);
    had_error_ = false;
    download_wait_time_us_ = GOOGLE_LONGLONG(0);
    download_time_us_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    association_wait_time_for_high_priority_us_ = GOOGLE_LONGLONG(0);
    association_wait_time_for_same_priority_us_ = GOOGLE_LONGLONG(0);
    association_time_us_ = GOOGLE_LONGLONG(0);
  }
  high_priority_type_configured_before_.Clear();
  same_priority_type_configured_before_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatatypeAssociationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_id_)));
          set_has_data_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_local_items_before_association;
        break;
      }

      // optional int32 num_local_items_before_association = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_local_items_before_association:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_items_before_association_)));
          set_has_num_local_items_before_association();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_sync_items_before_association;
        break;
      }

      // optional int32 num_sync_items_before_association = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_sync_items_before_association:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sync_items_before_association_)));
          set_has_num_sync_items_before_association();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_local_items_after_association;
        break;
      }

      // optional int32 num_local_items_after_association = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_local_items_after_association:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_items_after_association_)));
          set_has_num_local_items_after_association();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_sync_items_after_association;
        break;
      }

      // optional int32 num_sync_items_after_association = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_sync_items_after_association:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sync_items_after_association_)));
          set_has_num_sync_items_after_association();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_local_items_added;
        break;
      }

      // optional int32 num_local_items_added = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_local_items_added:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_items_added_)));
          set_has_num_local_items_added();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_num_local_items_deleted;
        break;
      }

      // optional int32 num_local_items_deleted = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_local_items_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_items_deleted_)));
          set_has_num_local_items_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_num_local_items_modified;
        break;
      }

      // optional int32 num_local_items_modified = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_local_items_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_items_modified_)));
          set_has_num_local_items_modified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_num_sync_items_added;
        break;
      }

      // optional int32 num_sync_items_added = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_sync_items_added:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sync_items_added_)));
          set_has_num_sync_items_added();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_num_sync_items_deleted;
        break;
      }

      // optional int32 num_sync_items_deleted = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_sync_items_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sync_items_deleted_)));
          set_has_num_sync_items_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_num_sync_items_modified;
        break;
      }

      // optional int32 num_sync_items_modified = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_sync_items_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sync_items_modified_)));
          set_has_num_sync_items_modified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_had_error;
        break;
      }

      // optional bool had_error = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_had_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &had_error_)));
          set_has_had_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_download_time_us;
        break;
      }

      // optional int64 download_time_us = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &download_time_us_)));
          set_has_download_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_association_wait_time_for_same_priority_us;
        break;
      }

      // optional int64 association_wait_time_for_same_priority_us = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_association_wait_time_for_same_priority_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &association_wait_time_for_same_priority_us_)));
          set_has_association_wait_time_for_same_priority_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_download_wait_time_us;
        break;
      }

      // optional int64 download_wait_time_us = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_wait_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &download_wait_time_us_)));
          set_has_download_wait_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_association_wait_time_for_high_priority_us;
        break;
      }

      // optional int64 association_wait_time_for_high_priority_us = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_association_wait_time_for_high_priority_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &association_wait_time_for_high_priority_us_)));
          set_has_association_wait_time_for_high_priority_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_association_time_us;
        break;
      }

      // optional int64 association_time_us = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_association_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &association_time_us_)));
          set_has_association_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_high_priority_type_configured_before;
        break;
      }

      // repeated int32 high_priority_type_configured_before = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_priority_type_configured_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_high_priority_type_configured_before())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_high_priority_type_configured_before())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_high_priority_type_configured_before;
        if (input->ExpectTag(152)) goto parse_same_priority_type_configured_before;
        break;
      }

      // repeated int32 same_priority_type_configured_before = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_same_priority_type_configured_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_same_priority_type_configured_before())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_same_priority_type_configured_before())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_same_priority_type_configured_before;
        if (input->ExpectTag(160)) goto parse_local_version_pre_association;
        break;
      }

      // optional int64 local_version_pre_association = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_version_pre_association:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_version_pre_association_)));
          set_has_local_version_pre_association();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_sync_version_pre_association;
        break;
      }

      // optional int64 sync_version_pre_association = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_version_pre_association:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sync_version_pre_association_)));
          set_has_sync_version_pre_association();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatatypeAssociationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data_type_id = 1;
  if (has_data_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_type_id(), output);
  }

  // optional int32 num_local_items_before_association = 2;
  if (has_num_local_items_before_association()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_local_items_before_association(), output);
  }

  // optional int32 num_sync_items_before_association = 3;
  if (has_num_sync_items_before_association()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_sync_items_before_association(), output);
  }

  // optional int32 num_local_items_after_association = 4;
  if (has_num_local_items_after_association()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_local_items_after_association(), output);
  }

  // optional int32 num_sync_items_after_association = 5;
  if (has_num_sync_items_after_association()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_sync_items_after_association(), output);
  }

  // optional int32 num_local_items_added = 6;
  if (has_num_local_items_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_local_items_added(), output);
  }

  // optional int32 num_local_items_deleted = 7;
  if (has_num_local_items_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_local_items_deleted(), output);
  }

  // optional int32 num_local_items_modified = 8;
  if (has_num_local_items_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_local_items_modified(), output);
  }

  // optional int32 num_sync_items_added = 9;
  if (has_num_sync_items_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_sync_items_added(), output);
  }

  // optional int32 num_sync_items_deleted = 10;
  if (has_num_sync_items_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num_sync_items_deleted(), output);
  }

  // optional int32 num_sync_items_modified = 11;
  if (has_num_sync_items_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->num_sync_items_modified(), output);
  }

  // optional bool had_error = 12;
  if (has_had_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->had_error(), output);
  }

  // optional int64 download_time_us = 13;
  if (has_download_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->download_time_us(), output);
  }

  // optional int64 association_wait_time_for_same_priority_us = 14;
  if (has_association_wait_time_for_same_priority_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->association_wait_time_for_same_priority_us(), output);
  }

  // optional int64 download_wait_time_us = 15;
  if (has_download_wait_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->download_wait_time_us(), output);
  }

  // optional int64 association_wait_time_for_high_priority_us = 16;
  if (has_association_wait_time_for_high_priority_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->association_wait_time_for_high_priority_us(), output);
  }

  // optional int64 association_time_us = 17;
  if (has_association_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->association_time_us(), output);
  }

  // repeated int32 high_priority_type_configured_before = 18;
  for (int i = 0; i < this->high_priority_type_configured_before_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->high_priority_type_configured_before(i), output);
  }

  // repeated int32 same_priority_type_configured_before = 19;
  for (int i = 0; i < this->same_priority_type_configured_before_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->same_priority_type_configured_before(i), output);
  }

  // optional int64 local_version_pre_association = 20;
  if (has_local_version_pre_association()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->local_version_pre_association(), output);
  }

  // optional int64 sync_version_pre_association = 21;
  if (has_sync_version_pre_association()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->sync_version_pre_association(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int DatatypeAssociationStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data_type_id = 1;
    if (has_data_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type_id());
    }

    // optional int32 num_local_items_before_association = 2;
    if (has_num_local_items_before_association()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_local_items_before_association());
    }

    // optional int32 num_sync_items_before_association = 3;
    if (has_num_sync_items_before_association()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sync_items_before_association());
    }

    // optional int32 num_local_items_after_association = 4;
    if (has_num_local_items_after_association()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_local_items_after_association());
    }

    // optional int32 num_sync_items_after_association = 5;
    if (has_num_sync_items_after_association()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sync_items_after_association());
    }

    // optional int32 num_local_items_added = 6;
    if (has_num_local_items_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_local_items_added());
    }

    // optional int32 num_local_items_deleted = 7;
    if (has_num_local_items_deleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_local_items_deleted());
    }

    // optional int32 num_local_items_modified = 8;
    if (has_num_local_items_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_local_items_modified());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 num_sync_items_added = 9;
    if (has_num_sync_items_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sync_items_added());
    }

    // optional int32 num_sync_items_deleted = 10;
    if (has_num_sync_items_deleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sync_items_deleted());
    }

    // optional int32 num_sync_items_modified = 11;
    if (has_num_sync_items_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sync_items_modified());
    }

    // optional int64 local_version_pre_association = 20;
    if (has_local_version_pre_association()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->local_version_pre_association());
    }

    // optional int64 sync_version_pre_association = 21;
    if (has_sync_version_pre_association()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sync_version_pre_association());
    }

    // optional bool had_error = 12;
    if (has_had_error()) {
      total_size += 1 + 1;
    }

    // optional int64 download_wait_time_us = 15;
    if (has_download_wait_time_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->download_wait_time_us());
    }

    // optional int64 download_time_us = 13;
    if (has_download_time_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->download_time_us());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 association_wait_time_for_high_priority_us = 16;
    if (has_association_wait_time_for_high_priority_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->association_wait_time_for_high_priority_us());
    }

    // optional int64 association_wait_time_for_same_priority_us = 14;
    if (has_association_wait_time_for_same_priority_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->association_wait_time_for_same_priority_us());
    }

    // optional int64 association_time_us = 17;
    if (has_association_time_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->association_time_us());
    }

  }
  // repeated int32 high_priority_type_configured_before = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->high_priority_type_configured_before_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->high_priority_type_configured_before(i));
    }
    total_size += 2 * this->high_priority_type_configured_before_size() + data_size;
  }

  // repeated int32 same_priority_type_configured_before = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->same_priority_type_configured_before_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->same_priority_type_configured_before(i));
    }
    total_size += 2 * this->same_priority_type_configured_before_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatatypeAssociationStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DatatypeAssociationStats*>(&from));
}

void DatatypeAssociationStats::MergeFrom(const DatatypeAssociationStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  high_priority_type_configured_before_.MergeFrom(from.high_priority_type_configured_before_);
  same_priority_type_configured_before_.MergeFrom(from.same_priority_type_configured_before_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_type_id()) {
      set_data_type_id(from.data_type_id());
    }
    if (from.has_num_local_items_before_association()) {
      set_num_local_items_before_association(from.num_local_items_before_association());
    }
    if (from.has_num_sync_items_before_association()) {
      set_num_sync_items_before_association(from.num_sync_items_before_association());
    }
    if (from.has_num_local_items_after_association()) {
      set_num_local_items_after_association(from.num_local_items_after_association());
    }
    if (from.has_num_sync_items_after_association()) {
      set_num_sync_items_after_association(from.num_sync_items_after_association());
    }
    if (from.has_num_local_items_added()) {
      set_num_local_items_added(from.num_local_items_added());
    }
    if (from.has_num_local_items_deleted()) {
      set_num_local_items_deleted(from.num_local_items_deleted());
    }
    if (from.has_num_local_items_modified()) {
      set_num_local_items_modified(from.num_local_items_modified());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_sync_items_added()) {
      set_num_sync_items_added(from.num_sync_items_added());
    }
    if (from.has_num_sync_items_deleted()) {
      set_num_sync_items_deleted(from.num_sync_items_deleted());
    }
    if (from.has_num_sync_items_modified()) {
      set_num_sync_items_modified(from.num_sync_items_modified());
    }
    if (from.has_local_version_pre_association()) {
      set_local_version_pre_association(from.local_version_pre_association());
    }
    if (from.has_sync_version_pre_association()) {
      set_sync_version_pre_association(from.sync_version_pre_association());
    }
    if (from.has_had_error()) {
      set_had_error(from.had_error());
    }
    if (from.has_download_wait_time_us()) {
      set_download_wait_time_us(from.download_wait_time_us());
    }
    if (from.has_download_time_us()) {
      set_download_time_us(from.download_time_us());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_association_wait_time_for_high_priority_us()) {
      set_association_wait_time_for_high_priority_us(from.association_wait_time_for_high_priority_us());
    }
    if (from.has_association_wait_time_for_same_priority_us()) {
      set_association_wait_time_for_same_priority_us(from.association_wait_time_for_same_priority_us());
    }
    if (from.has_association_time_us()) {
      set_association_time_us(from.association_time_us());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatatypeAssociationStats::CopyFrom(const DatatypeAssociationStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatatypeAssociationStats::IsInitialized() const {

  return true;
}

void DatatypeAssociationStats::Swap(DatatypeAssociationStats* other) {
  if (other != this) {
    std::swap(data_type_id_, other->data_type_id_);
    std::swap(num_local_items_before_association_, other->num_local_items_before_association_);
    std::swap(num_sync_items_before_association_, other->num_sync_items_before_association_);
    std::swap(num_local_items_after_association_, other->num_local_items_after_association_);
    std::swap(num_sync_items_after_association_, other->num_sync_items_after_association_);
    std::swap(num_local_items_added_, other->num_local_items_added_);
    std::swap(num_local_items_deleted_, other->num_local_items_deleted_);
    std::swap(num_local_items_modified_, other->num_local_items_modified_);
    std::swap(num_sync_items_added_, other->num_sync_items_added_);
    std::swap(num_sync_items_deleted_, other->num_sync_items_deleted_);
    std::swap(num_sync_items_modified_, other->num_sync_items_modified_);
    std::swap(local_version_pre_association_, other->local_version_pre_association_);
    std::swap(sync_version_pre_association_, other->sync_version_pre_association_);
    std::swap(had_error_, other->had_error_);
    std::swap(download_wait_time_us_, other->download_wait_time_us_);
    std::swap(download_time_us_, other->download_time_us_);
    std::swap(association_wait_time_for_high_priority_us_, other->association_wait_time_for_high_priority_us_);
    std::swap(association_wait_time_for_same_priority_us_, other->association_wait_time_for_same_priority_us_);
    std::swap(association_time_us_, other->association_time_us_);
    high_priority_type_configured_before_.Swap(&other->high_priority_type_configured_before_);
    same_priority_type_configured_before_.Swap(&other->same_priority_type_configured_before_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DatatypeAssociationStats::GetTypeName() const {
  return "sync_pb.DatatypeAssociationStats";
}


// ===================================================================

#ifndef _MSC_VER
const int DebugEventInfo::kSingletonEventFieldNumber;
const int DebugEventInfo::kSyncCycleCompletedEventInfoFieldNumber;
const int DebugEventInfo::kNudgingDatatypeFieldNumber;
const int DebugEventInfo::kDatatypesNotifiedFromServerFieldNumber;
const int DebugEventInfo::kDatatypeAssociationStatsFieldNumber;
#endif  // !_MSC_VER

DebugEventInfo::DebugEventInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DebugEventInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sync_cycle_completed_event_info_ = const_cast< ::sync_pb::SyncCycleCompletedEventInfo*>(
      ::sync_pb::SyncCycleCompletedEventInfo::internal_default_instance());
#else
  sync_cycle_completed_event_info_ = const_cast< ::sync_pb::SyncCycleCompletedEventInfo*>(&::sync_pb::SyncCycleCompletedEventInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  datatype_association_stats_ = const_cast< ::sync_pb::DatatypeAssociationStats*>(
      ::sync_pb::DatatypeAssociationStats::internal_default_instance());
#else
  datatype_association_stats_ = const_cast< ::sync_pb::DatatypeAssociationStats*>(&::sync_pb::DatatypeAssociationStats::default_instance());
#endif
}

DebugEventInfo::DebugEventInfo(const DebugEventInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DebugEventInfo::SharedCtor() {
  _cached_size_ = 0;
  singleton_event_ = 1;
  sync_cycle_completed_event_info_ = NULL;
  nudging_datatype_ = 0;
  datatype_association_stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugEventInfo::~DebugEventInfo() {
  SharedDtor();
}

void DebugEventInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sync_cycle_completed_event_info_;
    delete datatype_association_stats_;
  }
}

void DebugEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DebugEventInfo& DebugEventInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#endif
  return *default_instance_;
}

DebugEventInfo* DebugEventInfo::default_instance_ = NULL;

DebugEventInfo* DebugEventInfo::New() const {
  return new DebugEventInfo;
}

void DebugEventInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    singleton_event_ = 1;
    if (has_sync_cycle_completed_event_info()) {
      if (sync_cycle_completed_event_info_ != NULL) sync_cycle_completed_event_info_->::sync_pb::SyncCycleCompletedEventInfo::Clear();
    }
    nudging_datatype_ = 0;
    if (has_datatype_association_stats()) {
      if (datatype_association_stats_ != NULL) datatype_association_stats_->::sync_pb::DatatypeAssociationStats::Clear();
    }
  }
  datatypes_notified_from_server_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_SingletonDebugEventType_IsValid(value)) {
            set_singleton_event(static_cast< ::sync_pb::SyncEnums_SingletonDebugEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sync_cycle_completed_event_info;
        break;
      }

      // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_cycle_completed_event_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_cycle_completed_event_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nudging_datatype;
        break;
      }

      // optional int32 nudging_datatype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nudging_datatype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nudging_datatype_)));
          set_has_nudging_datatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_datatypes_notified_from_server;
        break;
      }

      // repeated int32 datatypes_notified_from_server = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datatypes_notified_from_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_datatypes_notified_from_server())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_datatypes_notified_from_server())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_datatypes_notified_from_server;
        if (input->ExpectTag(42)) goto parse_datatype_association_stats;
        break;
      }

      // optional .sync_pb.DatatypeAssociationStats datatype_association_stats = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datatype_association_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datatype_association_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
  if (has_singleton_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->singleton_event(), output);
  }

  // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
  if (has_sync_cycle_completed_event_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->sync_cycle_completed_event_info(), output);
  }

  // optional int32 nudging_datatype = 3;
  if (has_nudging_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nudging_datatype(), output);
  }

  // repeated int32 datatypes_notified_from_server = 4;
  for (int i = 0; i < this->datatypes_notified_from_server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->datatypes_notified_from_server(i), output);
  }

  // optional .sync_pb.DatatypeAssociationStats datatype_association_stats = 5;
  if (has_datatype_association_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->datatype_association_stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int DebugEventInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.SyncEnums.SingletonDebugEventType singleton_event = 1;
    if (has_singleton_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->singleton_event());
    }

    // optional .sync_pb.SyncCycleCompletedEventInfo sync_cycle_completed_event_info = 2;
    if (has_sync_cycle_completed_event_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_cycle_completed_event_info());
    }

    // optional int32 nudging_datatype = 3;
    if (has_nudging_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nudging_datatype());
    }

    // optional .sync_pb.DatatypeAssociationStats datatype_association_stats = 5;
    if (has_datatype_association_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datatype_association_stats());
    }

  }
  // repeated int32 datatypes_notified_from_server = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->datatypes_notified_from_server_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->datatypes_notified_from_server(i));
    }
    total_size += 1 * this->datatypes_notified_from_server_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugEventInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DebugEventInfo*>(&from));
}

void DebugEventInfo::MergeFrom(const DebugEventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  datatypes_notified_from_server_.MergeFrom(from.datatypes_notified_from_server_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_singleton_event()) {
      set_singleton_event(from.singleton_event());
    }
    if (from.has_sync_cycle_completed_event_info()) {
      mutable_sync_cycle_completed_event_info()->::sync_pb::SyncCycleCompletedEventInfo::MergeFrom(from.sync_cycle_completed_event_info());
    }
    if (from.has_nudging_datatype()) {
      set_nudging_datatype(from.nudging_datatype());
    }
    if (from.has_datatype_association_stats()) {
      mutable_datatype_association_stats()->::sync_pb::DatatypeAssociationStats::MergeFrom(from.datatype_association_stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugEventInfo::CopyFrom(const DebugEventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugEventInfo::IsInitialized() const {

  if (has_sync_cycle_completed_event_info()) {
    if (!this->sync_cycle_completed_event_info().IsInitialized()) return false;
  }
  return true;
}

void DebugEventInfo::Swap(DebugEventInfo* other) {
  if (other != this) {
    std::swap(singleton_event_, other->singleton_event_);
    std::swap(sync_cycle_completed_event_info_, other->sync_cycle_completed_event_info_);
    std::swap(nudging_datatype_, other->nudging_datatype_);
    datatypes_notified_from_server_.Swap(&other->datatypes_notified_from_server_);
    std::swap(datatype_association_stats_, other->datatype_association_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DebugEventInfo::GetTypeName() const {
  return "sync_pb.DebugEventInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int DebugInfo::kEventsFieldNumber;
const int DebugInfo::kCryptographerReadyFieldNumber;
const int DebugInfo::kCryptographerHasPendingKeysFieldNumber;
const int DebugInfo::kEventsDroppedFieldNumber;
#endif  // !_MSC_VER

DebugInfo::DebugInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DebugInfo::InitAsDefaultInstance() {
}

DebugInfo::DebugInfo(const DebugInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DebugInfo::SharedCtor() {
  _cached_size_ = 0;
  cryptographer_ready_ = false;
  cryptographer_has_pending_keys_ = false;
  events_dropped_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugInfo::~DebugInfo() {
  SharedDtor();
}

void DebugInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DebugInfo& DebugInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
#endif
  return *default_instance_;
}

DebugInfo* DebugInfo::default_instance_ = NULL;

DebugInfo* DebugInfo::New() const {
  return new DebugInfo;
}

void DebugInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cryptographer_ready_ = false;
    cryptographer_has_pending_keys_ = false;
    events_dropped_ = false;
  }
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.DebugEventInfo events = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_events;
        if (input->ExpectTag(16)) goto parse_cryptographer_ready;
        break;
      }

      // optional bool cryptographer_ready = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cryptographer_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cryptographer_ready_)));
          set_has_cryptographer_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cryptographer_has_pending_keys;
        break;
      }

      // optional bool cryptographer_has_pending_keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cryptographer_has_pending_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cryptographer_has_pending_keys_)));
          set_has_cryptographer_has_pending_keys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_events_dropped;
        break;
      }

      // optional bool events_dropped = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_events_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &events_dropped_)));
          set_has_events_dropped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sync_pb.DebugEventInfo events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->events(i), output);
  }

  // optional bool cryptographer_ready = 2;
  if (has_cryptographer_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cryptographer_ready(), output);
  }

  // optional bool cryptographer_has_pending_keys = 3;
  if (has_cryptographer_has_pending_keys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->cryptographer_has_pending_keys(), output);
  }

  // optional bool events_dropped = 4;
  if (has_events_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->events_dropped(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int DebugInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool cryptographer_ready = 2;
    if (has_cryptographer_ready()) {
      total_size += 1 + 1;
    }

    // optional bool cryptographer_has_pending_keys = 3;
    if (has_cryptographer_has_pending_keys()) {
      total_size += 1 + 1;
    }

    // optional bool events_dropped = 4;
    if (has_events_dropped()) {
      total_size += 1 + 1;
    }

  }
  // repeated .sync_pb.DebugEventInfo events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DebugInfo*>(&from));
}

void DebugInfo::MergeFrom(const DebugInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cryptographer_ready()) {
      set_cryptographer_ready(from.cryptographer_ready());
    }
    if (from.has_cryptographer_has_pending_keys()) {
      set_cryptographer_has_pending_keys(from.cryptographer_has_pending_keys());
    }
    if (from.has_events_dropped()) {
      set_events_dropped(from.events_dropped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugInfo::CopyFrom(const DebugInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfo::IsInitialized() const {

  for (int i = 0; i < events_size(); i++) {
    if (!this->events(i).IsInitialized()) return false;
  }
  return true;
}

void DebugInfo::Swap(DebugInfo* other) {
  if (other != this) {
    events_.Swap(&other->events_);
    std::swap(cryptographer_ready_, other->cryptographer_ready_);
    std::swap(cryptographer_has_pending_keys_, other->cryptographer_has_pending_keys_);
    std::swap(events_dropped_, other->events_dropped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DebugInfo::GetTypeName() const {
  return "sync_pb.DebugInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
