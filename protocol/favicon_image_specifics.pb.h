// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: favicon_image_specifics.proto

#ifndef PROTOBUF_favicon_5fimage_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_favicon_5fimage_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/base/sync_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_EXPORT protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
void protobuf_AssignDesc_favicon_5fimage_5fspecifics_2eproto();
void protobuf_ShutdownFile_favicon_5fimage_5fspecifics_2eproto();

class FaviconData;
class FaviconImageSpecifics;

// ===================================================================

class SYNC_EXPORT FaviconData : public ::google::protobuf::MessageLite {
 public:
  FaviconData();
  virtual ~FaviconData();

  FaviconData(const FaviconData& from);

  inline FaviconData& operator=(const FaviconData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FaviconData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FaviconData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FaviconData* other);

  // implements Message ----------------------------------------------

  FaviconData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FaviconData& from);
  void MergeFrom(const FaviconData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes favicon = 1;
  inline bool has_favicon() const;
  inline void clear_favicon();
  static const int kFaviconFieldNumber = 1;
  inline const ::std::string& favicon() const;
  inline void set_favicon(const ::std::string& value);
  inline void set_favicon(const char* value);
  inline void set_favicon(const void* value, size_t size);
  inline ::std::string* mutable_favicon();
  inline ::std::string* release_favicon();
  inline void set_allocated_favicon(::std::string* favicon);

  // optional int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.FaviconData)
 private:
  inline void set_has_favicon();
  inline void clear_has_favicon();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* favicon_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_favicon_5fimage_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_favicon_5fimage_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static FaviconData* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_EXPORT FaviconImageSpecifics : public ::google::protobuf::MessageLite {
 public:
  FaviconImageSpecifics();
  virtual ~FaviconImageSpecifics();

  FaviconImageSpecifics(const FaviconImageSpecifics& from);

  inline FaviconImageSpecifics& operator=(const FaviconImageSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const FaviconImageSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FaviconImageSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FaviconImageSpecifics* other);

  // implements Message ----------------------------------------------

  FaviconImageSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FaviconImageSpecifics& from);
  void MergeFrom(const FaviconImageSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string favicon_url = 1;
  inline bool has_favicon_url() const;
  inline void clear_favicon_url();
  static const int kFaviconUrlFieldNumber = 1;
  inline const ::std::string& favicon_url() const;
  inline void set_favicon_url(const ::std::string& value);
  inline void set_favicon_url(const char* value);
  inline void set_favicon_url(const char* value, size_t size);
  inline ::std::string* mutable_favicon_url();
  inline ::std::string* release_favicon_url();
  inline void set_allocated_favicon_url(::std::string* favicon_url);

  // optional .sync_pb.FaviconData favicon_web = 2;
  inline bool has_favicon_web() const;
  inline void clear_favicon_web();
  static const int kFaviconWebFieldNumber = 2;
  inline const ::sync_pb::FaviconData& favicon_web() const;
  inline ::sync_pb::FaviconData* mutable_favicon_web();
  inline ::sync_pb::FaviconData* release_favicon_web();
  inline void set_allocated_favicon_web(::sync_pb::FaviconData* favicon_web);

  // optional .sync_pb.FaviconData favicon_web_32 = 3;
  inline bool has_favicon_web_32() const;
  inline void clear_favicon_web_32();
  static const int kFaviconWeb32FieldNumber = 3;
  inline const ::sync_pb::FaviconData& favicon_web_32() const;
  inline ::sync_pb::FaviconData* mutable_favicon_web_32();
  inline ::sync_pb::FaviconData* release_favicon_web_32();
  inline void set_allocated_favicon_web_32(::sync_pb::FaviconData* favicon_web_32);

  // optional .sync_pb.FaviconData favicon_touch_64 = 4;
  inline bool has_favicon_touch_64() const;
  inline void clear_favicon_touch_64();
  static const int kFaviconTouch64FieldNumber = 4;
  inline const ::sync_pb::FaviconData& favicon_touch_64() const;
  inline ::sync_pb::FaviconData* mutable_favicon_touch_64();
  inline ::sync_pb::FaviconData* release_favicon_touch_64();
  inline void set_allocated_favicon_touch_64(::sync_pb::FaviconData* favicon_touch_64);

  // optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
  inline bool has_favicon_touch_precomposed_64() const;
  inline void clear_favicon_touch_precomposed_64();
  static const int kFaviconTouchPrecomposed64FieldNumber = 5;
  inline const ::sync_pb::FaviconData& favicon_touch_precomposed_64() const;
  inline ::sync_pb::FaviconData* mutable_favicon_touch_precomposed_64();
  inline ::sync_pb::FaviconData* release_favicon_touch_precomposed_64();
  inline void set_allocated_favicon_touch_precomposed_64(::sync_pb::FaviconData* favicon_touch_precomposed_64);

  // @@protoc_insertion_point(class_scope:sync_pb.FaviconImageSpecifics)
 private:
  inline void set_has_favicon_url();
  inline void clear_has_favicon_url();
  inline void set_has_favicon_web();
  inline void clear_has_favicon_web();
  inline void set_has_favicon_web_32();
  inline void clear_has_favicon_web_32();
  inline void set_has_favicon_touch_64();
  inline void clear_has_favicon_touch_64();
  inline void set_has_favicon_touch_precomposed_64();
  inline void clear_has_favicon_touch_precomposed_64();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* favicon_url_;
  ::sync_pb::FaviconData* favicon_web_;
  ::sync_pb::FaviconData* favicon_web_32_;
  ::sync_pb::FaviconData* favicon_touch_64_;
  ::sync_pb::FaviconData* favicon_touch_precomposed_64_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_favicon_5fimage_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_favicon_5fimage_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static FaviconImageSpecifics* default_instance_;
};
// ===================================================================


// ===================================================================

// FaviconData

// optional bytes favicon = 1;
inline bool FaviconData::has_favicon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaviconData::set_has_favicon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaviconData::clear_has_favicon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaviconData::clear_favicon() {
  if (favicon_ != &::google::protobuf::internal::GetEmptyString()) {
    favicon_->clear();
  }
  clear_has_favicon();
}
inline const ::std::string& FaviconData::favicon() const {
  return *favicon_;
}
inline void FaviconData::set_favicon(const ::std::string& value) {
  set_has_favicon();
  if (favicon_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_ = new ::std::string;
  }
  favicon_->assign(value);
}
inline void FaviconData::set_favicon(const char* value) {
  set_has_favicon();
  if (favicon_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_ = new ::std::string;
  }
  favicon_->assign(value);
}
inline void FaviconData::set_favicon(const void* value, size_t size) {
  set_has_favicon();
  if (favicon_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_ = new ::std::string;
  }
  favicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FaviconData::mutable_favicon() {
  set_has_favicon();
  if (favicon_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_ = new ::std::string;
  }
  return favicon_;
}
inline ::std::string* FaviconData::release_favicon() {
  clear_has_favicon();
  if (favicon_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = favicon_;
    favicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void FaviconData::set_allocated_favicon(::std::string* favicon) {
  if (favicon_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_;
  }
  if (favicon) {
    set_has_favicon();
    favicon_ = favicon;
  } else {
    clear_has_favicon();
    favicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 width = 2;
inline bool FaviconData::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaviconData::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FaviconData::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FaviconData::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 FaviconData::width() const {
  return width_;
}
inline void FaviconData::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 3;
inline bool FaviconData::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaviconData::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FaviconData::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FaviconData::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 FaviconData::height() const {
  return height_;
}
inline void FaviconData::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// FaviconImageSpecifics

// optional string favicon_url = 1;
inline bool FaviconImageSpecifics::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaviconImageSpecifics::set_has_favicon_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaviconImageSpecifics::clear_has_favicon_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaviconImageSpecifics::clear_favicon_url() {
  if (favicon_url_ != &::google::protobuf::internal::GetEmptyString()) {
    favicon_url_->clear();
  }
  clear_has_favicon_url();
}
inline const ::std::string& FaviconImageSpecifics::favicon_url() const {
  return *favicon_url_;
}
inline void FaviconImageSpecifics::set_favicon_url(const ::std::string& value) {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_url_ = new ::std::string;
  }
  favicon_url_->assign(value);
}
inline void FaviconImageSpecifics::set_favicon_url(const char* value) {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_url_ = new ::std::string;
  }
  favicon_url_->assign(value);
}
inline void FaviconImageSpecifics::set_favicon_url(const char* value, size_t size) {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_url_ = new ::std::string;
  }
  favicon_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FaviconImageSpecifics::mutable_favicon_url() {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_url_ = new ::std::string;
  }
  return favicon_url_;
}
inline ::std::string* FaviconImageSpecifics::release_favicon_url() {
  clear_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = favicon_url_;
    favicon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void FaviconImageSpecifics::set_allocated_favicon_url(::std::string* favicon_url) {
  if (favicon_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_url_;
  }
  if (favicon_url) {
    set_has_favicon_url();
    favicon_url_ = favicon_url;
  } else {
    clear_has_favicon_url();
    favicon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .sync_pb.FaviconData favicon_web = 2;
inline bool FaviconImageSpecifics::has_favicon_web() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaviconImageSpecifics::set_has_favicon_web() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FaviconImageSpecifics::clear_has_favicon_web() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FaviconImageSpecifics::clear_favicon_web() {
  if (favicon_web_ != NULL) favicon_web_->::sync_pb::FaviconData::Clear();
  clear_has_favicon_web();
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_web() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return favicon_web_ != NULL ? *favicon_web_ : *default_instance().favicon_web_;
#else
  return favicon_web_ != NULL ? *favicon_web_ : *default_instance_->favicon_web_;
#endif
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_web() {
  set_has_favicon_web();
  if (favicon_web_ == NULL) favicon_web_ = new ::sync_pb::FaviconData;
  return favicon_web_;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_web() {
  clear_has_favicon_web();
  ::sync_pb::FaviconData* temp = favicon_web_;
  favicon_web_ = NULL;
  return temp;
}
inline void FaviconImageSpecifics::set_allocated_favicon_web(::sync_pb::FaviconData* favicon_web) {
  delete favicon_web_;
  favicon_web_ = favicon_web;
  if (favicon_web) {
    set_has_favicon_web();
  } else {
    clear_has_favicon_web();
  }
}

// optional .sync_pb.FaviconData favicon_web_32 = 3;
inline bool FaviconImageSpecifics::has_favicon_web_32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaviconImageSpecifics::set_has_favicon_web_32() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FaviconImageSpecifics::clear_has_favicon_web_32() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FaviconImageSpecifics::clear_favicon_web_32() {
  if (favicon_web_32_ != NULL) favicon_web_32_->::sync_pb::FaviconData::Clear();
  clear_has_favicon_web_32();
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_web_32() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return favicon_web_32_ != NULL ? *favicon_web_32_ : *default_instance().favicon_web_32_;
#else
  return favicon_web_32_ != NULL ? *favicon_web_32_ : *default_instance_->favicon_web_32_;
#endif
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_web_32() {
  set_has_favicon_web_32();
  if (favicon_web_32_ == NULL) favicon_web_32_ = new ::sync_pb::FaviconData;
  return favicon_web_32_;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_web_32() {
  clear_has_favicon_web_32();
  ::sync_pb::FaviconData* temp = favicon_web_32_;
  favicon_web_32_ = NULL;
  return temp;
}
inline void FaviconImageSpecifics::set_allocated_favicon_web_32(::sync_pb::FaviconData* favicon_web_32) {
  delete favicon_web_32_;
  favicon_web_32_ = favicon_web_32;
  if (favicon_web_32) {
    set_has_favicon_web_32();
  } else {
    clear_has_favicon_web_32();
  }
}

// optional .sync_pb.FaviconData favicon_touch_64 = 4;
inline bool FaviconImageSpecifics::has_favicon_touch_64() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaviconImageSpecifics::set_has_favicon_touch_64() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FaviconImageSpecifics::clear_has_favicon_touch_64() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FaviconImageSpecifics::clear_favicon_touch_64() {
  if (favicon_touch_64_ != NULL) favicon_touch_64_->::sync_pb::FaviconData::Clear();
  clear_has_favicon_touch_64();
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_touch_64() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return favicon_touch_64_ != NULL ? *favicon_touch_64_ : *default_instance().favicon_touch_64_;
#else
  return favicon_touch_64_ != NULL ? *favicon_touch_64_ : *default_instance_->favicon_touch_64_;
#endif
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_touch_64() {
  set_has_favicon_touch_64();
  if (favicon_touch_64_ == NULL) favicon_touch_64_ = new ::sync_pb::FaviconData;
  return favicon_touch_64_;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_touch_64() {
  clear_has_favicon_touch_64();
  ::sync_pb::FaviconData* temp = favicon_touch_64_;
  favicon_touch_64_ = NULL;
  return temp;
}
inline void FaviconImageSpecifics::set_allocated_favicon_touch_64(::sync_pb::FaviconData* favicon_touch_64) {
  delete favicon_touch_64_;
  favicon_touch_64_ = favicon_touch_64;
  if (favicon_touch_64) {
    set_has_favicon_touch_64();
  } else {
    clear_has_favicon_touch_64();
  }
}

// optional .sync_pb.FaviconData favicon_touch_precomposed_64 = 5;
inline bool FaviconImageSpecifics::has_favicon_touch_precomposed_64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FaviconImageSpecifics::set_has_favicon_touch_precomposed_64() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FaviconImageSpecifics::clear_has_favicon_touch_precomposed_64() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FaviconImageSpecifics::clear_favicon_touch_precomposed_64() {
  if (favicon_touch_precomposed_64_ != NULL) favicon_touch_precomposed_64_->::sync_pb::FaviconData::Clear();
  clear_has_favicon_touch_precomposed_64();
}
inline const ::sync_pb::FaviconData& FaviconImageSpecifics::favicon_touch_precomposed_64() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return favicon_touch_precomposed_64_ != NULL ? *favicon_touch_precomposed_64_ : *default_instance().favicon_touch_precomposed_64_;
#else
  return favicon_touch_precomposed_64_ != NULL ? *favicon_touch_precomposed_64_ : *default_instance_->favicon_touch_precomposed_64_;
#endif
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::mutable_favicon_touch_precomposed_64() {
  set_has_favicon_touch_precomposed_64();
  if (favicon_touch_precomposed_64_ == NULL) favicon_touch_precomposed_64_ = new ::sync_pb::FaviconData;
  return favicon_touch_precomposed_64_;
}
inline ::sync_pb::FaviconData* FaviconImageSpecifics::release_favicon_touch_precomposed_64() {
  clear_has_favicon_touch_precomposed_64();
  ::sync_pb::FaviconData* temp = favicon_touch_precomposed_64_;
  favicon_touch_precomposed_64_ = NULL;
  return temp;
}
inline void FaviconImageSpecifics::set_allocated_favicon_touch_precomposed_64(::sync_pb::FaviconData* favicon_touch_precomposed_64) {
  delete favicon_touch_precomposed_64_;
  favicon_touch_precomposed_64_ = favicon_touch_precomposed_64;
  if (favicon_touch_precomposed_64) {
    set_has_favicon_touch_precomposed_64();
  } else {
    clear_has_favicon_touch_precomposed_64();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_favicon_5fimage_5fspecifics_2eproto__INCLUDED
