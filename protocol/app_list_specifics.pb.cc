// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_list_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "app_list_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_app_5flist_5fspecifics_2eproto() {
  delete AppListSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_app_5flist_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_app_5flist_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AppListSpecifics::default_instance_ = new AppListSpecifics();
  AppListSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_app_5flist_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_app_5flist_5fspecifics_2eproto_once_);
void protobuf_AddDesc_app_5flist_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_app_5flist_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_app_5flist_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_app_5flist_5fspecifics_2eproto {
  StaticDescriptorInitializer_app_5flist_5fspecifics_2eproto() {
    protobuf_AddDesc_app_5flist_5fspecifics_2eproto();
  }
} static_descriptor_initializer_app_5flist_5fspecifics_2eproto_;
#endif

// ===================================================================

bool AppListSpecifics_AppListItemType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AppListSpecifics_AppListItemType AppListSpecifics::TYPE_APP;
const AppListSpecifics_AppListItemType AppListSpecifics::TYPE_REMOVE_DEFAULT_APP;
const AppListSpecifics_AppListItemType AppListSpecifics::TYPE_FOLDER;
const AppListSpecifics_AppListItemType AppListSpecifics::TYPE_URL;
const AppListSpecifics_AppListItemType AppListSpecifics::AppListItemType_MIN;
const AppListSpecifics_AppListItemType AppListSpecifics::AppListItemType_MAX;
const int AppListSpecifics::AppListItemType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AppListSpecifics::kItemIdFieldNumber;
const int AppListSpecifics::kItemTypeFieldNumber;
const int AppListSpecifics::kItemNameFieldNumber;
const int AppListSpecifics::kParentIdFieldNumber;
const int AppListSpecifics::kPageOrdinalFieldNumber;
const int AppListSpecifics::kItemOrdinalFieldNumber;
#endif  // !_MSC_VER

AppListSpecifics::AppListSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AppListSpecifics::InitAsDefaultInstance() {
}

AppListSpecifics::AppListSpecifics(const AppListSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AppListSpecifics::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  item_type_ = 1;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  parent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  page_ordinal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  item_ordinal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppListSpecifics::~AppListSpecifics() {
  SharedDtor();
}

void AppListSpecifics::SharedDtor() {
  if (item_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete item_id_;
  }
  if (item_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete item_name_;
  }
  if (parent_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete parent_id_;
  }
  if (page_ordinal_ != &::google::protobuf::internal::GetEmptyString()) {
    delete page_ordinal_;
  }
  if (item_ordinal_ != &::google::protobuf::internal::GetEmptyString()) {
    delete item_ordinal_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AppListSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AppListSpecifics& AppListSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_app_5flist_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_app_5flist_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

AppListSpecifics* AppListSpecifics::default_instance_ = NULL;

AppListSpecifics* AppListSpecifics::New() const {
  return new AppListSpecifics;
}

void AppListSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item_id()) {
      if (item_id_ != &::google::protobuf::internal::GetEmptyString()) {
        item_id_->clear();
      }
    }
    item_type_ = 1;
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::GetEmptyString()) {
        item_name_->clear();
      }
    }
    if (has_parent_id()) {
      if (parent_id_ != &::google::protobuf::internal::GetEmptyString()) {
        parent_id_->clear();
      }
    }
    if (has_page_ordinal()) {
      if (page_ordinal_ != &::google::protobuf::internal::GetEmptyString()) {
        page_ordinal_->clear();
      }
    }
    if (has_item_ordinal()) {
      if (item_ordinal_ != &::google::protobuf::internal::GetEmptyString()) {
        item_ordinal_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppListSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_type;
        break;
      }

      // optional .sync_pb.AppListSpecifics.AppListItemType item_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::AppListSpecifics_AppListItemType_IsValid(value)) {
            set_item_type(static_cast< ::sync_pb::AppListSpecifics_AppListItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_name;
        break;
      }

      // optional string item_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parent_id;
        break;
      }

      // optional string parent_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_page_ordinal;
        break;
      }

      // optional string page_ordinal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_ordinal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_ordinal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item_ordinal;
        break;
      }

      // optional string item_ordinal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_ordinal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_ordinal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppListSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->item_id(), output);
  }

  // optional .sync_pb.AppListSpecifics.AppListItemType item_type = 2;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->item_type(), output);
  }

  // optional string item_name = 3;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->item_name(), output);
  }

  // optional string parent_id = 4;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->parent_id(), output);
  }

  // optional string page_ordinal = 5;
  if (has_page_ordinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->page_ordinal(), output);
  }

  // optional string item_ordinal = 6;
  if (has_item_ordinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->item_ordinal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int AppListSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_id());
    }

    // optional .sync_pb.AppListSpecifics.AppListItemType item_type = 2;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->item_type());
    }

    // optional string item_name = 3;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }

    // optional string parent_id = 4;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_id());
    }

    // optional string page_ordinal = 5;
    if (has_page_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_ordinal());
    }

    // optional string item_ordinal = 6;
    if (has_item_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_ordinal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppListSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AppListSpecifics*>(&from));
}

void AppListSpecifics::MergeFrom(const AppListSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_page_ordinal()) {
      set_page_ordinal(from.page_ordinal());
    }
    if (from.has_item_ordinal()) {
      set_item_ordinal(from.item_ordinal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppListSpecifics::CopyFrom(const AppListSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppListSpecifics::IsInitialized() const {

  return true;
}

void AppListSpecifics::Swap(AppListSpecifics* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_type_, other->item_type_);
    std::swap(item_name_, other->item_name_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(page_ordinal_, other->page_ordinal_);
    std::swap(item_ordinal_, other->item_ordinal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AppListSpecifics::GetTypeName() const {
  return "sync_pb.AppListSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
