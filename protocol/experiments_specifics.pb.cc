// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiments_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "experiments_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_experiments_5fspecifics_2eproto() {
  delete KeystoreEncryptionFlags::default_instance_;
  delete HistoryDeleteDirectives::default_instance_;
  delete AutofillCullingFlags::default_instance_;
  delete FaviconSyncFlags::default_instance_;
  delete PreCommitUpdateAvoidanceFlags::default_instance_;
  delete GcmChannelFlags::default_instance_;
  delete EnhancedBookmarksFlags::default_instance_;
  delete GcmInvalidationsFlags::default_instance_;
  delete ExperimentsSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_experiments_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_experiments_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  KeystoreEncryptionFlags::default_instance_ = new KeystoreEncryptionFlags();
  HistoryDeleteDirectives::default_instance_ = new HistoryDeleteDirectives();
  AutofillCullingFlags::default_instance_ = new AutofillCullingFlags();
  FaviconSyncFlags::default_instance_ = new FaviconSyncFlags();
  PreCommitUpdateAvoidanceFlags::default_instance_ = new PreCommitUpdateAvoidanceFlags();
  GcmChannelFlags::default_instance_ = new GcmChannelFlags();
  EnhancedBookmarksFlags::default_instance_ = new EnhancedBookmarksFlags();
  GcmInvalidationsFlags::default_instance_ = new GcmInvalidationsFlags();
  ExperimentsSpecifics::default_instance_ = new ExperimentsSpecifics();
  KeystoreEncryptionFlags::default_instance_->InitAsDefaultInstance();
  HistoryDeleteDirectives::default_instance_->InitAsDefaultInstance();
  AutofillCullingFlags::default_instance_->InitAsDefaultInstance();
  FaviconSyncFlags::default_instance_->InitAsDefaultInstance();
  PreCommitUpdateAvoidanceFlags::default_instance_->InitAsDefaultInstance();
  GcmChannelFlags::default_instance_->InitAsDefaultInstance();
  EnhancedBookmarksFlags::default_instance_->InitAsDefaultInstance();
  GcmInvalidationsFlags::default_instance_->InitAsDefaultInstance();
  ExperimentsSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_experiments_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_experiments_5fspecifics_2eproto_once_);
void protobuf_AddDesc_experiments_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_experiments_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_experiments_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_experiments_5fspecifics_2eproto {
  StaticDescriptorInitializer_experiments_5fspecifics_2eproto() {
    protobuf_AddDesc_experiments_5fspecifics_2eproto();
  }
} static_descriptor_initializer_experiments_5fspecifics_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int KeystoreEncryptionFlags::kEnabledFieldNumber;
#endif  // !_MSC_VER

KeystoreEncryptionFlags::KeystoreEncryptionFlags()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void KeystoreEncryptionFlags::InitAsDefaultInstance() {
}

KeystoreEncryptionFlags::KeystoreEncryptionFlags(const KeystoreEncryptionFlags& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void KeystoreEncryptionFlags::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeystoreEncryptionFlags::~KeystoreEncryptionFlags() {
  SharedDtor();
}

void KeystoreEncryptionFlags::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void KeystoreEncryptionFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeystoreEncryptionFlags& KeystoreEncryptionFlags::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

KeystoreEncryptionFlags* KeystoreEncryptionFlags::default_instance_ = NULL;

KeystoreEncryptionFlags* KeystoreEncryptionFlags::New() const {
  return new KeystoreEncryptionFlags;
}

void KeystoreEncryptionFlags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeystoreEncryptionFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeystoreEncryptionFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int KeystoreEncryptionFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeystoreEncryptionFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeystoreEncryptionFlags*>(&from));
}

void KeystoreEncryptionFlags::MergeFrom(const KeystoreEncryptionFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeystoreEncryptionFlags::CopyFrom(const KeystoreEncryptionFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystoreEncryptionFlags::IsInitialized() const {

  return true;
}

void KeystoreEncryptionFlags::Swap(KeystoreEncryptionFlags* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string KeystoreEncryptionFlags::GetTypeName() const {
  return "sync_pb.KeystoreEncryptionFlags";
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryDeleteDirectives::kEnabledFieldNumber;
#endif  // !_MSC_VER

HistoryDeleteDirectives::HistoryDeleteDirectives()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void HistoryDeleteDirectives::InitAsDefaultInstance() {
}

HistoryDeleteDirectives::HistoryDeleteDirectives(const HistoryDeleteDirectives& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryDeleteDirectives::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryDeleteDirectives::~HistoryDeleteDirectives() {
  SharedDtor();
}

void HistoryDeleteDirectives::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HistoryDeleteDirectives::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HistoryDeleteDirectives& HistoryDeleteDirectives::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

HistoryDeleteDirectives* HistoryDeleteDirectives::default_instance_ = NULL;

HistoryDeleteDirectives* HistoryDeleteDirectives::New() const {
  return new HistoryDeleteDirectives;
}

void HistoryDeleteDirectives::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryDeleteDirectives::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryDeleteDirectives::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int HistoryDeleteDirectives::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryDeleteDirectives::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HistoryDeleteDirectives*>(&from));
}

void HistoryDeleteDirectives::MergeFrom(const HistoryDeleteDirectives& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryDeleteDirectives::CopyFrom(const HistoryDeleteDirectives& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryDeleteDirectives::IsInitialized() const {

  return true;
}

void HistoryDeleteDirectives::Swap(HistoryDeleteDirectives* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HistoryDeleteDirectives::GetTypeName() const {
  return "sync_pb.HistoryDeleteDirectives";
}


// ===================================================================

#ifndef _MSC_VER
const int AutofillCullingFlags::kEnabledFieldNumber;
#endif  // !_MSC_VER

AutofillCullingFlags::AutofillCullingFlags()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AutofillCullingFlags::InitAsDefaultInstance() {
}

AutofillCullingFlags::AutofillCullingFlags(const AutofillCullingFlags& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AutofillCullingFlags::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillCullingFlags::~AutofillCullingFlags() {
  SharedDtor();
}

void AutofillCullingFlags::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AutofillCullingFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillCullingFlags& AutofillCullingFlags::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

AutofillCullingFlags* AutofillCullingFlags::default_instance_ = NULL;

AutofillCullingFlags* AutofillCullingFlags::New() const {
  return new AutofillCullingFlags;
}

void AutofillCullingFlags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutofillCullingFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutofillCullingFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int AutofillCullingFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillCullingFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillCullingFlags*>(&from));
}

void AutofillCullingFlags::MergeFrom(const AutofillCullingFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutofillCullingFlags::CopyFrom(const AutofillCullingFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillCullingFlags::IsInitialized() const {

  return true;
}

void AutofillCullingFlags::Swap(AutofillCullingFlags* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AutofillCullingFlags::GetTypeName() const {
  return "sync_pb.AutofillCullingFlags";
}


// ===================================================================

#ifndef _MSC_VER
const int FaviconSyncFlags::kEnabledFieldNumber;
const int FaviconSyncFlags::kFaviconSyncLimitFieldNumber;
#endif  // !_MSC_VER

FaviconSyncFlags::FaviconSyncFlags()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FaviconSyncFlags::InitAsDefaultInstance() {
}

FaviconSyncFlags::FaviconSyncFlags(const FaviconSyncFlags& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FaviconSyncFlags::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  favicon_sync_limit_ = 200;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaviconSyncFlags::~FaviconSyncFlags() {
  SharedDtor();
}

void FaviconSyncFlags::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FaviconSyncFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FaviconSyncFlags& FaviconSyncFlags::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

FaviconSyncFlags* FaviconSyncFlags::default_instance_ = NULL;

FaviconSyncFlags* FaviconSyncFlags::New() const {
  return new FaviconSyncFlags;
}

void FaviconSyncFlags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
    favicon_sync_limit_ = 200;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaviconSyncFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_favicon_sync_limit;
        break;
      }

      // optional int32 favicon_sync_limit = 2 [default = 200];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_favicon_sync_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &favicon_sync_limit_)));
          set_has_favicon_sync_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FaviconSyncFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional int32 favicon_sync_limit = 2 [default = 200];
  if (has_favicon_sync_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->favicon_sync_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int FaviconSyncFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 favicon_sync_limit = 2 [default = 200];
    if (has_favicon_sync_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->favicon_sync_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaviconSyncFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FaviconSyncFlags*>(&from));
}

void FaviconSyncFlags::MergeFrom(const FaviconSyncFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_favicon_sync_limit()) {
      set_favicon_sync_limit(from.favicon_sync_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaviconSyncFlags::CopyFrom(const FaviconSyncFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaviconSyncFlags::IsInitialized() const {

  return true;
}

void FaviconSyncFlags::Swap(FaviconSyncFlags* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(favicon_sync_limit_, other->favicon_sync_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FaviconSyncFlags::GetTypeName() const {
  return "sync_pb.FaviconSyncFlags";
}


// ===================================================================

#ifndef _MSC_VER
const int PreCommitUpdateAvoidanceFlags::kEnabledFieldNumber;
#endif  // !_MSC_VER

PreCommitUpdateAvoidanceFlags::PreCommitUpdateAvoidanceFlags()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PreCommitUpdateAvoidanceFlags::InitAsDefaultInstance() {
}

PreCommitUpdateAvoidanceFlags::PreCommitUpdateAvoidanceFlags(const PreCommitUpdateAvoidanceFlags& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PreCommitUpdateAvoidanceFlags::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreCommitUpdateAvoidanceFlags::~PreCommitUpdateAvoidanceFlags() {
  SharedDtor();
}

void PreCommitUpdateAvoidanceFlags::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PreCommitUpdateAvoidanceFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PreCommitUpdateAvoidanceFlags& PreCommitUpdateAvoidanceFlags::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

PreCommitUpdateAvoidanceFlags* PreCommitUpdateAvoidanceFlags::default_instance_ = NULL;

PreCommitUpdateAvoidanceFlags* PreCommitUpdateAvoidanceFlags::New() const {
  return new PreCommitUpdateAvoidanceFlags;
}

void PreCommitUpdateAvoidanceFlags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreCommitUpdateAvoidanceFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreCommitUpdateAvoidanceFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int PreCommitUpdateAvoidanceFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreCommitUpdateAvoidanceFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PreCommitUpdateAvoidanceFlags*>(&from));
}

void PreCommitUpdateAvoidanceFlags::MergeFrom(const PreCommitUpdateAvoidanceFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreCommitUpdateAvoidanceFlags::CopyFrom(const PreCommitUpdateAvoidanceFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreCommitUpdateAvoidanceFlags::IsInitialized() const {

  return true;
}

void PreCommitUpdateAvoidanceFlags::Swap(PreCommitUpdateAvoidanceFlags* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PreCommitUpdateAvoidanceFlags::GetTypeName() const {
  return "sync_pb.PreCommitUpdateAvoidanceFlags";
}


// ===================================================================

#ifndef _MSC_VER
const int GcmChannelFlags::kEnabledFieldNumber;
#endif  // !_MSC_VER

GcmChannelFlags::GcmChannelFlags()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GcmChannelFlags::InitAsDefaultInstance() {
}

GcmChannelFlags::GcmChannelFlags(const GcmChannelFlags& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GcmChannelFlags::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GcmChannelFlags::~GcmChannelFlags() {
  SharedDtor();
}

void GcmChannelFlags::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GcmChannelFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GcmChannelFlags& GcmChannelFlags::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

GcmChannelFlags* GcmChannelFlags::default_instance_ = NULL;

GcmChannelFlags* GcmChannelFlags::New() const {
  return new GcmChannelFlags;
}

void GcmChannelFlags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GcmChannelFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GcmChannelFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GcmChannelFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcmChannelFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GcmChannelFlags*>(&from));
}

void GcmChannelFlags::MergeFrom(const GcmChannelFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GcmChannelFlags::CopyFrom(const GcmChannelFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmChannelFlags::IsInitialized() const {

  return true;
}

void GcmChannelFlags::Swap(GcmChannelFlags* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GcmChannelFlags::GetTypeName() const {
  return "sync_pb.GcmChannelFlags";
}


// ===================================================================

#ifndef _MSC_VER
const int EnhancedBookmarksFlags::kEnabledFieldNumber;
const int EnhancedBookmarksFlags::kExtensionIdFieldNumber;
#endif  // !_MSC_VER

EnhancedBookmarksFlags::EnhancedBookmarksFlags()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EnhancedBookmarksFlags::InitAsDefaultInstance() {
}

EnhancedBookmarksFlags::EnhancedBookmarksFlags(const EnhancedBookmarksFlags& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EnhancedBookmarksFlags::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  extension_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnhancedBookmarksFlags::~EnhancedBookmarksFlags() {
  SharedDtor();
}

void EnhancedBookmarksFlags::SharedDtor() {
  if (extension_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete extension_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnhancedBookmarksFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnhancedBookmarksFlags& EnhancedBookmarksFlags::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

EnhancedBookmarksFlags* EnhancedBookmarksFlags::default_instance_ = NULL;

EnhancedBookmarksFlags* EnhancedBookmarksFlags::New() const {
  return new EnhancedBookmarksFlags;
}

void EnhancedBookmarksFlags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
    if (has_extension_id()) {
      if (extension_id_ != &::google::protobuf::internal::GetEmptyString()) {
        extension_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnhancedBookmarksFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extension_id;
        break;
      }

      // optional string extension_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extension_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnhancedBookmarksFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional string extension_id = 2;
  if (has_extension_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->extension_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int EnhancedBookmarksFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional string extension_id = 2;
    if (has_extension_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnhancedBookmarksFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EnhancedBookmarksFlags*>(&from));
}

void EnhancedBookmarksFlags::MergeFrom(const EnhancedBookmarksFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_extension_id()) {
      set_extension_id(from.extension_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnhancedBookmarksFlags::CopyFrom(const EnhancedBookmarksFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnhancedBookmarksFlags::IsInitialized() const {

  return true;
}

void EnhancedBookmarksFlags::Swap(EnhancedBookmarksFlags* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(extension_id_, other->extension_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EnhancedBookmarksFlags::GetTypeName() const {
  return "sync_pb.EnhancedBookmarksFlags";
}


// ===================================================================

#ifndef _MSC_VER
const int GcmInvalidationsFlags::kEnabledFieldNumber;
#endif  // !_MSC_VER

GcmInvalidationsFlags::GcmInvalidationsFlags()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GcmInvalidationsFlags::InitAsDefaultInstance() {
}

GcmInvalidationsFlags::GcmInvalidationsFlags(const GcmInvalidationsFlags& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GcmInvalidationsFlags::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GcmInvalidationsFlags::~GcmInvalidationsFlags() {
  SharedDtor();
}

void GcmInvalidationsFlags::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GcmInvalidationsFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GcmInvalidationsFlags& GcmInvalidationsFlags::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

GcmInvalidationsFlags* GcmInvalidationsFlags::default_instance_ = NULL;

GcmInvalidationsFlags* GcmInvalidationsFlags::New() const {
  return new GcmInvalidationsFlags;
}

void GcmInvalidationsFlags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GcmInvalidationsFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GcmInvalidationsFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enabled = 1;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GcmInvalidationsFlags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcmInvalidationsFlags::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GcmInvalidationsFlags*>(&from));
}

void GcmInvalidationsFlags::MergeFrom(const GcmInvalidationsFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GcmInvalidationsFlags::CopyFrom(const GcmInvalidationsFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcmInvalidationsFlags::IsInitialized() const {

  return true;
}

void GcmInvalidationsFlags::Swap(GcmInvalidationsFlags* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GcmInvalidationsFlags::GetTypeName() const {
  return "sync_pb.GcmInvalidationsFlags";
}


// ===================================================================

#ifndef _MSC_VER
const int ExperimentsSpecifics::kKeystoreEncryptionFieldNumber;
const int ExperimentsSpecifics::kHistoryDeleteDirectivesFieldNumber;
const int ExperimentsSpecifics::kAutofillCullingFieldNumber;
const int ExperimentsSpecifics::kFaviconSyncFieldNumber;
const int ExperimentsSpecifics::kPreCommitUpdateAvoidanceFieldNumber;
const int ExperimentsSpecifics::kGcmChannelFieldNumber;
const int ExperimentsSpecifics::kEnhancedBookmarksFieldNumber;
const int ExperimentsSpecifics::kGcmInvalidationsFieldNumber;
#endif  // !_MSC_VER

ExperimentsSpecifics::ExperimentsSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ExperimentsSpecifics::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  keystore_encryption_ = const_cast< ::sync_pb::KeystoreEncryptionFlags*>(
      ::sync_pb::KeystoreEncryptionFlags::internal_default_instance());
#else
  keystore_encryption_ = const_cast< ::sync_pb::KeystoreEncryptionFlags*>(&::sync_pb::KeystoreEncryptionFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  history_delete_directives_ = const_cast< ::sync_pb::HistoryDeleteDirectives*>(
      ::sync_pb::HistoryDeleteDirectives::internal_default_instance());
#else
  history_delete_directives_ = const_cast< ::sync_pb::HistoryDeleteDirectives*>(&::sync_pb::HistoryDeleteDirectives::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  autofill_culling_ = const_cast< ::sync_pb::AutofillCullingFlags*>(
      ::sync_pb::AutofillCullingFlags::internal_default_instance());
#else
  autofill_culling_ = const_cast< ::sync_pb::AutofillCullingFlags*>(&::sync_pb::AutofillCullingFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  favicon_sync_ = const_cast< ::sync_pb::FaviconSyncFlags*>(
      ::sync_pb::FaviconSyncFlags::internal_default_instance());
#else
  favicon_sync_ = const_cast< ::sync_pb::FaviconSyncFlags*>(&::sync_pb::FaviconSyncFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pre_commit_update_avoidance_ = const_cast< ::sync_pb::PreCommitUpdateAvoidanceFlags*>(
      ::sync_pb::PreCommitUpdateAvoidanceFlags::internal_default_instance());
#else
  pre_commit_update_avoidance_ = const_cast< ::sync_pb::PreCommitUpdateAvoidanceFlags*>(&::sync_pb::PreCommitUpdateAvoidanceFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gcm_channel_ = const_cast< ::sync_pb::GcmChannelFlags*>(
      ::sync_pb::GcmChannelFlags::internal_default_instance());
#else
  gcm_channel_ = const_cast< ::sync_pb::GcmChannelFlags*>(&::sync_pb::GcmChannelFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  enhanced_bookmarks_ = const_cast< ::sync_pb::EnhancedBookmarksFlags*>(
      ::sync_pb::EnhancedBookmarksFlags::internal_default_instance());
#else
  enhanced_bookmarks_ = const_cast< ::sync_pb::EnhancedBookmarksFlags*>(&::sync_pb::EnhancedBookmarksFlags::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gcm_invalidations_ = const_cast< ::sync_pb::GcmInvalidationsFlags*>(
      ::sync_pb::GcmInvalidationsFlags::internal_default_instance());
#else
  gcm_invalidations_ = const_cast< ::sync_pb::GcmInvalidationsFlags*>(&::sync_pb::GcmInvalidationsFlags::default_instance());
#endif
}

ExperimentsSpecifics::ExperimentsSpecifics(const ExperimentsSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ExperimentsSpecifics::SharedCtor() {
  _cached_size_ = 0;
  keystore_encryption_ = NULL;
  history_delete_directives_ = NULL;
  autofill_culling_ = NULL;
  favicon_sync_ = NULL;
  pre_commit_update_avoidance_ = NULL;
  gcm_channel_ = NULL;
  enhanced_bookmarks_ = NULL;
  gcm_invalidations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExperimentsSpecifics::~ExperimentsSpecifics() {
  SharedDtor();
}

void ExperimentsSpecifics::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete keystore_encryption_;
    delete history_delete_directives_;
    delete autofill_culling_;
    delete favicon_sync_;
    delete pre_commit_update_avoidance_;
    delete gcm_channel_;
    delete enhanced_bookmarks_;
    delete gcm_invalidations_;
  }
}

void ExperimentsSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ExperimentsSpecifics& ExperimentsSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_experiments_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_experiments_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

ExperimentsSpecifics* ExperimentsSpecifics::default_instance_ = NULL;

ExperimentsSpecifics* ExperimentsSpecifics::New() const {
  return new ExperimentsSpecifics;
}

void ExperimentsSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keystore_encryption()) {
      if (keystore_encryption_ != NULL) keystore_encryption_->::sync_pb::KeystoreEncryptionFlags::Clear();
    }
    if (has_history_delete_directives()) {
      if (history_delete_directives_ != NULL) history_delete_directives_->::sync_pb::HistoryDeleteDirectives::Clear();
    }
    if (has_autofill_culling()) {
      if (autofill_culling_ != NULL) autofill_culling_->::sync_pb::AutofillCullingFlags::Clear();
    }
    if (has_favicon_sync()) {
      if (favicon_sync_ != NULL) favicon_sync_->::sync_pb::FaviconSyncFlags::Clear();
    }
    if (has_pre_commit_update_avoidance()) {
      if (pre_commit_update_avoidance_ != NULL) pre_commit_update_avoidance_->::sync_pb::PreCommitUpdateAvoidanceFlags::Clear();
    }
    if (has_gcm_channel()) {
      if (gcm_channel_ != NULL) gcm_channel_->::sync_pb::GcmChannelFlags::Clear();
    }
    if (has_enhanced_bookmarks()) {
      if (enhanced_bookmarks_ != NULL) enhanced_bookmarks_->::sync_pb::EnhancedBookmarksFlags::Clear();
    }
    if (has_gcm_invalidations()) {
      if (gcm_invalidations_ != NULL) gcm_invalidations_->::sync_pb::GcmInvalidationsFlags::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExperimentsSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keystore_encryption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_delete_directives;
        break;
      }

      // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_delete_directives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_delete_directives()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_autofill_culling;
        break;
      }

      // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_autofill_culling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autofill_culling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_favicon_sync;
        break;
      }

      // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pre_commit_update_avoidance;
        break;
      }

      // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pre_commit_update_avoidance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_commit_update_avoidance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gcm_channel;
        break;
      }

      // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gcm_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gcm_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_enhanced_bookmarks;
        break;
      }

      // optional .sync_pb.EnhancedBookmarksFlags enhanced_bookmarks = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enhanced_bookmarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enhanced_bookmarks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_gcm_invalidations;
        break;
      }

      // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gcm_invalidations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gcm_invalidations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExperimentsSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
  if (has_keystore_encryption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->keystore_encryption(), output);
  }

  // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
  if (has_history_delete_directives()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->history_delete_directives(), output);
  }

  // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
  if (has_autofill_culling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->autofill_culling(), output);
  }

  // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
  if (has_favicon_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->favicon_sync(), output);
  }

  // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
  if (has_pre_commit_update_avoidance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->pre_commit_update_avoidance(), output);
  }

  // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
  if (has_gcm_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->gcm_channel(), output);
  }

  // optional .sync_pb.EnhancedBookmarksFlags enhanced_bookmarks = 7;
  if (has_enhanced_bookmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->enhanced_bookmarks(), output);
  }

  // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
  if (has_gcm_invalidations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->gcm_invalidations(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ExperimentsSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.KeystoreEncryptionFlags keystore_encryption = 1;
    if (has_keystore_encryption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keystore_encryption());
    }

    // optional .sync_pb.HistoryDeleteDirectives history_delete_directives = 2;
    if (has_history_delete_directives()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_delete_directives());
    }

    // optional .sync_pb.AutofillCullingFlags autofill_culling = 3;
    if (has_autofill_culling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->autofill_culling());
    }

    // optional .sync_pb.FaviconSyncFlags favicon_sync = 4;
    if (has_favicon_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->favicon_sync());
    }

    // optional .sync_pb.PreCommitUpdateAvoidanceFlags pre_commit_update_avoidance = 5;
    if (has_pre_commit_update_avoidance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pre_commit_update_avoidance());
    }

    // optional .sync_pb.GcmChannelFlags gcm_channel = 6;
    if (has_gcm_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gcm_channel());
    }

    // optional .sync_pb.EnhancedBookmarksFlags enhanced_bookmarks = 7;
    if (has_enhanced_bookmarks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enhanced_bookmarks());
    }

    // optional .sync_pb.GcmInvalidationsFlags gcm_invalidations = 8;
    if (has_gcm_invalidations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gcm_invalidations());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExperimentsSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ExperimentsSpecifics*>(&from));
}

void ExperimentsSpecifics::MergeFrom(const ExperimentsSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keystore_encryption()) {
      mutable_keystore_encryption()->::sync_pb::KeystoreEncryptionFlags::MergeFrom(from.keystore_encryption());
    }
    if (from.has_history_delete_directives()) {
      mutable_history_delete_directives()->::sync_pb::HistoryDeleteDirectives::MergeFrom(from.history_delete_directives());
    }
    if (from.has_autofill_culling()) {
      mutable_autofill_culling()->::sync_pb::AutofillCullingFlags::MergeFrom(from.autofill_culling());
    }
    if (from.has_favicon_sync()) {
      mutable_favicon_sync()->::sync_pb::FaviconSyncFlags::MergeFrom(from.favicon_sync());
    }
    if (from.has_pre_commit_update_avoidance()) {
      mutable_pre_commit_update_avoidance()->::sync_pb::PreCommitUpdateAvoidanceFlags::MergeFrom(from.pre_commit_update_avoidance());
    }
    if (from.has_gcm_channel()) {
      mutable_gcm_channel()->::sync_pb::GcmChannelFlags::MergeFrom(from.gcm_channel());
    }
    if (from.has_enhanced_bookmarks()) {
      mutable_enhanced_bookmarks()->::sync_pb::EnhancedBookmarksFlags::MergeFrom(from.enhanced_bookmarks());
    }
    if (from.has_gcm_invalidations()) {
      mutable_gcm_invalidations()->::sync_pb::GcmInvalidationsFlags::MergeFrom(from.gcm_invalidations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExperimentsSpecifics::CopyFrom(const ExperimentsSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperimentsSpecifics::IsInitialized() const {

  return true;
}

void ExperimentsSpecifics::Swap(ExperimentsSpecifics* other) {
  if (other != this) {
    std::swap(keystore_encryption_, other->keystore_encryption_);
    std::swap(history_delete_directives_, other->history_delete_directives_);
    std::swap(autofill_culling_, other->autofill_culling_);
    std::swap(favicon_sync_, other->favicon_sync_);
    std::swap(pre_commit_update_avoidance_, other->pre_commit_update_avoidance_);
    std::swap(gcm_channel_, other->gcm_channel_);
    std::swap(enhanced_bookmarks_, other->enhanced_bookmarks_);
    std::swap(gcm_invalidations_, other->gcm_invalidations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ExperimentsSpecifics::GetTypeName() const {
  return "sync_pb.ExperimentsSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
