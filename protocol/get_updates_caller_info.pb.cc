// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: get_updates_caller_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "get_updates_caller_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_get_5fupdates_5fcaller_5finfo_2eproto() {
  delete GetUpdatesCallerInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GetUpdatesCallerInfo::default_instance_ = new GetUpdatesCallerInfo();
  GetUpdatesCallerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_get_5fupdates_5fcaller_5finfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto_once_);
void protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto_once_,
                 &protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_get_5fupdates_5fcaller_5finfo_2eproto {
  StaticDescriptorInitializer_get_5fupdates_5fcaller_5finfo_2eproto() {
    protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto();
  }
} static_descriptor_initializer_get_5fupdates_5fcaller_5finfo_2eproto_;
#endif

// ===================================================================

bool GetUpdatesCallerInfo_GetUpdatesSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::UNKNOWN;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::FIRST_UPDATE;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::LOCAL;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::NOTIFICATION;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::PERIODIC;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::SYNC_CYCLE_CONTINUATION;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::NEWLY_SUPPORTED_DATATYPE;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::MIGRATION;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::NEW_CLIENT;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::RECONFIGURATION;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::DATATYPE_REFRESH;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::RETRY;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::GetUpdatesSource_MIN;
const GetUpdatesCallerInfo_GetUpdatesSource GetUpdatesCallerInfo::GetUpdatesSource_MAX;
const int GetUpdatesCallerInfo::GetUpdatesSource_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetUpdatesCallerInfo::kSourceFieldNumber;
const int GetUpdatesCallerInfo::kNotificationsEnabledFieldNumber;
#endif  // !_MSC_VER

GetUpdatesCallerInfo::GetUpdatesCallerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetUpdatesCallerInfo::InitAsDefaultInstance() {
}

GetUpdatesCallerInfo::GetUpdatesCallerInfo(const GetUpdatesCallerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetUpdatesCallerInfo::SharedCtor() {
  _cached_size_ = 0;
  source_ = 0;
  notifications_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUpdatesCallerInfo::~GetUpdatesCallerInfo() {
  SharedDtor();
}

void GetUpdatesCallerInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUpdatesCallerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdatesCallerInfo& GetUpdatesCallerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto();
#endif
  return *default_instance_;
}

GetUpdatesCallerInfo* GetUpdatesCallerInfo::default_instance_ = NULL;

GetUpdatesCallerInfo* GetUpdatesCallerInfo::New() const {
  return new GetUpdatesCallerInfo;
}

void GetUpdatesCallerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_ = 0;
    notifications_enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUpdatesCallerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource_IsValid(value)) {
            set_source(static_cast< ::sync_pb::GetUpdatesCallerInfo_GetUpdatesSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_notifications_enabled;
        break;
      }

      // optional bool notifications_enabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notifications_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notifications_enabled_)));
          set_has_notifications_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUpdatesCallerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // optional bool notifications_enabled = 2;
  if (has_notifications_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->notifications_enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GetUpdatesCallerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sync_pb.GetUpdatesCallerInfo.GetUpdatesSource source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional bool notifications_enabled = 2;
    if (has_notifications_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatesCallerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdatesCallerInfo*>(&from));
}

void GetUpdatesCallerInfo::MergeFrom(const GetUpdatesCallerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_notifications_enabled()) {
      set_notifications_enabled(from.notifications_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUpdatesCallerInfo::CopyFrom(const GetUpdatesCallerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesCallerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUpdatesCallerInfo::Swap(GetUpdatesCallerInfo* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(notifications_enabled_, other->notifications_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUpdatesCallerInfo::GetTypeName() const {
  return "sync_pb.GetUpdatesCallerInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
