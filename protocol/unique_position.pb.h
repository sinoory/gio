// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unique_position.proto

#ifndef PROTOBUF_unique_5fposition_2eproto__INCLUDED
#define PROTOBUF_unique_5fposition_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/base/sync_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_EXPORT protobuf_AddDesc_unique_5fposition_2eproto();
void protobuf_AssignDesc_unique_5fposition_2eproto();
void protobuf_ShutdownFile_unique_5fposition_2eproto();

class UniquePosition;

// ===================================================================

class SYNC_EXPORT UniquePosition : public ::google::protobuf::MessageLite {
 public:
  UniquePosition();
  virtual ~UniquePosition();

  UniquePosition(const UniquePosition& from);

  inline UniquePosition& operator=(const UniquePosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const UniquePosition& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UniquePosition* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UniquePosition* other);

  // implements Message ----------------------------------------------

  UniquePosition* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UniquePosition& from);
  void MergeFrom(const UniquePosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional bytes compressed_value = 2;
  inline bool has_compressed_value() const;
  inline void clear_compressed_value();
  static const int kCompressedValueFieldNumber = 2;
  inline const ::std::string& compressed_value() const;
  inline void set_compressed_value(const ::std::string& value);
  inline void set_compressed_value(const char* value);
  inline void set_compressed_value(const void* value, size_t size);
  inline ::std::string* mutable_compressed_value();
  inline ::std::string* release_compressed_value();
  inline void set_allocated_compressed_value(::std::string* compressed_value);

  // optional uint64 uncompressed_length = 3;
  inline bool has_uncompressed_length() const;
  inline void clear_uncompressed_length();
  static const int kUncompressedLengthFieldNumber = 3;
  inline ::google::protobuf::uint64 uncompressed_length() const;
  inline void set_uncompressed_length(::google::protobuf::uint64 value);

  // optional bytes custom_compressed_v1 = 4;
  inline bool has_custom_compressed_v1() const;
  inline void clear_custom_compressed_v1();
  static const int kCustomCompressedV1FieldNumber = 4;
  inline const ::std::string& custom_compressed_v1() const;
  inline void set_custom_compressed_v1(const ::std::string& value);
  inline void set_custom_compressed_v1(const char* value);
  inline void set_custom_compressed_v1(const void* value, size_t size);
  inline ::std::string* mutable_custom_compressed_v1();
  inline ::std::string* release_custom_compressed_v1();
  inline void set_allocated_custom_compressed_v1(::std::string* custom_compressed_v1);

  // @@protoc_insertion_point(class_scope:sync_pb.UniquePosition)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_compressed_value();
  inline void clear_has_compressed_value();
  inline void set_has_uncompressed_length();
  inline void clear_has_uncompressed_length();
  inline void set_has_custom_compressed_v1();
  inline void clear_has_custom_compressed_v1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::std::string* compressed_value_;
  ::google::protobuf::uint64 uncompressed_length_;
  ::std::string* custom_compressed_v1_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_unique_5fposition_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_unique_5fposition_2eproto();
  #endif
  friend void protobuf_AssignDesc_unique_5fposition_2eproto();
  friend void protobuf_ShutdownFile_unique_5fposition_2eproto();

  void InitAsDefaultInstance();
  static UniquePosition* default_instance_;
};
// ===================================================================


// ===================================================================

// UniquePosition

// optional bytes value = 1;
inline bool UniquePosition::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UniquePosition::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UniquePosition::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UniquePosition::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& UniquePosition::value() const {
  return *value_;
}
inline void UniquePosition::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void UniquePosition::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void UniquePosition::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UniquePosition::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* UniquePosition::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void UniquePosition::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bytes compressed_value = 2;
inline bool UniquePosition::has_compressed_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UniquePosition::set_has_compressed_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UniquePosition::clear_has_compressed_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UniquePosition::clear_compressed_value() {
  if (compressed_value_ != &::google::protobuf::internal::GetEmptyString()) {
    compressed_value_->clear();
  }
  clear_has_compressed_value();
}
inline const ::std::string& UniquePosition::compressed_value() const {
  return *compressed_value_;
}
inline void UniquePosition::set_compressed_value(const ::std::string& value) {
  set_has_compressed_value();
  if (compressed_value_ == &::google::protobuf::internal::GetEmptyString()) {
    compressed_value_ = new ::std::string;
  }
  compressed_value_->assign(value);
}
inline void UniquePosition::set_compressed_value(const char* value) {
  set_has_compressed_value();
  if (compressed_value_ == &::google::protobuf::internal::GetEmptyString()) {
    compressed_value_ = new ::std::string;
  }
  compressed_value_->assign(value);
}
inline void UniquePosition::set_compressed_value(const void* value, size_t size) {
  set_has_compressed_value();
  if (compressed_value_ == &::google::protobuf::internal::GetEmptyString()) {
    compressed_value_ = new ::std::string;
  }
  compressed_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UniquePosition::mutable_compressed_value() {
  set_has_compressed_value();
  if (compressed_value_ == &::google::protobuf::internal::GetEmptyString()) {
    compressed_value_ = new ::std::string;
  }
  return compressed_value_;
}
inline ::std::string* UniquePosition::release_compressed_value() {
  clear_has_compressed_value();
  if (compressed_value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = compressed_value_;
    compressed_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void UniquePosition::set_allocated_compressed_value(::std::string* compressed_value) {
  if (compressed_value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete compressed_value_;
  }
  if (compressed_value) {
    set_has_compressed_value();
    compressed_value_ = compressed_value;
  } else {
    clear_has_compressed_value();
    compressed_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional uint64 uncompressed_length = 3;
inline bool UniquePosition::has_uncompressed_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UniquePosition::set_has_uncompressed_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UniquePosition::clear_has_uncompressed_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UniquePosition::clear_uncompressed_length() {
  uncompressed_length_ = GOOGLE_ULONGLONG(0);
  clear_has_uncompressed_length();
}
inline ::google::protobuf::uint64 UniquePosition::uncompressed_length() const {
  return uncompressed_length_;
}
inline void UniquePosition::set_uncompressed_length(::google::protobuf::uint64 value) {
  set_has_uncompressed_length();
  uncompressed_length_ = value;
}

// optional bytes custom_compressed_v1 = 4;
inline bool UniquePosition::has_custom_compressed_v1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UniquePosition::set_has_custom_compressed_v1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UniquePosition::clear_has_custom_compressed_v1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UniquePosition::clear_custom_compressed_v1() {
  if (custom_compressed_v1_ != &::google::protobuf::internal::GetEmptyString()) {
    custom_compressed_v1_->clear();
  }
  clear_has_custom_compressed_v1();
}
inline const ::std::string& UniquePosition::custom_compressed_v1() const {
  return *custom_compressed_v1_;
}
inline void UniquePosition::set_custom_compressed_v1(const ::std::string& value) {
  set_has_custom_compressed_v1();
  if (custom_compressed_v1_ == &::google::protobuf::internal::GetEmptyString()) {
    custom_compressed_v1_ = new ::std::string;
  }
  custom_compressed_v1_->assign(value);
}
inline void UniquePosition::set_custom_compressed_v1(const char* value) {
  set_has_custom_compressed_v1();
  if (custom_compressed_v1_ == &::google::protobuf::internal::GetEmptyString()) {
    custom_compressed_v1_ = new ::std::string;
  }
  custom_compressed_v1_->assign(value);
}
inline void UniquePosition::set_custom_compressed_v1(const void* value, size_t size) {
  set_has_custom_compressed_v1();
  if (custom_compressed_v1_ == &::google::protobuf::internal::GetEmptyString()) {
    custom_compressed_v1_ = new ::std::string;
  }
  custom_compressed_v1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UniquePosition::mutable_custom_compressed_v1() {
  set_has_custom_compressed_v1();
  if (custom_compressed_v1_ == &::google::protobuf::internal::GetEmptyString()) {
    custom_compressed_v1_ = new ::std::string;
  }
  return custom_compressed_v1_;
}
inline ::std::string* UniquePosition::release_custom_compressed_v1() {
  clear_has_custom_compressed_v1();
  if (custom_compressed_v1_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = custom_compressed_v1_;
    custom_compressed_v1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void UniquePosition::set_allocated_custom_compressed_v1(::std::string* custom_compressed_v1) {
  if (custom_compressed_v1_ != &::google::protobuf::internal::GetEmptyString()) {
    delete custom_compressed_v1_;
  }
  if (custom_compressed_v1) {
    set_has_custom_compressed_v1();
    custom_compressed_v1_ = custom_compressed_v1;
  } else {
    clear_has_custom_compressed_v1();
    custom_compressed_v1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_unique_5fposition_2eproto__INCLUDED
