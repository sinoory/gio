// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nigori_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nigori_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_nigori_5fspecifics_2eproto() {
  delete NigoriKey::default_instance_;
  delete NigoriKeyBag::default_instance_;
  delete NigoriSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_nigori_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_nigori_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sync_pb::protobuf_AddDesc_encryption_2eproto();
  NigoriKey::default_instance_ = new NigoriKey();
  NigoriKeyBag::default_instance_ = new NigoriKeyBag();
  NigoriSpecifics::default_instance_ = new NigoriSpecifics();
  NigoriKey::default_instance_->InitAsDefaultInstance();
  NigoriKeyBag::default_instance_->InitAsDefaultInstance();
  NigoriSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nigori_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_nigori_5fspecifics_2eproto_once_);
void protobuf_AddDesc_nigori_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_nigori_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_nigori_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nigori_5fspecifics_2eproto {
  StaticDescriptorInitializer_nigori_5fspecifics_2eproto() {
    protobuf_AddDesc_nigori_5fspecifics_2eproto();
  }
} static_descriptor_initializer_nigori_5fspecifics_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int NigoriKey::kNameFieldNumber;
const int NigoriKey::kUserKeyFieldNumber;
const int NigoriKey::kEncryptionKeyFieldNumber;
const int NigoriKey::kMacKeyFieldNumber;
#endif  // !_MSC_VER

NigoriKey::NigoriKey()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NigoriKey::InitAsDefaultInstance() {
}

NigoriKey::NigoriKey(const NigoriKey& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NigoriKey::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  user_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  encryption_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  mac_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NigoriKey::~NigoriKey() {
  SharedDtor();
}

void NigoriKey::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (user_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete user_key_;
  }
  if (encryption_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete encryption_key_;
  }
  if (mac_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete mac_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NigoriKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NigoriKey& NigoriKey::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_nigori_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_nigori_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

NigoriKey* NigoriKey::default_instance_ = NULL;

NigoriKey* NigoriKey::New() const {
  return new NigoriKey;
}

void NigoriKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_user_key()) {
      if (user_key_ != &::google::protobuf::internal::GetEmptyString()) {
        user_key_->clear();
      }
    }
    if (has_encryption_key()) {
      if (encryption_key_ != &::google::protobuf::internal::GetEmptyString()) {
        encryption_key_->clear();
      }
    }
    if (has_mac_key()) {
      if (mac_key_ != &::google::protobuf::internal::GetEmptyString()) {
        mac_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NigoriKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_key;
        break;
      }

      // optional bytes user_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_encryption_key;
        break;
      }

      // optional bytes encryption_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encryption_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mac_key;
        break;
      }

      // optional bytes mac_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NigoriKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bytes user_key = 2;
  if (has_user_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->user_key(), output);
  }

  // optional bytes encryption_key = 3;
  if (has_encryption_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->encryption_key(), output);
  }

  // optional bytes mac_key = 4;
  if (has_mac_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->mac_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int NigoriKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes user_key = 2;
    if (has_user_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_key());
    }

    // optional bytes encryption_key = 3;
    if (has_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryption_key());
    }

    // optional bytes mac_key = 4;
    if (has_mac_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mac_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NigoriKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NigoriKey*>(&from));
}

void NigoriKey::MergeFrom(const NigoriKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_user_key()) {
      set_user_key(from.user_key());
    }
    if (from.has_encryption_key()) {
      set_encryption_key(from.encryption_key());
    }
    if (from.has_mac_key()) {
      set_mac_key(from.mac_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NigoriKey::CopyFrom(const NigoriKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriKey::IsInitialized() const {

  return true;
}

void NigoriKey::Swap(NigoriKey* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(user_key_, other->user_key_);
    std::swap(encryption_key_, other->encryption_key_);
    std::swap(mac_key_, other->mac_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NigoriKey::GetTypeName() const {
  return "sync_pb.NigoriKey";
}


// ===================================================================

#ifndef _MSC_VER
const int NigoriKeyBag::kKeyFieldNumber;
#endif  // !_MSC_VER

NigoriKeyBag::NigoriKeyBag()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NigoriKeyBag::InitAsDefaultInstance() {
}

NigoriKeyBag::NigoriKeyBag(const NigoriKeyBag& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NigoriKeyBag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NigoriKeyBag::~NigoriKeyBag() {
  SharedDtor();
}

void NigoriKeyBag::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NigoriKeyBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NigoriKeyBag& NigoriKeyBag::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_nigori_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_nigori_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

NigoriKeyBag* NigoriKeyBag::default_instance_ = NULL;

NigoriKeyBag* NigoriKeyBag::New() const {
  return new NigoriKeyBag;
}

void NigoriKeyBag::Clear() {
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NigoriKeyBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.NigoriKey key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NigoriKeyBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sync_pb.NigoriKey key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->key(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int NigoriKeyBag::ByteSize() const {
  int total_size = 0;

  // repeated .sync_pb.NigoriKey key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NigoriKeyBag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NigoriKeyBag*>(&from));
}

void NigoriKeyBag::MergeFrom(const NigoriKeyBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NigoriKeyBag::CopyFrom(const NigoriKeyBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriKeyBag::IsInitialized() const {

  return true;
}

void NigoriKeyBag::Swap(NigoriKeyBag* other) {
  if (other != this) {
    key_.Swap(&other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NigoriKeyBag::GetTypeName() const {
  return "sync_pb.NigoriKeyBag";
}


// ===================================================================

bool NigoriSpecifics_PassphraseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NigoriSpecifics_PassphraseType NigoriSpecifics::IMPLICIT_PASSPHRASE;
const NigoriSpecifics_PassphraseType NigoriSpecifics::KEYSTORE_PASSPHRASE;
const NigoriSpecifics_PassphraseType NigoriSpecifics::FROZEN_IMPLICIT_PASSPHRASE;
const NigoriSpecifics_PassphraseType NigoriSpecifics::CUSTOM_PASSPHRASE;
const NigoriSpecifics_PassphraseType NigoriSpecifics::PassphraseType_MIN;
const NigoriSpecifics_PassphraseType NigoriSpecifics::PassphraseType_MAX;
const int NigoriSpecifics::PassphraseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NigoriSpecifics::kEncryptionKeybagFieldNumber;
const int NigoriSpecifics::kKeybagIsFrozenFieldNumber;
const int NigoriSpecifics::kEncryptBookmarksFieldNumber;
const int NigoriSpecifics::kEncryptPreferencesFieldNumber;
const int NigoriSpecifics::kEncryptAutofillProfileFieldNumber;
const int NigoriSpecifics::kEncryptAutofillFieldNumber;
const int NigoriSpecifics::kEncryptThemesFieldNumber;
const int NigoriSpecifics::kEncryptTypedUrlsFieldNumber;
const int NigoriSpecifics::kEncryptExtensionsFieldNumber;
const int NigoriSpecifics::kEncryptSessionsFieldNumber;
const int NigoriSpecifics::kEncryptAppsFieldNumber;
const int NigoriSpecifics::kEncryptSearchEnginesFieldNumber;
const int NigoriSpecifics::kEncryptEverythingFieldNumber;
const int NigoriSpecifics::kEncryptExtensionSettingsFieldNumber;
const int NigoriSpecifics::kEncryptAppNotificationsFieldNumber;
const int NigoriSpecifics::kEncryptAppSettingsFieldNumber;
const int NigoriSpecifics::kSyncTabFaviconsFieldNumber;
const int NigoriSpecifics::kPassphraseTypeFieldNumber;
const int NigoriSpecifics::kKeystoreDecryptorTokenFieldNumber;
const int NigoriSpecifics::kKeystoreMigrationTimeFieldNumber;
const int NigoriSpecifics::kCustomPassphraseTimeFieldNumber;
const int NigoriSpecifics::kEncryptDictionaryFieldNumber;
const int NigoriSpecifics::kEncryptFaviconImagesFieldNumber;
const int NigoriSpecifics::kEncryptFaviconTrackingFieldNumber;
const int NigoriSpecifics::kEncryptArticlesFieldNumber;
const int NigoriSpecifics::kEncryptAppListFieldNumber;
#endif  // !_MSC_VER

NigoriSpecifics::NigoriSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NigoriSpecifics::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  encryption_keybag_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
#else
  encryption_keybag_ = const_cast< ::sync_pb::EncryptedData*>(&::sync_pb::EncryptedData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  keystore_decryptor_token_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
#else
  keystore_decryptor_token_ = const_cast< ::sync_pb::EncryptedData*>(&::sync_pb::EncryptedData::default_instance());
#endif
}

NigoriSpecifics::NigoriSpecifics(const NigoriSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NigoriSpecifics::SharedCtor() {
  _cached_size_ = 0;
  encryption_keybag_ = NULL;
  keybag_is_frozen_ = false;
  encrypt_bookmarks_ = false;
  encrypt_preferences_ = false;
  encrypt_autofill_profile_ = false;
  encrypt_autofill_ = false;
  encrypt_themes_ = false;
  encrypt_typed_urls_ = false;
  encrypt_extensions_ = false;
  encrypt_sessions_ = false;
  encrypt_apps_ = false;
  encrypt_search_engines_ = false;
  encrypt_everything_ = false;
  encrypt_extension_settings_ = false;
  encrypt_app_notifications_ = false;
  encrypt_app_settings_ = false;
  sync_tab_favicons_ = false;
  passphrase_type_ = 1;
  keystore_decryptor_token_ = NULL;
  keystore_migration_time_ = GOOGLE_LONGLONG(0);
  custom_passphrase_time_ = GOOGLE_LONGLONG(0);
  encrypt_dictionary_ = false;
  encrypt_favicon_images_ = false;
  encrypt_favicon_tracking_ = false;
  encrypt_articles_ = false;
  encrypt_app_list_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NigoriSpecifics::~NigoriSpecifics() {
  SharedDtor();
}

void NigoriSpecifics::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete encryption_keybag_;
    delete keystore_decryptor_token_;
  }
}

void NigoriSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NigoriSpecifics& NigoriSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_nigori_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_nigori_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

NigoriSpecifics* NigoriSpecifics::default_instance_ = NULL;

NigoriSpecifics* NigoriSpecifics::New() const {
  return new NigoriSpecifics;
}

void NigoriSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encryption_keybag()) {
      if (encryption_keybag_ != NULL) encryption_keybag_->::sync_pb::EncryptedData::Clear();
    }
    keybag_is_frozen_ = false;
    encrypt_bookmarks_ = false;
    encrypt_preferences_ = false;
    encrypt_autofill_profile_ = false;
    encrypt_autofill_ = false;
    encrypt_themes_ = false;
    encrypt_typed_urls_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    encrypt_extensions_ = false;
    encrypt_sessions_ = false;
    encrypt_apps_ = false;
    encrypt_search_engines_ = false;
    encrypt_everything_ = false;
    encrypt_extension_settings_ = false;
    encrypt_app_notifications_ = false;
    encrypt_app_settings_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sync_tab_favicons_ = false;
    passphrase_type_ = 1;
    if (has_keystore_decryptor_token()) {
      if (keystore_decryptor_token_ != NULL) keystore_decryptor_token_->::sync_pb::EncryptedData::Clear();
    }
    keystore_migration_time_ = GOOGLE_LONGLONG(0);
    custom_passphrase_time_ = GOOGLE_LONGLONG(0);
    encrypt_dictionary_ = false;
    encrypt_favicon_images_ = false;
    encrypt_favicon_tracking_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    encrypt_articles_ = false;
    encrypt_app_list_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NigoriSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.EncryptedData encryption_keybag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encryption_keybag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_keybag_is_frozen;
        break;
      }

      // optional bool keybag_is_frozen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keybag_is_frozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keybag_is_frozen_)));
          set_has_keybag_is_frozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_encrypt_bookmarks;
        break;
      }

      // optional bool encrypt_bookmarks = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_bookmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_bookmarks_)));
          set_has_encrypt_bookmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_encrypt_preferences;
        break;
      }

      // optional bool encrypt_preferences = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_preferences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_preferences_)));
          set_has_encrypt_preferences();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_encrypt_autofill_profile;
        break;
      }

      // optional bool encrypt_autofill_profile = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_autofill_profile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_autofill_profile_)));
          set_has_encrypt_autofill_profile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_encrypt_autofill;
        break;
      }

      // optional bool encrypt_autofill = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_autofill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_autofill_)));
          set_has_encrypt_autofill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_encrypt_themes;
        break;
      }

      // optional bool encrypt_themes = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_themes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_themes_)));
          set_has_encrypt_themes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_encrypt_typed_urls;
        break;
      }

      // optional bool encrypt_typed_urls = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_typed_urls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_typed_urls_)));
          set_has_encrypt_typed_urls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_encrypt_extensions;
        break;
      }

      // optional bool encrypt_extensions = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_extensions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_extensions_)));
          set_has_encrypt_extensions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_encrypt_sessions;
        break;
      }

      // optional bool encrypt_sessions = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_sessions_)));
          set_has_encrypt_sessions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_encrypt_apps;
        break;
      }

      // optional bool encrypt_apps = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_apps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_apps_)));
          set_has_encrypt_apps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_encrypt_search_engines;
        break;
      }

      // optional bool encrypt_search_engines = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_search_engines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_search_engines_)));
          set_has_encrypt_search_engines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_encrypt_everything;
        break;
      }

      // optional bool encrypt_everything = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_everything:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_everything_)));
          set_has_encrypt_everything();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_encrypt_extension_settings;
        break;
      }

      // optional bool encrypt_extension_settings = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_extension_settings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_extension_settings_)));
          set_has_encrypt_extension_settings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_encrypt_app_notifications;
        break;
      }

      // optional bool encrypt_app_notifications = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_app_notifications:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_app_notifications_)));
          set_has_encrypt_app_notifications();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_encrypt_app_settings;
        break;
      }

      // optional bool encrypt_app_settings = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_app_settings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_app_settings_)));
          set_has_encrypt_app_settings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_sync_tab_favicons;
        break;
      }

      // optional bool sync_tab_favicons = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_tab_favicons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_tab_favicons_)));
          set_has_sync_tab_favicons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_passphrase_type;
        break;
      }

      // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 30 [default = IMPLICIT_PASSPHRASE];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passphrase_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::NigoriSpecifics_PassphraseType_IsValid(value)) {
            set_passphrase_type(static_cast< ::sync_pb::NigoriSpecifics_PassphraseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_keystore_decryptor_token;
        break;
      }

      // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keystore_decryptor_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keystore_decryptor_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_keystore_migration_time;
        break;
      }

      // optional int64 keystore_migration_time = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keystore_migration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keystore_migration_time_)));
          set_has_keystore_migration_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_custom_passphrase_time;
        break;
      }

      // optional int64 custom_passphrase_time = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_passphrase_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &custom_passphrase_time_)));
          set_has_custom_passphrase_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_encrypt_dictionary;
        break;
      }

      // optional bool encrypt_dictionary = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_dictionary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_dictionary_)));
          set_has_encrypt_dictionary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_encrypt_favicon_images;
        break;
      }

      // optional bool encrypt_favicon_images = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_favicon_images:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_favicon_images_)));
          set_has_encrypt_favicon_images();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_encrypt_favicon_tracking;
        break;
      }

      // optional bool encrypt_favicon_tracking = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_favicon_tracking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_favicon_tracking_)));
          set_has_encrypt_favicon_tracking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_encrypt_articles;
        break;
      }

      // optional bool encrypt_articles = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_articles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_articles_)));
          set_has_encrypt_articles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_encrypt_app_list;
        break;
      }

      // optional bool encrypt_app_list = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encrypt_app_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_app_list_)));
          set_has_encrypt_app_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NigoriSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.EncryptedData encryption_keybag = 1;
  if (has_encryption_keybag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->encryption_keybag(), output);
  }

  // optional bool keybag_is_frozen = 2;
  if (has_keybag_is_frozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->keybag_is_frozen(), output);
  }

  // optional bool encrypt_bookmarks = 13;
  if (has_encrypt_bookmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->encrypt_bookmarks(), output);
  }

  // optional bool encrypt_preferences = 14;
  if (has_encrypt_preferences()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->encrypt_preferences(), output);
  }

  // optional bool encrypt_autofill_profile = 15;
  if (has_encrypt_autofill_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->encrypt_autofill_profile(), output);
  }

  // optional bool encrypt_autofill = 16;
  if (has_encrypt_autofill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->encrypt_autofill(), output);
  }

  // optional bool encrypt_themes = 17;
  if (has_encrypt_themes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->encrypt_themes(), output);
  }

  // optional bool encrypt_typed_urls = 18;
  if (has_encrypt_typed_urls()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->encrypt_typed_urls(), output);
  }

  // optional bool encrypt_extensions = 19;
  if (has_encrypt_extensions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->encrypt_extensions(), output);
  }

  // optional bool encrypt_sessions = 20;
  if (has_encrypt_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->encrypt_sessions(), output);
  }

  // optional bool encrypt_apps = 21;
  if (has_encrypt_apps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->encrypt_apps(), output);
  }

  // optional bool encrypt_search_engines = 22;
  if (has_encrypt_search_engines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->encrypt_search_engines(), output);
  }

  // optional bool encrypt_everything = 24;
  if (has_encrypt_everything()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->encrypt_everything(), output);
  }

  // optional bool encrypt_extension_settings = 25;
  if (has_encrypt_extension_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->encrypt_extension_settings(), output);
  }

  // optional bool encrypt_app_notifications = 26;
  if (has_encrypt_app_notifications()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->encrypt_app_notifications(), output);
  }

  // optional bool encrypt_app_settings = 27;
  if (has_encrypt_app_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->encrypt_app_settings(), output);
  }

  // optional bool sync_tab_favicons = 29;
  if (has_sync_tab_favicons()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->sync_tab_favicons(), output);
  }

  // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 30 [default = IMPLICIT_PASSPHRASE];
  if (has_passphrase_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->passphrase_type(), output);
  }

  // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
  if (has_keystore_decryptor_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->keystore_decryptor_token(), output);
  }

  // optional int64 keystore_migration_time = 32;
  if (has_keystore_migration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->keystore_migration_time(), output);
  }

  // optional int64 custom_passphrase_time = 33;
  if (has_custom_passphrase_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->custom_passphrase_time(), output);
  }

  // optional bool encrypt_dictionary = 34;
  if (has_encrypt_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->encrypt_dictionary(), output);
  }

  // optional bool encrypt_favicon_images = 35;
  if (has_encrypt_favicon_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->encrypt_favicon_images(), output);
  }

  // optional bool encrypt_favicon_tracking = 36;
  if (has_encrypt_favicon_tracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->encrypt_favicon_tracking(), output);
  }

  // optional bool encrypt_articles = 37;
  if (has_encrypt_articles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->encrypt_articles(), output);
  }

  // optional bool encrypt_app_list = 38;
  if (has_encrypt_app_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->encrypt_app_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int NigoriSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.EncryptedData encryption_keybag = 1;
    if (has_encryption_keybag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->encryption_keybag());
    }

    // optional bool keybag_is_frozen = 2;
    if (has_keybag_is_frozen()) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_bookmarks = 13;
    if (has_encrypt_bookmarks()) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_preferences = 14;
    if (has_encrypt_preferences()) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_autofill_profile = 15;
    if (has_encrypt_autofill_profile()) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_autofill = 16;
    if (has_encrypt_autofill()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_themes = 17;
    if (has_encrypt_themes()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_typed_urls = 18;
    if (has_encrypt_typed_urls()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool encrypt_extensions = 19;
    if (has_encrypt_extensions()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_sessions = 20;
    if (has_encrypt_sessions()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_apps = 21;
    if (has_encrypt_apps()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_search_engines = 22;
    if (has_encrypt_search_engines()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_everything = 24;
    if (has_encrypt_everything()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_extension_settings = 25;
    if (has_encrypt_extension_settings()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_app_notifications = 26;
    if (has_encrypt_app_notifications()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_app_settings = 27;
    if (has_encrypt_app_settings()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool sync_tab_favicons = 29;
    if (has_sync_tab_favicons()) {
      total_size += 2 + 1;
    }

    // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 30 [default = IMPLICIT_PASSPHRASE];
    if (has_passphrase_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->passphrase_type());
    }

    // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
    if (has_keystore_decryptor_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keystore_decryptor_token());
    }

    // optional int64 keystore_migration_time = 32;
    if (has_keystore_migration_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->keystore_migration_time());
    }

    // optional int64 custom_passphrase_time = 33;
    if (has_custom_passphrase_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->custom_passphrase_time());
    }

    // optional bool encrypt_dictionary = 34;
    if (has_encrypt_dictionary()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_favicon_images = 35;
    if (has_encrypt_favicon_images()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_favicon_tracking = 36;
    if (has_encrypt_favicon_tracking()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool encrypt_articles = 37;
    if (has_encrypt_articles()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_app_list = 38;
    if (has_encrypt_app_list()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NigoriSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NigoriSpecifics*>(&from));
}

void NigoriSpecifics::MergeFrom(const NigoriSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encryption_keybag()) {
      mutable_encryption_keybag()->::sync_pb::EncryptedData::MergeFrom(from.encryption_keybag());
    }
    if (from.has_keybag_is_frozen()) {
      set_keybag_is_frozen(from.keybag_is_frozen());
    }
    if (from.has_encrypt_bookmarks()) {
      set_encrypt_bookmarks(from.encrypt_bookmarks());
    }
    if (from.has_encrypt_preferences()) {
      set_encrypt_preferences(from.encrypt_preferences());
    }
    if (from.has_encrypt_autofill_profile()) {
      set_encrypt_autofill_profile(from.encrypt_autofill_profile());
    }
    if (from.has_encrypt_autofill()) {
      set_encrypt_autofill(from.encrypt_autofill());
    }
    if (from.has_encrypt_themes()) {
      set_encrypt_themes(from.encrypt_themes());
    }
    if (from.has_encrypt_typed_urls()) {
      set_encrypt_typed_urls(from.encrypt_typed_urls());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_encrypt_extensions()) {
      set_encrypt_extensions(from.encrypt_extensions());
    }
    if (from.has_encrypt_sessions()) {
      set_encrypt_sessions(from.encrypt_sessions());
    }
    if (from.has_encrypt_apps()) {
      set_encrypt_apps(from.encrypt_apps());
    }
    if (from.has_encrypt_search_engines()) {
      set_encrypt_search_engines(from.encrypt_search_engines());
    }
    if (from.has_encrypt_everything()) {
      set_encrypt_everything(from.encrypt_everything());
    }
    if (from.has_encrypt_extension_settings()) {
      set_encrypt_extension_settings(from.encrypt_extension_settings());
    }
    if (from.has_encrypt_app_notifications()) {
      set_encrypt_app_notifications(from.encrypt_app_notifications());
    }
    if (from.has_encrypt_app_settings()) {
      set_encrypt_app_settings(from.encrypt_app_settings());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sync_tab_favicons()) {
      set_sync_tab_favicons(from.sync_tab_favicons());
    }
    if (from.has_passphrase_type()) {
      set_passphrase_type(from.passphrase_type());
    }
    if (from.has_keystore_decryptor_token()) {
      mutable_keystore_decryptor_token()->::sync_pb::EncryptedData::MergeFrom(from.keystore_decryptor_token());
    }
    if (from.has_keystore_migration_time()) {
      set_keystore_migration_time(from.keystore_migration_time());
    }
    if (from.has_custom_passphrase_time()) {
      set_custom_passphrase_time(from.custom_passphrase_time());
    }
    if (from.has_encrypt_dictionary()) {
      set_encrypt_dictionary(from.encrypt_dictionary());
    }
    if (from.has_encrypt_favicon_images()) {
      set_encrypt_favicon_images(from.encrypt_favicon_images());
    }
    if (from.has_encrypt_favicon_tracking()) {
      set_encrypt_favicon_tracking(from.encrypt_favicon_tracking());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_encrypt_articles()) {
      set_encrypt_articles(from.encrypt_articles());
    }
    if (from.has_encrypt_app_list()) {
      set_encrypt_app_list(from.encrypt_app_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NigoriSpecifics::CopyFrom(const NigoriSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriSpecifics::IsInitialized() const {

  return true;
}

void NigoriSpecifics::Swap(NigoriSpecifics* other) {
  if (other != this) {
    std::swap(encryption_keybag_, other->encryption_keybag_);
    std::swap(keybag_is_frozen_, other->keybag_is_frozen_);
    std::swap(encrypt_bookmarks_, other->encrypt_bookmarks_);
    std::swap(encrypt_preferences_, other->encrypt_preferences_);
    std::swap(encrypt_autofill_profile_, other->encrypt_autofill_profile_);
    std::swap(encrypt_autofill_, other->encrypt_autofill_);
    std::swap(encrypt_themes_, other->encrypt_themes_);
    std::swap(encrypt_typed_urls_, other->encrypt_typed_urls_);
    std::swap(encrypt_extensions_, other->encrypt_extensions_);
    std::swap(encrypt_sessions_, other->encrypt_sessions_);
    std::swap(encrypt_apps_, other->encrypt_apps_);
    std::swap(encrypt_search_engines_, other->encrypt_search_engines_);
    std::swap(encrypt_everything_, other->encrypt_everything_);
    std::swap(encrypt_extension_settings_, other->encrypt_extension_settings_);
    std::swap(encrypt_app_notifications_, other->encrypt_app_notifications_);
    std::swap(encrypt_app_settings_, other->encrypt_app_settings_);
    std::swap(sync_tab_favicons_, other->sync_tab_favicons_);
    std::swap(passphrase_type_, other->passphrase_type_);
    std::swap(keystore_decryptor_token_, other->keystore_decryptor_token_);
    std::swap(keystore_migration_time_, other->keystore_migration_time_);
    std::swap(custom_passphrase_time_, other->custom_passphrase_time_);
    std::swap(encrypt_dictionary_, other->encrypt_dictionary_);
    std::swap(encrypt_favicon_images_, other->encrypt_favicon_images_);
    std::swap(encrypt_favicon_tracking_, other->encrypt_favicon_tracking_);
    std::swap(encrypt_articles_, other->encrypt_articles_);
    std::swap(encrypt_app_list_, other->encrypt_app_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NigoriSpecifics::GetTypeName() const {
  return "sync_pb.NigoriSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
