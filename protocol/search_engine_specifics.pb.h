// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search_engine_specifics.proto

#ifndef PROTOBUF_search_5fengine_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_search_5fengine_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/base/sync_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_EXPORT protobuf_AddDesc_search_5fengine_5fspecifics_2eproto();
void protobuf_AssignDesc_search_5fengine_5fspecifics_2eproto();
void protobuf_ShutdownFile_search_5fengine_5fspecifics_2eproto();

class SearchEngineSpecifics;

// ===================================================================

class SYNC_EXPORT SearchEngineSpecifics : public ::google::protobuf::MessageLite {
 public:
  SearchEngineSpecifics();
  virtual ~SearchEngineSpecifics();

  SearchEngineSpecifics(const SearchEngineSpecifics& from);

  inline SearchEngineSpecifics& operator=(const SearchEngineSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const SearchEngineSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SearchEngineSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SearchEngineSpecifics* other);

  // implements Message ----------------------------------------------

  SearchEngineSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SearchEngineSpecifics& from);
  void MergeFrom(const SearchEngineSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string short_name = 1;
  inline bool has_short_name() const;
  inline void clear_short_name();
  static const int kShortNameFieldNumber = 1;
  inline const ::std::string& short_name() const;
  inline void set_short_name(const ::std::string& value);
  inline void set_short_name(const char* value);
  inline void set_short_name(const char* value, size_t size);
  inline ::std::string* mutable_short_name();
  inline ::std::string* release_short_name();
  inline void set_allocated_short_name(::std::string* short_name);

  // optional string keyword = 2;
  inline bool has_keyword() const;
  inline void clear_keyword();
  static const int kKeywordFieldNumber = 2;
  inline const ::std::string& keyword() const;
  inline void set_keyword(const ::std::string& value);
  inline void set_keyword(const char* value);
  inline void set_keyword(const char* value, size_t size);
  inline ::std::string* mutable_keyword();
  inline ::std::string* release_keyword();
  inline void set_allocated_keyword(::std::string* keyword);

  // optional string favicon_url = 3;
  inline bool has_favicon_url() const;
  inline void clear_favicon_url();
  static const int kFaviconUrlFieldNumber = 3;
  inline const ::std::string& favicon_url() const;
  inline void set_favicon_url(const ::std::string& value);
  inline void set_favicon_url(const char* value);
  inline void set_favicon_url(const char* value, size_t size);
  inline ::std::string* mutable_favicon_url();
  inline ::std::string* release_favicon_url();
  inline void set_allocated_favicon_url(::std::string* favicon_url);

  // optional string url = 4;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 4;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional bool safe_for_autoreplace = 5;
  inline bool has_safe_for_autoreplace() const;
  inline void clear_safe_for_autoreplace();
  static const int kSafeForAutoreplaceFieldNumber = 5;
  inline bool safe_for_autoreplace() const;
  inline void set_safe_for_autoreplace(bool value);

  // optional string originating_url = 6;
  inline bool has_originating_url() const;
  inline void clear_originating_url();
  static const int kOriginatingUrlFieldNumber = 6;
  inline const ::std::string& originating_url() const;
  inline void set_originating_url(const ::std::string& value);
  inline void set_originating_url(const char* value);
  inline void set_originating_url(const char* value, size_t size);
  inline ::std::string* mutable_originating_url();
  inline ::std::string* release_originating_url();
  inline void set_allocated_originating_url(::std::string* originating_url);

  // optional int64 date_created = 7;
  inline bool has_date_created() const;
  inline void clear_date_created();
  static const int kDateCreatedFieldNumber = 7;
  inline ::google::protobuf::int64 date_created() const;
  inline void set_date_created(::google::protobuf::int64 value);

  // optional string input_encodings = 8;
  inline bool has_input_encodings() const;
  inline void clear_input_encodings();
  static const int kInputEncodingsFieldNumber = 8;
  inline const ::std::string& input_encodings() const;
  inline void set_input_encodings(const ::std::string& value);
  inline void set_input_encodings(const char* value);
  inline void set_input_encodings(const char* value, size_t size);
  inline ::std::string* mutable_input_encodings();
  inline ::std::string* release_input_encodings();
  inline void set_allocated_input_encodings(::std::string* input_encodings);

  // optional bool show_in_default_list = 9;
  inline bool has_show_in_default_list() const;
  inline void clear_show_in_default_list();
  static const int kShowInDefaultListFieldNumber = 9;
  inline bool show_in_default_list() const;
  inline void set_show_in_default_list(bool value);

  // optional string suggestions_url = 10;
  inline bool has_suggestions_url() const;
  inline void clear_suggestions_url();
  static const int kSuggestionsUrlFieldNumber = 10;
  inline const ::std::string& suggestions_url() const;
  inline void set_suggestions_url(const ::std::string& value);
  inline void set_suggestions_url(const char* value);
  inline void set_suggestions_url(const char* value, size_t size);
  inline ::std::string* mutable_suggestions_url();
  inline ::std::string* release_suggestions_url();
  inline void set_allocated_suggestions_url(::std::string* suggestions_url);

  // optional int32 prepopulate_id = 11;
  inline bool has_prepopulate_id() const;
  inline void clear_prepopulate_id();
  static const int kPrepopulateIdFieldNumber = 11;
  inline ::google::protobuf::int32 prepopulate_id() const;
  inline void set_prepopulate_id(::google::protobuf::int32 value);

  // optional bool autogenerate_keyword = 12;
  inline bool has_autogenerate_keyword() const;
  inline void clear_autogenerate_keyword();
  static const int kAutogenerateKeywordFieldNumber = 12;
  inline bool autogenerate_keyword() const;
  inline void set_autogenerate_keyword(bool value);

  // optional string instant_url = 15;
  inline bool has_instant_url() const;
  inline void clear_instant_url();
  static const int kInstantUrlFieldNumber = 15;
  inline const ::std::string& instant_url() const;
  inline void set_instant_url(const ::std::string& value);
  inline void set_instant_url(const char* value);
  inline void set_instant_url(const char* value, size_t size);
  inline ::std::string* mutable_instant_url();
  inline ::std::string* release_instant_url();
  inline void set_allocated_instant_url(::std::string* instant_url);

  // optional int64 last_modified = 17;
  inline bool has_last_modified() const;
  inline void clear_last_modified();
  static const int kLastModifiedFieldNumber = 17;
  inline ::google::protobuf::int64 last_modified() const;
  inline void set_last_modified(::google::protobuf::int64 value);

  // optional string sync_guid = 18;
  inline bool has_sync_guid() const;
  inline void clear_sync_guid();
  static const int kSyncGuidFieldNumber = 18;
  inline const ::std::string& sync_guid() const;
  inline void set_sync_guid(const ::std::string& value);
  inline void set_sync_guid(const char* value);
  inline void set_sync_guid(const char* value, size_t size);
  inline ::std::string* mutable_sync_guid();
  inline ::std::string* release_sync_guid();
  inline void set_allocated_sync_guid(::std::string* sync_guid);

  // repeated string alternate_urls = 19;
  inline int alternate_urls_size() const;
  inline void clear_alternate_urls();
  static const int kAlternateUrlsFieldNumber = 19;
  inline const ::std::string& alternate_urls(int index) const;
  inline ::std::string* mutable_alternate_urls(int index);
  inline void set_alternate_urls(int index, const ::std::string& value);
  inline void set_alternate_urls(int index, const char* value);
  inline void set_alternate_urls(int index, const char* value, size_t size);
  inline ::std::string* add_alternate_urls();
  inline void add_alternate_urls(const ::std::string& value);
  inline void add_alternate_urls(const char* value);
  inline void add_alternate_urls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& alternate_urls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alternate_urls();

  // optional string search_terms_replacement_key = 20;
  inline bool has_search_terms_replacement_key() const;
  inline void clear_search_terms_replacement_key();
  static const int kSearchTermsReplacementKeyFieldNumber = 20;
  inline const ::std::string& search_terms_replacement_key() const;
  inline void set_search_terms_replacement_key(const ::std::string& value);
  inline void set_search_terms_replacement_key(const char* value);
  inline void set_search_terms_replacement_key(const char* value, size_t size);
  inline ::std::string* mutable_search_terms_replacement_key();
  inline ::std::string* release_search_terms_replacement_key();
  inline void set_allocated_search_terms_replacement_key(::std::string* search_terms_replacement_key);

  // optional string image_url = 21;
  inline bool has_image_url() const;
  inline void clear_image_url();
  static const int kImageUrlFieldNumber = 21;
  inline const ::std::string& image_url() const;
  inline void set_image_url(const ::std::string& value);
  inline void set_image_url(const char* value);
  inline void set_image_url(const char* value, size_t size);
  inline ::std::string* mutable_image_url();
  inline ::std::string* release_image_url();
  inline void set_allocated_image_url(::std::string* image_url);

  // optional string search_url_post_params = 22;
  inline bool has_search_url_post_params() const;
  inline void clear_search_url_post_params();
  static const int kSearchUrlPostParamsFieldNumber = 22;
  inline const ::std::string& search_url_post_params() const;
  inline void set_search_url_post_params(const ::std::string& value);
  inline void set_search_url_post_params(const char* value);
  inline void set_search_url_post_params(const char* value, size_t size);
  inline ::std::string* mutable_search_url_post_params();
  inline ::std::string* release_search_url_post_params();
  inline void set_allocated_search_url_post_params(::std::string* search_url_post_params);

  // optional string suggestions_url_post_params = 23;
  inline bool has_suggestions_url_post_params() const;
  inline void clear_suggestions_url_post_params();
  static const int kSuggestionsUrlPostParamsFieldNumber = 23;
  inline const ::std::string& suggestions_url_post_params() const;
  inline void set_suggestions_url_post_params(const ::std::string& value);
  inline void set_suggestions_url_post_params(const char* value);
  inline void set_suggestions_url_post_params(const char* value, size_t size);
  inline ::std::string* mutable_suggestions_url_post_params();
  inline ::std::string* release_suggestions_url_post_params();
  inline void set_allocated_suggestions_url_post_params(::std::string* suggestions_url_post_params);

  // optional string instant_url_post_params = 24;
  inline bool has_instant_url_post_params() const;
  inline void clear_instant_url_post_params();
  static const int kInstantUrlPostParamsFieldNumber = 24;
  inline const ::std::string& instant_url_post_params() const;
  inline void set_instant_url_post_params(const ::std::string& value);
  inline void set_instant_url_post_params(const char* value);
  inline void set_instant_url_post_params(const char* value, size_t size);
  inline ::std::string* mutable_instant_url_post_params();
  inline ::std::string* release_instant_url_post_params();
  inline void set_allocated_instant_url_post_params(::std::string* instant_url_post_params);

  // optional string image_url_post_params = 25;
  inline bool has_image_url_post_params() const;
  inline void clear_image_url_post_params();
  static const int kImageUrlPostParamsFieldNumber = 25;
  inline const ::std::string& image_url_post_params() const;
  inline void set_image_url_post_params(const ::std::string& value);
  inline void set_image_url_post_params(const char* value);
  inline void set_image_url_post_params(const char* value, size_t size);
  inline ::std::string* mutable_image_url_post_params();
  inline ::std::string* release_image_url_post_params();
  inline void set_allocated_image_url_post_params(::std::string* image_url_post_params);

  // optional string new_tab_url = 26;
  inline bool has_new_tab_url() const;
  inline void clear_new_tab_url();
  static const int kNewTabUrlFieldNumber = 26;
  inline const ::std::string& new_tab_url() const;
  inline void set_new_tab_url(const ::std::string& value);
  inline void set_new_tab_url(const char* value);
  inline void set_new_tab_url(const char* value, size_t size);
  inline ::std::string* mutable_new_tab_url();
  inline ::std::string* release_new_tab_url();
  inline void set_allocated_new_tab_url(::std::string* new_tab_url);

  // @@protoc_insertion_point(class_scope:sync_pb.SearchEngineSpecifics)
 private:
  inline void set_has_short_name();
  inline void clear_has_short_name();
  inline void set_has_keyword();
  inline void clear_has_keyword();
  inline void set_has_favicon_url();
  inline void clear_has_favicon_url();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_safe_for_autoreplace();
  inline void clear_has_safe_for_autoreplace();
  inline void set_has_originating_url();
  inline void clear_has_originating_url();
  inline void set_has_date_created();
  inline void clear_has_date_created();
  inline void set_has_input_encodings();
  inline void clear_has_input_encodings();
  inline void set_has_show_in_default_list();
  inline void clear_has_show_in_default_list();
  inline void set_has_suggestions_url();
  inline void clear_has_suggestions_url();
  inline void set_has_prepopulate_id();
  inline void clear_has_prepopulate_id();
  inline void set_has_autogenerate_keyword();
  inline void clear_has_autogenerate_keyword();
  inline void set_has_instant_url();
  inline void clear_has_instant_url();
  inline void set_has_last_modified();
  inline void clear_has_last_modified();
  inline void set_has_sync_guid();
  inline void clear_has_sync_guid();
  inline void set_has_search_terms_replacement_key();
  inline void clear_has_search_terms_replacement_key();
  inline void set_has_image_url();
  inline void clear_has_image_url();
  inline void set_has_search_url_post_params();
  inline void clear_has_search_url_post_params();
  inline void set_has_suggestions_url_post_params();
  inline void clear_has_suggestions_url_post_params();
  inline void set_has_instant_url_post_params();
  inline void clear_has_instant_url_post_params();
  inline void set_has_image_url_post_params();
  inline void clear_has_image_url_post_params();
  inline void set_has_new_tab_url();
  inline void clear_has_new_tab_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* short_name_;
  ::std::string* keyword_;
  ::std::string* favicon_url_;
  ::std::string* url_;
  ::std::string* originating_url_;
  ::google::protobuf::int64 date_created_;
  ::std::string* input_encodings_;
  bool safe_for_autoreplace_;
  bool show_in_default_list_;
  bool autogenerate_keyword_;
  ::google::protobuf::int32 prepopulate_id_;
  ::std::string* suggestions_url_;
  ::std::string* instant_url_;
  ::google::protobuf::int64 last_modified_;
  ::std::string* sync_guid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alternate_urls_;
  ::std::string* search_terms_replacement_key_;
  ::std::string* image_url_;
  ::std::string* search_url_post_params_;
  ::std::string* suggestions_url_post_params_;
  ::std::string* instant_url_post_params_;
  ::std::string* image_url_post_params_;
  ::std::string* new_tab_url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_search_5fengine_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_search_5fengine_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_search_5fengine_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_search_5fengine_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static SearchEngineSpecifics* default_instance_;
};
// ===================================================================


// ===================================================================

// SearchEngineSpecifics

// optional string short_name = 1;
inline bool SearchEngineSpecifics::has_short_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchEngineSpecifics::set_has_short_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchEngineSpecifics::clear_has_short_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchEngineSpecifics::clear_short_name() {
  if (short_name_ != &::google::protobuf::internal::GetEmptyString()) {
    short_name_->clear();
  }
  clear_has_short_name();
}
inline const ::std::string& SearchEngineSpecifics::short_name() const {
  return *short_name_;
}
inline void SearchEngineSpecifics::set_short_name(const ::std::string& value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyString()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
}
inline void SearchEngineSpecifics::set_short_name(const char* value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyString()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
}
inline void SearchEngineSpecifics::set_short_name(const char* value, size_t size) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyString()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_short_name() {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyString()) {
    short_name_ = new ::std::string;
  }
  return short_name_;
}
inline ::std::string* SearchEngineSpecifics::release_short_name() {
  clear_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = short_name_;
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_short_name(::std::string* short_name) {
  if (short_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete short_name_;
  }
  if (short_name) {
    set_has_short_name();
    short_name_ = short_name;
  } else {
    clear_has_short_name();
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string keyword = 2;
inline bool SearchEngineSpecifics::has_keyword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchEngineSpecifics::set_has_keyword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchEngineSpecifics::clear_has_keyword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchEngineSpecifics::clear_keyword() {
  if (keyword_ != &::google::protobuf::internal::GetEmptyString()) {
    keyword_->clear();
  }
  clear_has_keyword();
}
inline const ::std::string& SearchEngineSpecifics::keyword() const {
  return *keyword_;
}
inline void SearchEngineSpecifics::set_keyword(const ::std::string& value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyString()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
}
inline void SearchEngineSpecifics::set_keyword(const char* value) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyString()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(value);
}
inline void SearchEngineSpecifics::set_keyword(const char* value, size_t size) {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyString()) {
    keyword_ = new ::std::string;
  }
  keyword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_keyword() {
  set_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyString()) {
    keyword_ = new ::std::string;
  }
  return keyword_;
}
inline ::std::string* SearchEngineSpecifics::release_keyword() {
  clear_has_keyword();
  if (keyword_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = keyword_;
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_keyword(::std::string* keyword) {
  if (keyword_ != &::google::protobuf::internal::GetEmptyString()) {
    delete keyword_;
  }
  if (keyword) {
    set_has_keyword();
    keyword_ = keyword;
  } else {
    clear_has_keyword();
    keyword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string favicon_url = 3;
inline bool SearchEngineSpecifics::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchEngineSpecifics::set_has_favicon_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchEngineSpecifics::clear_has_favicon_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchEngineSpecifics::clear_favicon_url() {
  if (favicon_url_ != &::google::protobuf::internal::GetEmptyString()) {
    favicon_url_->clear();
  }
  clear_has_favicon_url();
}
inline const ::std::string& SearchEngineSpecifics::favicon_url() const {
  return *favicon_url_;
}
inline void SearchEngineSpecifics::set_favicon_url(const ::std::string& value) {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_url_ = new ::std::string;
  }
  favicon_url_->assign(value);
}
inline void SearchEngineSpecifics::set_favicon_url(const char* value) {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_url_ = new ::std::string;
  }
  favicon_url_->assign(value);
}
inline void SearchEngineSpecifics::set_favicon_url(const char* value, size_t size) {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_url_ = new ::std::string;
  }
  favicon_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_favicon_url() {
  set_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    favicon_url_ = new ::std::string;
  }
  return favicon_url_;
}
inline ::std::string* SearchEngineSpecifics::release_favicon_url() {
  clear_has_favicon_url();
  if (favicon_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = favicon_url_;
    favicon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_favicon_url(::std::string* favicon_url) {
  if (favicon_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_url_;
  }
  if (favicon_url) {
    set_has_favicon_url();
    favicon_url_ = favicon_url;
  } else {
    clear_has_favicon_url();
    favicon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string url = 4;
inline bool SearchEngineSpecifics::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SearchEngineSpecifics::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SearchEngineSpecifics::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SearchEngineSpecifics::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& SearchEngineSpecifics::url() const {
  return *url_;
}
inline void SearchEngineSpecifics::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void SearchEngineSpecifics::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void SearchEngineSpecifics::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* SearchEngineSpecifics::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bool safe_for_autoreplace = 5;
inline bool SearchEngineSpecifics::has_safe_for_autoreplace() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SearchEngineSpecifics::set_has_safe_for_autoreplace() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SearchEngineSpecifics::clear_has_safe_for_autoreplace() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SearchEngineSpecifics::clear_safe_for_autoreplace() {
  safe_for_autoreplace_ = false;
  clear_has_safe_for_autoreplace();
}
inline bool SearchEngineSpecifics::safe_for_autoreplace() const {
  return safe_for_autoreplace_;
}
inline void SearchEngineSpecifics::set_safe_for_autoreplace(bool value) {
  set_has_safe_for_autoreplace();
  safe_for_autoreplace_ = value;
}

// optional string originating_url = 6;
inline bool SearchEngineSpecifics::has_originating_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SearchEngineSpecifics::set_has_originating_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SearchEngineSpecifics::clear_has_originating_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SearchEngineSpecifics::clear_originating_url() {
  if (originating_url_ != &::google::protobuf::internal::GetEmptyString()) {
    originating_url_->clear();
  }
  clear_has_originating_url();
}
inline const ::std::string& SearchEngineSpecifics::originating_url() const {
  return *originating_url_;
}
inline void SearchEngineSpecifics::set_originating_url(const ::std::string& value) {
  set_has_originating_url();
  if (originating_url_ == &::google::protobuf::internal::GetEmptyString()) {
    originating_url_ = new ::std::string;
  }
  originating_url_->assign(value);
}
inline void SearchEngineSpecifics::set_originating_url(const char* value) {
  set_has_originating_url();
  if (originating_url_ == &::google::protobuf::internal::GetEmptyString()) {
    originating_url_ = new ::std::string;
  }
  originating_url_->assign(value);
}
inline void SearchEngineSpecifics::set_originating_url(const char* value, size_t size) {
  set_has_originating_url();
  if (originating_url_ == &::google::protobuf::internal::GetEmptyString()) {
    originating_url_ = new ::std::string;
  }
  originating_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_originating_url() {
  set_has_originating_url();
  if (originating_url_ == &::google::protobuf::internal::GetEmptyString()) {
    originating_url_ = new ::std::string;
  }
  return originating_url_;
}
inline ::std::string* SearchEngineSpecifics::release_originating_url() {
  clear_has_originating_url();
  if (originating_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = originating_url_;
    originating_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_originating_url(::std::string* originating_url) {
  if (originating_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete originating_url_;
  }
  if (originating_url) {
    set_has_originating_url();
    originating_url_ = originating_url;
  } else {
    clear_has_originating_url();
    originating_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int64 date_created = 7;
inline bool SearchEngineSpecifics::has_date_created() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SearchEngineSpecifics::set_has_date_created() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SearchEngineSpecifics::clear_has_date_created() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SearchEngineSpecifics::clear_date_created() {
  date_created_ = GOOGLE_LONGLONG(0);
  clear_has_date_created();
}
inline ::google::protobuf::int64 SearchEngineSpecifics::date_created() const {
  return date_created_;
}
inline void SearchEngineSpecifics::set_date_created(::google::protobuf::int64 value) {
  set_has_date_created();
  date_created_ = value;
}

// optional string input_encodings = 8;
inline bool SearchEngineSpecifics::has_input_encodings() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SearchEngineSpecifics::set_has_input_encodings() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SearchEngineSpecifics::clear_has_input_encodings() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SearchEngineSpecifics::clear_input_encodings() {
  if (input_encodings_ != &::google::protobuf::internal::GetEmptyString()) {
    input_encodings_->clear();
  }
  clear_has_input_encodings();
}
inline const ::std::string& SearchEngineSpecifics::input_encodings() const {
  return *input_encodings_;
}
inline void SearchEngineSpecifics::set_input_encodings(const ::std::string& value) {
  set_has_input_encodings();
  if (input_encodings_ == &::google::protobuf::internal::GetEmptyString()) {
    input_encodings_ = new ::std::string;
  }
  input_encodings_->assign(value);
}
inline void SearchEngineSpecifics::set_input_encodings(const char* value) {
  set_has_input_encodings();
  if (input_encodings_ == &::google::protobuf::internal::GetEmptyString()) {
    input_encodings_ = new ::std::string;
  }
  input_encodings_->assign(value);
}
inline void SearchEngineSpecifics::set_input_encodings(const char* value, size_t size) {
  set_has_input_encodings();
  if (input_encodings_ == &::google::protobuf::internal::GetEmptyString()) {
    input_encodings_ = new ::std::string;
  }
  input_encodings_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_input_encodings() {
  set_has_input_encodings();
  if (input_encodings_ == &::google::protobuf::internal::GetEmptyString()) {
    input_encodings_ = new ::std::string;
  }
  return input_encodings_;
}
inline ::std::string* SearchEngineSpecifics::release_input_encodings() {
  clear_has_input_encodings();
  if (input_encodings_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = input_encodings_;
    input_encodings_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_input_encodings(::std::string* input_encodings) {
  if (input_encodings_ != &::google::protobuf::internal::GetEmptyString()) {
    delete input_encodings_;
  }
  if (input_encodings) {
    set_has_input_encodings();
    input_encodings_ = input_encodings;
  } else {
    clear_has_input_encodings();
    input_encodings_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bool show_in_default_list = 9;
inline bool SearchEngineSpecifics::has_show_in_default_list() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SearchEngineSpecifics::set_has_show_in_default_list() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SearchEngineSpecifics::clear_has_show_in_default_list() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SearchEngineSpecifics::clear_show_in_default_list() {
  show_in_default_list_ = false;
  clear_has_show_in_default_list();
}
inline bool SearchEngineSpecifics::show_in_default_list() const {
  return show_in_default_list_;
}
inline void SearchEngineSpecifics::set_show_in_default_list(bool value) {
  set_has_show_in_default_list();
  show_in_default_list_ = value;
}

// optional string suggestions_url = 10;
inline bool SearchEngineSpecifics::has_suggestions_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SearchEngineSpecifics::set_has_suggestions_url() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SearchEngineSpecifics::clear_has_suggestions_url() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SearchEngineSpecifics::clear_suggestions_url() {
  if (suggestions_url_ != &::google::protobuf::internal::GetEmptyString()) {
    suggestions_url_->clear();
  }
  clear_has_suggestions_url();
}
inline const ::std::string& SearchEngineSpecifics::suggestions_url() const {
  return *suggestions_url_;
}
inline void SearchEngineSpecifics::set_suggestions_url(const ::std::string& value) {
  set_has_suggestions_url();
  if (suggestions_url_ == &::google::protobuf::internal::GetEmptyString()) {
    suggestions_url_ = new ::std::string;
  }
  suggestions_url_->assign(value);
}
inline void SearchEngineSpecifics::set_suggestions_url(const char* value) {
  set_has_suggestions_url();
  if (suggestions_url_ == &::google::protobuf::internal::GetEmptyString()) {
    suggestions_url_ = new ::std::string;
  }
  suggestions_url_->assign(value);
}
inline void SearchEngineSpecifics::set_suggestions_url(const char* value, size_t size) {
  set_has_suggestions_url();
  if (suggestions_url_ == &::google::protobuf::internal::GetEmptyString()) {
    suggestions_url_ = new ::std::string;
  }
  suggestions_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_suggestions_url() {
  set_has_suggestions_url();
  if (suggestions_url_ == &::google::protobuf::internal::GetEmptyString()) {
    suggestions_url_ = new ::std::string;
  }
  return suggestions_url_;
}
inline ::std::string* SearchEngineSpecifics::release_suggestions_url() {
  clear_has_suggestions_url();
  if (suggestions_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = suggestions_url_;
    suggestions_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_suggestions_url(::std::string* suggestions_url) {
  if (suggestions_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete suggestions_url_;
  }
  if (suggestions_url) {
    set_has_suggestions_url();
    suggestions_url_ = suggestions_url;
  } else {
    clear_has_suggestions_url();
    suggestions_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 prepopulate_id = 11;
inline bool SearchEngineSpecifics::has_prepopulate_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SearchEngineSpecifics::set_has_prepopulate_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SearchEngineSpecifics::clear_has_prepopulate_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SearchEngineSpecifics::clear_prepopulate_id() {
  prepopulate_id_ = 0;
  clear_has_prepopulate_id();
}
inline ::google::protobuf::int32 SearchEngineSpecifics::prepopulate_id() const {
  return prepopulate_id_;
}
inline void SearchEngineSpecifics::set_prepopulate_id(::google::protobuf::int32 value) {
  set_has_prepopulate_id();
  prepopulate_id_ = value;
}

// optional bool autogenerate_keyword = 12;
inline bool SearchEngineSpecifics::has_autogenerate_keyword() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SearchEngineSpecifics::set_has_autogenerate_keyword() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SearchEngineSpecifics::clear_has_autogenerate_keyword() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SearchEngineSpecifics::clear_autogenerate_keyword() {
  autogenerate_keyword_ = false;
  clear_has_autogenerate_keyword();
}
inline bool SearchEngineSpecifics::autogenerate_keyword() const {
  return autogenerate_keyword_;
}
inline void SearchEngineSpecifics::set_autogenerate_keyword(bool value) {
  set_has_autogenerate_keyword();
  autogenerate_keyword_ = value;
}

// optional string instant_url = 15;
inline bool SearchEngineSpecifics::has_instant_url() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SearchEngineSpecifics::set_has_instant_url() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SearchEngineSpecifics::clear_has_instant_url() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SearchEngineSpecifics::clear_instant_url() {
  if (instant_url_ != &::google::protobuf::internal::GetEmptyString()) {
    instant_url_->clear();
  }
  clear_has_instant_url();
}
inline const ::std::string& SearchEngineSpecifics::instant_url() const {
  return *instant_url_;
}
inline void SearchEngineSpecifics::set_instant_url(const ::std::string& value) {
  set_has_instant_url();
  if (instant_url_ == &::google::protobuf::internal::GetEmptyString()) {
    instant_url_ = new ::std::string;
  }
  instant_url_->assign(value);
}
inline void SearchEngineSpecifics::set_instant_url(const char* value) {
  set_has_instant_url();
  if (instant_url_ == &::google::protobuf::internal::GetEmptyString()) {
    instant_url_ = new ::std::string;
  }
  instant_url_->assign(value);
}
inline void SearchEngineSpecifics::set_instant_url(const char* value, size_t size) {
  set_has_instant_url();
  if (instant_url_ == &::google::protobuf::internal::GetEmptyString()) {
    instant_url_ = new ::std::string;
  }
  instant_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_instant_url() {
  set_has_instant_url();
  if (instant_url_ == &::google::protobuf::internal::GetEmptyString()) {
    instant_url_ = new ::std::string;
  }
  return instant_url_;
}
inline ::std::string* SearchEngineSpecifics::release_instant_url() {
  clear_has_instant_url();
  if (instant_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = instant_url_;
    instant_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_instant_url(::std::string* instant_url) {
  if (instant_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete instant_url_;
  }
  if (instant_url) {
    set_has_instant_url();
    instant_url_ = instant_url;
  } else {
    clear_has_instant_url();
    instant_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int64 last_modified = 17;
inline bool SearchEngineSpecifics::has_last_modified() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SearchEngineSpecifics::set_has_last_modified() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SearchEngineSpecifics::clear_has_last_modified() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SearchEngineSpecifics::clear_last_modified() {
  last_modified_ = GOOGLE_LONGLONG(0);
  clear_has_last_modified();
}
inline ::google::protobuf::int64 SearchEngineSpecifics::last_modified() const {
  return last_modified_;
}
inline void SearchEngineSpecifics::set_last_modified(::google::protobuf::int64 value) {
  set_has_last_modified();
  last_modified_ = value;
}

// optional string sync_guid = 18;
inline bool SearchEngineSpecifics::has_sync_guid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SearchEngineSpecifics::set_has_sync_guid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SearchEngineSpecifics::clear_has_sync_guid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SearchEngineSpecifics::clear_sync_guid() {
  if (sync_guid_ != &::google::protobuf::internal::GetEmptyString()) {
    sync_guid_->clear();
  }
  clear_has_sync_guid();
}
inline const ::std::string& SearchEngineSpecifics::sync_guid() const {
  return *sync_guid_;
}
inline void SearchEngineSpecifics::set_sync_guid(const ::std::string& value) {
  set_has_sync_guid();
  if (sync_guid_ == &::google::protobuf::internal::GetEmptyString()) {
    sync_guid_ = new ::std::string;
  }
  sync_guid_->assign(value);
}
inline void SearchEngineSpecifics::set_sync_guid(const char* value) {
  set_has_sync_guid();
  if (sync_guid_ == &::google::protobuf::internal::GetEmptyString()) {
    sync_guid_ = new ::std::string;
  }
  sync_guid_->assign(value);
}
inline void SearchEngineSpecifics::set_sync_guid(const char* value, size_t size) {
  set_has_sync_guid();
  if (sync_guid_ == &::google::protobuf::internal::GetEmptyString()) {
    sync_guid_ = new ::std::string;
  }
  sync_guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_sync_guid() {
  set_has_sync_guid();
  if (sync_guid_ == &::google::protobuf::internal::GetEmptyString()) {
    sync_guid_ = new ::std::string;
  }
  return sync_guid_;
}
inline ::std::string* SearchEngineSpecifics::release_sync_guid() {
  clear_has_sync_guid();
  if (sync_guid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = sync_guid_;
    sync_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_sync_guid(::std::string* sync_guid) {
  if (sync_guid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete sync_guid_;
  }
  if (sync_guid) {
    set_has_sync_guid();
    sync_guid_ = sync_guid;
  } else {
    clear_has_sync_guid();
    sync_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated string alternate_urls = 19;
inline int SearchEngineSpecifics::alternate_urls_size() const {
  return alternate_urls_.size();
}
inline void SearchEngineSpecifics::clear_alternate_urls() {
  alternate_urls_.Clear();
}
inline const ::std::string& SearchEngineSpecifics::alternate_urls(int index) const {
  return alternate_urls_.Get(index);
}
inline ::std::string* SearchEngineSpecifics::mutable_alternate_urls(int index) {
  return alternate_urls_.Mutable(index);
}
inline void SearchEngineSpecifics::set_alternate_urls(int index, const ::std::string& value) {
  alternate_urls_.Mutable(index)->assign(value);
}
inline void SearchEngineSpecifics::set_alternate_urls(int index, const char* value) {
  alternate_urls_.Mutable(index)->assign(value);
}
inline void SearchEngineSpecifics::set_alternate_urls(int index, const char* value, size_t size) {
  alternate_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::add_alternate_urls() {
  return alternate_urls_.Add();
}
inline void SearchEngineSpecifics::add_alternate_urls(const ::std::string& value) {
  alternate_urls_.Add()->assign(value);
}
inline void SearchEngineSpecifics::add_alternate_urls(const char* value) {
  alternate_urls_.Add()->assign(value);
}
inline void SearchEngineSpecifics::add_alternate_urls(const char* value, size_t size) {
  alternate_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchEngineSpecifics::alternate_urls() const {
  return alternate_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchEngineSpecifics::mutable_alternate_urls() {
  return &alternate_urls_;
}

// optional string search_terms_replacement_key = 20;
inline bool SearchEngineSpecifics::has_search_terms_replacement_key() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SearchEngineSpecifics::set_has_search_terms_replacement_key() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SearchEngineSpecifics::clear_has_search_terms_replacement_key() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SearchEngineSpecifics::clear_search_terms_replacement_key() {
  if (search_terms_replacement_key_ != &::google::protobuf::internal::GetEmptyString()) {
    search_terms_replacement_key_->clear();
  }
  clear_has_search_terms_replacement_key();
}
inline const ::std::string& SearchEngineSpecifics::search_terms_replacement_key() const {
  return *search_terms_replacement_key_;
}
inline void SearchEngineSpecifics::set_search_terms_replacement_key(const ::std::string& value) {
  set_has_search_terms_replacement_key();
  if (search_terms_replacement_key_ == &::google::protobuf::internal::GetEmptyString()) {
    search_terms_replacement_key_ = new ::std::string;
  }
  search_terms_replacement_key_->assign(value);
}
inline void SearchEngineSpecifics::set_search_terms_replacement_key(const char* value) {
  set_has_search_terms_replacement_key();
  if (search_terms_replacement_key_ == &::google::protobuf::internal::GetEmptyString()) {
    search_terms_replacement_key_ = new ::std::string;
  }
  search_terms_replacement_key_->assign(value);
}
inline void SearchEngineSpecifics::set_search_terms_replacement_key(const char* value, size_t size) {
  set_has_search_terms_replacement_key();
  if (search_terms_replacement_key_ == &::google::protobuf::internal::GetEmptyString()) {
    search_terms_replacement_key_ = new ::std::string;
  }
  search_terms_replacement_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_search_terms_replacement_key() {
  set_has_search_terms_replacement_key();
  if (search_terms_replacement_key_ == &::google::protobuf::internal::GetEmptyString()) {
    search_terms_replacement_key_ = new ::std::string;
  }
  return search_terms_replacement_key_;
}
inline ::std::string* SearchEngineSpecifics::release_search_terms_replacement_key() {
  clear_has_search_terms_replacement_key();
  if (search_terms_replacement_key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = search_terms_replacement_key_;
    search_terms_replacement_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_search_terms_replacement_key(::std::string* search_terms_replacement_key) {
  if (search_terms_replacement_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete search_terms_replacement_key_;
  }
  if (search_terms_replacement_key) {
    set_has_search_terms_replacement_key();
    search_terms_replacement_key_ = search_terms_replacement_key;
  } else {
    clear_has_search_terms_replacement_key();
    search_terms_replacement_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string image_url = 21;
inline bool SearchEngineSpecifics::has_image_url() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SearchEngineSpecifics::set_has_image_url() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SearchEngineSpecifics::clear_has_image_url() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SearchEngineSpecifics::clear_image_url() {
  if (image_url_ != &::google::protobuf::internal::GetEmptyString()) {
    image_url_->clear();
  }
  clear_has_image_url();
}
inline const ::std::string& SearchEngineSpecifics::image_url() const {
  return *image_url_;
}
inline void SearchEngineSpecifics::set_image_url(const ::std::string& value) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::GetEmptyString()) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(value);
}
inline void SearchEngineSpecifics::set_image_url(const char* value) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::GetEmptyString()) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(value);
}
inline void SearchEngineSpecifics::set_image_url(const char* value, size_t size) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::GetEmptyString()) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_image_url() {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::GetEmptyString()) {
    image_url_ = new ::std::string;
  }
  return image_url_;
}
inline ::std::string* SearchEngineSpecifics::release_image_url() {
  clear_has_image_url();
  if (image_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = image_url_;
    image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_image_url(::std::string* image_url) {
  if (image_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete image_url_;
  }
  if (image_url) {
    set_has_image_url();
    image_url_ = image_url;
  } else {
    clear_has_image_url();
    image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string search_url_post_params = 22;
inline bool SearchEngineSpecifics::has_search_url_post_params() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SearchEngineSpecifics::set_has_search_url_post_params() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SearchEngineSpecifics::clear_has_search_url_post_params() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SearchEngineSpecifics::clear_search_url_post_params() {
  if (search_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    search_url_post_params_->clear();
  }
  clear_has_search_url_post_params();
}
inline const ::std::string& SearchEngineSpecifics::search_url_post_params() const {
  return *search_url_post_params_;
}
inline void SearchEngineSpecifics::set_search_url_post_params(const ::std::string& value) {
  set_has_search_url_post_params();
  if (search_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    search_url_post_params_ = new ::std::string;
  }
  search_url_post_params_->assign(value);
}
inline void SearchEngineSpecifics::set_search_url_post_params(const char* value) {
  set_has_search_url_post_params();
  if (search_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    search_url_post_params_ = new ::std::string;
  }
  search_url_post_params_->assign(value);
}
inline void SearchEngineSpecifics::set_search_url_post_params(const char* value, size_t size) {
  set_has_search_url_post_params();
  if (search_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    search_url_post_params_ = new ::std::string;
  }
  search_url_post_params_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_search_url_post_params() {
  set_has_search_url_post_params();
  if (search_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    search_url_post_params_ = new ::std::string;
  }
  return search_url_post_params_;
}
inline ::std::string* SearchEngineSpecifics::release_search_url_post_params() {
  clear_has_search_url_post_params();
  if (search_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = search_url_post_params_;
    search_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_search_url_post_params(::std::string* search_url_post_params) {
  if (search_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    delete search_url_post_params_;
  }
  if (search_url_post_params) {
    set_has_search_url_post_params();
    search_url_post_params_ = search_url_post_params;
  } else {
    clear_has_search_url_post_params();
    search_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string suggestions_url_post_params = 23;
inline bool SearchEngineSpecifics::has_suggestions_url_post_params() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SearchEngineSpecifics::set_has_suggestions_url_post_params() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SearchEngineSpecifics::clear_has_suggestions_url_post_params() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SearchEngineSpecifics::clear_suggestions_url_post_params() {
  if (suggestions_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    suggestions_url_post_params_->clear();
  }
  clear_has_suggestions_url_post_params();
}
inline const ::std::string& SearchEngineSpecifics::suggestions_url_post_params() const {
  return *suggestions_url_post_params_;
}
inline void SearchEngineSpecifics::set_suggestions_url_post_params(const ::std::string& value) {
  set_has_suggestions_url_post_params();
  if (suggestions_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    suggestions_url_post_params_ = new ::std::string;
  }
  suggestions_url_post_params_->assign(value);
}
inline void SearchEngineSpecifics::set_suggestions_url_post_params(const char* value) {
  set_has_suggestions_url_post_params();
  if (suggestions_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    suggestions_url_post_params_ = new ::std::string;
  }
  suggestions_url_post_params_->assign(value);
}
inline void SearchEngineSpecifics::set_suggestions_url_post_params(const char* value, size_t size) {
  set_has_suggestions_url_post_params();
  if (suggestions_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    suggestions_url_post_params_ = new ::std::string;
  }
  suggestions_url_post_params_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_suggestions_url_post_params() {
  set_has_suggestions_url_post_params();
  if (suggestions_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    suggestions_url_post_params_ = new ::std::string;
  }
  return suggestions_url_post_params_;
}
inline ::std::string* SearchEngineSpecifics::release_suggestions_url_post_params() {
  clear_has_suggestions_url_post_params();
  if (suggestions_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = suggestions_url_post_params_;
    suggestions_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_suggestions_url_post_params(::std::string* suggestions_url_post_params) {
  if (suggestions_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    delete suggestions_url_post_params_;
  }
  if (suggestions_url_post_params) {
    set_has_suggestions_url_post_params();
    suggestions_url_post_params_ = suggestions_url_post_params;
  } else {
    clear_has_suggestions_url_post_params();
    suggestions_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string instant_url_post_params = 24;
inline bool SearchEngineSpecifics::has_instant_url_post_params() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SearchEngineSpecifics::set_has_instant_url_post_params() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SearchEngineSpecifics::clear_has_instant_url_post_params() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SearchEngineSpecifics::clear_instant_url_post_params() {
  if (instant_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    instant_url_post_params_->clear();
  }
  clear_has_instant_url_post_params();
}
inline const ::std::string& SearchEngineSpecifics::instant_url_post_params() const {
  return *instant_url_post_params_;
}
inline void SearchEngineSpecifics::set_instant_url_post_params(const ::std::string& value) {
  set_has_instant_url_post_params();
  if (instant_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    instant_url_post_params_ = new ::std::string;
  }
  instant_url_post_params_->assign(value);
}
inline void SearchEngineSpecifics::set_instant_url_post_params(const char* value) {
  set_has_instant_url_post_params();
  if (instant_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    instant_url_post_params_ = new ::std::string;
  }
  instant_url_post_params_->assign(value);
}
inline void SearchEngineSpecifics::set_instant_url_post_params(const char* value, size_t size) {
  set_has_instant_url_post_params();
  if (instant_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    instant_url_post_params_ = new ::std::string;
  }
  instant_url_post_params_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_instant_url_post_params() {
  set_has_instant_url_post_params();
  if (instant_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    instant_url_post_params_ = new ::std::string;
  }
  return instant_url_post_params_;
}
inline ::std::string* SearchEngineSpecifics::release_instant_url_post_params() {
  clear_has_instant_url_post_params();
  if (instant_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = instant_url_post_params_;
    instant_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_instant_url_post_params(::std::string* instant_url_post_params) {
  if (instant_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    delete instant_url_post_params_;
  }
  if (instant_url_post_params) {
    set_has_instant_url_post_params();
    instant_url_post_params_ = instant_url_post_params;
  } else {
    clear_has_instant_url_post_params();
    instant_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string image_url_post_params = 25;
inline bool SearchEngineSpecifics::has_image_url_post_params() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SearchEngineSpecifics::set_has_image_url_post_params() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SearchEngineSpecifics::clear_has_image_url_post_params() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SearchEngineSpecifics::clear_image_url_post_params() {
  if (image_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    image_url_post_params_->clear();
  }
  clear_has_image_url_post_params();
}
inline const ::std::string& SearchEngineSpecifics::image_url_post_params() const {
  return *image_url_post_params_;
}
inline void SearchEngineSpecifics::set_image_url_post_params(const ::std::string& value) {
  set_has_image_url_post_params();
  if (image_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    image_url_post_params_ = new ::std::string;
  }
  image_url_post_params_->assign(value);
}
inline void SearchEngineSpecifics::set_image_url_post_params(const char* value) {
  set_has_image_url_post_params();
  if (image_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    image_url_post_params_ = new ::std::string;
  }
  image_url_post_params_->assign(value);
}
inline void SearchEngineSpecifics::set_image_url_post_params(const char* value, size_t size) {
  set_has_image_url_post_params();
  if (image_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    image_url_post_params_ = new ::std::string;
  }
  image_url_post_params_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_image_url_post_params() {
  set_has_image_url_post_params();
  if (image_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    image_url_post_params_ = new ::std::string;
  }
  return image_url_post_params_;
}
inline ::std::string* SearchEngineSpecifics::release_image_url_post_params() {
  clear_has_image_url_post_params();
  if (image_url_post_params_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = image_url_post_params_;
    image_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_image_url_post_params(::std::string* image_url_post_params) {
  if (image_url_post_params_ != &::google::protobuf::internal::GetEmptyString()) {
    delete image_url_post_params_;
  }
  if (image_url_post_params) {
    set_has_image_url_post_params();
    image_url_post_params_ = image_url_post_params;
  } else {
    clear_has_image_url_post_params();
    image_url_post_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string new_tab_url = 26;
inline bool SearchEngineSpecifics::has_new_tab_url() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SearchEngineSpecifics::set_has_new_tab_url() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SearchEngineSpecifics::clear_has_new_tab_url() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SearchEngineSpecifics::clear_new_tab_url() {
  if (new_tab_url_ != &::google::protobuf::internal::GetEmptyString()) {
    new_tab_url_->clear();
  }
  clear_has_new_tab_url();
}
inline const ::std::string& SearchEngineSpecifics::new_tab_url() const {
  return *new_tab_url_;
}
inline void SearchEngineSpecifics::set_new_tab_url(const ::std::string& value) {
  set_has_new_tab_url();
  if (new_tab_url_ == &::google::protobuf::internal::GetEmptyString()) {
    new_tab_url_ = new ::std::string;
  }
  new_tab_url_->assign(value);
}
inline void SearchEngineSpecifics::set_new_tab_url(const char* value) {
  set_has_new_tab_url();
  if (new_tab_url_ == &::google::protobuf::internal::GetEmptyString()) {
    new_tab_url_ = new ::std::string;
  }
  new_tab_url_->assign(value);
}
inline void SearchEngineSpecifics::set_new_tab_url(const char* value, size_t size) {
  set_has_new_tab_url();
  if (new_tab_url_ == &::google::protobuf::internal::GetEmptyString()) {
    new_tab_url_ = new ::std::string;
  }
  new_tab_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchEngineSpecifics::mutable_new_tab_url() {
  set_has_new_tab_url();
  if (new_tab_url_ == &::google::protobuf::internal::GetEmptyString()) {
    new_tab_url_ = new ::std::string;
  }
  return new_tab_url_;
}
inline ::std::string* SearchEngineSpecifics::release_new_tab_url() {
  clear_has_new_tab_url();
  if (new_tab_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = new_tab_url_;
    new_tab_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SearchEngineSpecifics::set_allocated_new_tab_url(::std::string* new_tab_url) {
  if (new_tab_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete new_tab_url_;
  }
  if (new_tab_url) {
    set_has_new_tab_url();
    new_tab_url_ = new_tab_url;
  } else {
    clear_has_new_tab_url();
    new_tab_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_search_5fengine_5fspecifics_2eproto__INCLUDED
