// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "session_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_session_5fspecifics_2eproto() {
  delete SessionSpecifics::default_instance_;
  delete SessionHeader::default_instance_;
  delete SessionWindow::default_instance_;
  delete SessionTab::default_instance_;
  delete TabNavigation::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_session_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_session_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sync_pb::protobuf_AddDesc_sync_5fenums_2eproto();
  SessionSpecifics::default_instance_ = new SessionSpecifics();
  SessionHeader::default_instance_ = new SessionHeader();
  SessionWindow::default_instance_ = new SessionWindow();
  SessionTab::default_instance_ = new SessionTab();
  TabNavigation::default_instance_ = new TabNavigation();
  SessionSpecifics::default_instance_->InitAsDefaultInstance();
  SessionHeader::default_instance_->InitAsDefaultInstance();
  SessionWindow::default_instance_->InitAsDefaultInstance();
  SessionTab::default_instance_->InitAsDefaultInstance();
  TabNavigation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_session_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_session_5fspecifics_2eproto_once_);
void protobuf_AddDesc_session_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_session_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_session_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_session_5fspecifics_2eproto {
  StaticDescriptorInitializer_session_5fspecifics_2eproto() {
    protobuf_AddDesc_session_5fspecifics_2eproto();
  }
} static_descriptor_initializer_session_5fspecifics_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SessionSpecifics::kSessionTagFieldNumber;
const int SessionSpecifics::kHeaderFieldNumber;
const int SessionSpecifics::kTabFieldNumber;
const int SessionSpecifics::kTabNodeIdFieldNumber;
#endif  // !_MSC_VER

SessionSpecifics::SessionSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SessionSpecifics::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  header_ = const_cast< ::sync_pb::SessionHeader*>(
      ::sync_pb::SessionHeader::internal_default_instance());
#else
  header_ = const_cast< ::sync_pb::SessionHeader*>(&::sync_pb::SessionHeader::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tab_ = const_cast< ::sync_pb::SessionTab*>(
      ::sync_pb::SessionTab::internal_default_instance());
#else
  tab_ = const_cast< ::sync_pb::SessionTab*>(&::sync_pb::SessionTab::default_instance());
#endif
}

SessionSpecifics::SessionSpecifics(const SessionSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SessionSpecifics::SharedCtor() {
  _cached_size_ = 0;
  session_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  header_ = NULL;
  tab_ = NULL;
  tab_node_id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionSpecifics::~SessionSpecifics() {
  SharedDtor();
}

void SessionSpecifics::SharedDtor() {
  if (session_tag_ != &::google::protobuf::internal::GetEmptyString()) {
    delete session_tag_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete header_;
    delete tab_;
  }
}

void SessionSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionSpecifics& SessionSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_session_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

SessionSpecifics* SessionSpecifics::default_instance_ = NULL;

SessionSpecifics* SessionSpecifics::New() const {
  return new SessionSpecifics;
}

void SessionSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_tag()) {
      if (session_tag_ != &::google::protobuf::internal::GetEmptyString()) {
        session_tag_->clear();
      }
    }
    if (has_header()) {
      if (header_ != NULL) header_->::sync_pb::SessionHeader::Clear();
    }
    if (has_tab()) {
      if (tab_ != NULL) tab_->::sync_pb::SessionTab::Clear();
    }
    tab_node_id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .sync_pb.SessionHeader header = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tab;
        break;
      }

      // optional .sync_pb.SessionTab tab = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tab()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tab_node_id;
        break;
      }

      // optional int32 tab_node_id = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tab_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_node_id_)));
          set_has_tab_node_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string session_tag = 1;
  if (has_session_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->session_tag(), output);
  }

  // optional .sync_pb.SessionHeader header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->header(), output);
  }

  // optional .sync_pb.SessionTab tab = 3;
  if (has_tab()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->tab(), output);
  }

  // optional int32 tab_node_id = 4 [default = -1];
  if (has_tab_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tab_node_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SessionSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string session_tag = 1;
    if (has_session_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_tag());
    }

    // optional .sync_pb.SessionHeader header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .sync_pb.SessionTab tab = 3;
    if (has_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tab());
    }

    // optional int32 tab_node_id = 4 [default = -1];
    if (has_tab_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_node_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionSpecifics*>(&from));
}

void SessionSpecifics::MergeFrom(const SessionSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_tag()) {
      set_session_tag(from.session_tag());
    }
    if (from.has_header()) {
      mutable_header()->::sync_pb::SessionHeader::MergeFrom(from.header());
    }
    if (from.has_tab()) {
      mutable_tab()->::sync_pb::SessionTab::MergeFrom(from.tab());
    }
    if (from.has_tab_node_id()) {
      set_tab_node_id(from.tab_node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionSpecifics::CopyFrom(const SessionSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSpecifics::IsInitialized() const {

  return true;
}

void SessionSpecifics::Swap(SessionSpecifics* other) {
  if (other != this) {
    std::swap(session_tag_, other->session_tag_);
    std::swap(header_, other->header_);
    std::swap(tab_, other->tab_);
    std::swap(tab_node_id_, other->tab_node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SessionSpecifics::GetTypeName() const {
  return "sync_pb.SessionSpecifics";
}


// ===================================================================

#ifndef _MSC_VER
const int SessionHeader::kWindowFieldNumber;
const int SessionHeader::kClientNameFieldNumber;
const int SessionHeader::kDeviceTypeFieldNumber;
#endif  // !_MSC_VER

SessionHeader::SessionHeader()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SessionHeader::InitAsDefaultInstance() {
}

SessionHeader::SessionHeader(const SessionHeader& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SessionHeader::SharedCtor() {
  _cached_size_ = 0;
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  device_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionHeader::~SessionHeader() {
  SharedDtor();
}

void SessionHeader::SharedDtor() {
  if (client_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete client_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SessionHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionHeader& SessionHeader::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_session_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

SessionHeader* SessionHeader::default_instance_ = NULL;

SessionHeader* SessionHeader::New() const {
  return new SessionHeader;
}

void SessionHeader::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_client_name()) {
      if (client_name_ != &::google::protobuf::internal::GetEmptyString()) {
        client_name_->clear();
      }
    }
    device_type_ = 1;
  }
  window_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.SessionWindow window = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_window:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_window()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_window;
        if (input->ExpectTag(26)) goto parse_client_name;
        break;
      }

      // optional string client_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_device_type;
        break;
      }

      // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::sync_pb::SyncEnums_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sync_pb.SessionWindow window = 2;
  for (int i = 0; i < this->window_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->window(i), output);
  }

  // optional string client_name = 3;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->client_name(), output);
  }

  // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->device_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SessionHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string client_name = 3;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

  }
  // repeated .sync_pb.SessionWindow window = 2;
  total_size += 1 * this->window_size();
  for (int i = 0; i < this->window_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->window(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionHeader*>(&from));
}

void SessionHeader::MergeFrom(const SessionHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  window_.MergeFrom(from.window_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionHeader::CopyFrom(const SessionHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionHeader::IsInitialized() const {

  return true;
}

void SessionHeader::Swap(SessionHeader* other) {
  if (other != this) {
    window_.Swap(&other->window_);
    std::swap(client_name_, other->client_name_);
    std::swap(device_type_, other->device_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SessionHeader::GetTypeName() const {
  return "sync_pb.SessionHeader";
}


// ===================================================================

bool SessionWindow_BrowserType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SessionWindow_BrowserType SessionWindow::TYPE_TABBED;
const SessionWindow_BrowserType SessionWindow::TYPE_POPUP;
const SessionWindow_BrowserType SessionWindow::BrowserType_MIN;
const SessionWindow_BrowserType SessionWindow::BrowserType_MAX;
const int SessionWindow::BrowserType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SessionWindow::kWindowIdFieldNumber;
const int SessionWindow::kSelectedTabIndexFieldNumber;
const int SessionWindow::kBrowserTypeFieldNumber;
const int SessionWindow::kTabFieldNumber;
#endif  // !_MSC_VER

SessionWindow::SessionWindow()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SessionWindow::InitAsDefaultInstance() {
}

SessionWindow::SessionWindow(const SessionWindow& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SessionWindow::SharedCtor() {
  _cached_size_ = 0;
  window_id_ = 0;
  selected_tab_index_ = -1;
  browser_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionWindow::~SessionWindow() {
  SharedDtor();
}

void SessionWindow::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SessionWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionWindow& SessionWindow::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_session_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

SessionWindow* SessionWindow::default_instance_ = NULL;

SessionWindow* SessionWindow::New() const {
  return new SessionWindow;
}

void SessionWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    window_id_ = 0;
    selected_tab_index_ = -1;
    browser_type_ = 1;
  }
  tab_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 window_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_id_)));
          set_has_window_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_selected_tab_index;
        break;
      }

      // optional int32 selected_tab_index = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selected_tab_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selected_tab_index_)));
          set_has_selected_tab_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_browser_type;
        break;
      }

      // optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_browser_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SessionWindow_BrowserType_IsValid(value)) {
            set_browser_type(static_cast< ::sync_pb::SessionWindow_BrowserType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tab;
        break;
      }

      // repeated int32 tab = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tab:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_tab())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tab())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tab;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 window_id = 1;
  if (has_window_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->window_id(), output);
  }

  // optional int32 selected_tab_index = 2 [default = -1];
  if (has_selected_tab_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selected_tab_index(), output);
  }

  // optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
  if (has_browser_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->browser_type(), output);
  }

  // repeated int32 tab = 4;
  for (int i = 0; i < this->tab_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->tab(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SessionWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 window_id = 1;
    if (has_window_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_id());
    }

    // optional int32 selected_tab_index = 2 [default = -1];
    if (has_selected_tab_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selected_tab_index());
    }

    // optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
    if (has_browser_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->browser_type());
    }

  }
  // repeated int32 tab = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->tab_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tab(i));
    }
    total_size += 1 * this->tab_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionWindow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionWindow*>(&from));
}

void SessionWindow::MergeFrom(const SessionWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  tab_.MergeFrom(from.tab_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_window_id()) {
      set_window_id(from.window_id());
    }
    if (from.has_selected_tab_index()) {
      set_selected_tab_index(from.selected_tab_index());
    }
    if (from.has_browser_type()) {
      set_browser_type(from.browser_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionWindow::CopyFrom(const SessionWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionWindow::IsInitialized() const {

  return true;
}

void SessionWindow::Swap(SessionWindow* other) {
  if (other != this) {
    std::swap(window_id_, other->window_id_);
    std::swap(selected_tab_index_, other->selected_tab_index_);
    std::swap(browser_type_, other->browser_type_);
    tab_.Swap(&other->tab_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SessionWindow::GetTypeName() const {
  return "sync_pb.SessionWindow";
}


// ===================================================================

bool SessionTab_FaviconType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SessionTab_FaviconType SessionTab::TYPE_WEB_FAVICON;
const SessionTab_FaviconType SessionTab::FaviconType_MIN;
const SessionTab_FaviconType SessionTab::FaviconType_MAX;
const int SessionTab::FaviconType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SessionTab::kTabIdFieldNumber;
const int SessionTab::kWindowIdFieldNumber;
const int SessionTab::kTabVisualIndexFieldNumber;
const int SessionTab::kCurrentNavigationIndexFieldNumber;
const int SessionTab::kPinnedFieldNumber;
const int SessionTab::kExtensionAppIdFieldNumber;
const int SessionTab::kNavigationFieldNumber;
const int SessionTab::kFaviconFieldNumber;
const int SessionTab::kFaviconTypeFieldNumber;
const int SessionTab::kFaviconSourceFieldNumber;
#endif  // !_MSC_VER

SessionTab::SessionTab()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SessionTab::InitAsDefaultInstance() {
}

SessionTab::SessionTab(const SessionTab& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SessionTab::SharedCtor() {
  _cached_size_ = 0;
  tab_id_ = 0;
  window_id_ = 0;
  tab_visual_index_ = -1;
  current_navigation_index_ = -1;
  pinned_ = false;
  extension_app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  favicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  favicon_type_ = 1;
  favicon_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionTab::~SessionTab() {
  SharedDtor();
}

void SessionTab::SharedDtor() {
  if (extension_app_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete extension_app_id_;
  }
  if (favicon_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_;
  }
  if (favicon_source_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_source_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SessionTab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionTab& SessionTab::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_session_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

SessionTab* SessionTab::default_instance_ = NULL;

SessionTab* SessionTab::New() const {
  return new SessionTab;
}

void SessionTab::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tab_id_ = 0;
    window_id_ = 0;
    tab_visual_index_ = -1;
    current_navigation_index_ = -1;
    pinned_ = false;
    if (has_extension_app_id()) {
      if (extension_app_id_ != &::google::protobuf::internal::GetEmptyString()) {
        extension_app_id_->clear();
      }
    }
    if (has_favicon()) {
      if (favicon_ != &::google::protobuf::internal::GetEmptyString()) {
        favicon_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    favicon_type_ = 1;
    if (has_favicon_source()) {
      if (favicon_source_ != &::google::protobuf::internal::GetEmptyString()) {
        favicon_source_->clear();
      }
    }
  }
  navigation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionTab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tab_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_id_)));
          set_has_tab_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_window_id;
        break;
      }

      // optional int32 window_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_window_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_id_)));
          set_has_window_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tab_visual_index;
        break;
      }

      // optional int32 tab_visual_index = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tab_visual_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_visual_index_)));
          set_has_tab_visual_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current_navigation_index;
        break;
      }

      // optional int32 current_navigation_index = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_navigation_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_navigation_index_)));
          set_has_current_navigation_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pinned;
        break;
      }

      // optional bool pinned = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pinned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pinned_)));
          set_has_pinned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_extension_app_id;
        break;
      }

      // optional string extension_app_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extension_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_app_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_navigation;
        break;
      }

      // repeated .sync_pb.TabNavigation navigation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_navigation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_navigation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_navigation;
        if (input->ExpectTag(66)) goto parse_favicon;
        break;
      }

      // optional bytes favicon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_favicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_favicon_type;
        break;
      }

      // optional .sync_pb.SessionTab.FaviconType favicon_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_favicon_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SessionTab_FaviconType_IsValid(value)) {
            set_favicon_type(static_cast< ::sync_pb::SessionTab_FaviconType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_favicon_source;
        break;
      }

      // optional string favicon_source = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionTab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tab_id = 1;
  if (has_tab_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tab_id(), output);
  }

  // optional int32 window_id = 2;
  if (has_window_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->window_id(), output);
  }

  // optional int32 tab_visual_index = 3 [default = -1];
  if (has_tab_visual_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tab_visual_index(), output);
  }

  // optional int32 current_navigation_index = 4 [default = -1];
  if (has_current_navigation_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_navigation_index(), output);
  }

  // optional bool pinned = 5 [default = false];
  if (has_pinned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pinned(), output);
  }

  // optional string extension_app_id = 6;
  if (has_extension_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->extension_app_id(), output);
  }

  // repeated .sync_pb.TabNavigation navigation = 7;
  for (int i = 0; i < this->navigation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->navigation(i), output);
  }

  // optional bytes favicon = 8;
  if (has_favicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->favicon(), output);
  }

  // optional .sync_pb.SessionTab.FaviconType favicon_type = 9;
  if (has_favicon_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->favicon_type(), output);
  }

  // optional string favicon_source = 11;
  if (has_favicon_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->favicon_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SessionTab::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tab_id = 1;
    if (has_tab_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_id());
    }

    // optional int32 window_id = 2;
    if (has_window_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_id());
    }

    // optional int32 tab_visual_index = 3 [default = -1];
    if (has_tab_visual_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_visual_index());
    }

    // optional int32 current_navigation_index = 4 [default = -1];
    if (has_current_navigation_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_navigation_index());
    }

    // optional bool pinned = 5 [default = false];
    if (has_pinned()) {
      total_size += 1 + 1;
    }

    // optional string extension_app_id = 6;
    if (has_extension_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension_app_id());
    }

    // optional bytes favicon = 8;
    if (has_favicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->favicon());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .sync_pb.SessionTab.FaviconType favicon_type = 9;
    if (has_favicon_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->favicon_type());
    }

    // optional string favicon_source = 11;
    if (has_favicon_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon_source());
    }

  }
  // repeated .sync_pb.TabNavigation navigation = 7;
  total_size += 1 * this->navigation_size();
  for (int i = 0; i < this->navigation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->navigation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionTab::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionTab*>(&from));
}

void SessionTab::MergeFrom(const SessionTab& from) {
  GOOGLE_CHECK_NE(&from, this);
  navigation_.MergeFrom(from.navigation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tab_id()) {
      set_tab_id(from.tab_id());
    }
    if (from.has_window_id()) {
      set_window_id(from.window_id());
    }
    if (from.has_tab_visual_index()) {
      set_tab_visual_index(from.tab_visual_index());
    }
    if (from.has_current_navigation_index()) {
      set_current_navigation_index(from.current_navigation_index());
    }
    if (from.has_pinned()) {
      set_pinned(from.pinned());
    }
    if (from.has_extension_app_id()) {
      set_extension_app_id(from.extension_app_id());
    }
    if (from.has_favicon()) {
      set_favicon(from.favicon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_favicon_type()) {
      set_favicon_type(from.favicon_type());
    }
    if (from.has_favicon_source()) {
      set_favicon_source(from.favicon_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionTab::CopyFrom(const SessionTab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionTab::IsInitialized() const {

  return true;
}

void SessionTab::Swap(SessionTab* other) {
  if (other != this) {
    std::swap(tab_id_, other->tab_id_);
    std::swap(window_id_, other->window_id_);
    std::swap(tab_visual_index_, other->tab_visual_index_);
    std::swap(current_navigation_index_, other->current_navigation_index_);
    std::swap(pinned_, other->pinned_);
    std::swap(extension_app_id_, other->extension_app_id_);
    navigation_.Swap(&other->navigation_);
    std::swap(favicon_, other->favicon_);
    std::swap(favicon_type_, other->favicon_type_);
    std::swap(favicon_source_, other->favicon_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SessionTab::GetTypeName() const {
  return "sync_pb.SessionTab";
}


// ===================================================================

bool TabNavigation_BlockedState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TabNavigation_BlockedState TabNavigation::STATE_ALLOWED;
const TabNavigation_BlockedState TabNavigation::STATE_BLOCKED;
const TabNavigation_BlockedState TabNavigation::BlockedState_MIN;
const TabNavigation_BlockedState TabNavigation::BlockedState_MAX;
const int TabNavigation::BlockedState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TabNavigation::kVirtualUrlFieldNumber;
const int TabNavigation::kReferrerFieldNumber;
const int TabNavigation::kTitleFieldNumber;
const int TabNavigation::kStateFieldNumber;
const int TabNavigation::kPageTransitionFieldNumber;
const int TabNavigation::kRedirectTypeFieldNumber;
const int TabNavigation::kUniqueIdFieldNumber;
const int TabNavigation::kTimestampMsecFieldNumber;
const int TabNavigation::kNavigationForwardBackFieldNumber;
const int TabNavigation::kNavigationFromAddressBarFieldNumber;
const int TabNavigation::kNavigationHomePageFieldNumber;
const int TabNavigation::kNavigationChainStartFieldNumber;
const int TabNavigation::kNavigationChainEndFieldNumber;
const int TabNavigation::kGlobalIdFieldNumber;
const int TabNavigation::kSearchTermsFieldNumber;
const int TabNavigation::kFaviconUrlFieldNumber;
const int TabNavigation::kBlockedStateFieldNumber;
const int TabNavigation::kContentPackCategoriesFieldNumber;
const int TabNavigation::kHttpStatusCodeFieldNumber;
const int TabNavigation::kReferrerPolicyFieldNumber;
const int TabNavigation::kIsRestoredFieldNumber;
#endif  // !_MSC_VER

TabNavigation::TabNavigation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TabNavigation::InitAsDefaultInstance() {
}

TabNavigation::TabNavigation(const TabNavigation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TabNavigation::SharedCtor() {
  _cached_size_ = 0;
  virtual_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  referrer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  page_transition_ = 1;
  redirect_type_ = 1;
  unique_id_ = 0;
  timestamp_msec_ = GOOGLE_LONGLONG(0);
  navigation_forward_back_ = false;
  navigation_from_address_bar_ = false;
  navigation_home_page_ = false;
  navigation_chain_start_ = false;
  navigation_chain_end_ = false;
  global_id_ = GOOGLE_LONGLONG(0);
  search_terms_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  favicon_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  blocked_state_ = 1;
  http_status_code_ = 0;
  referrer_policy_ = 1;
  is_restored_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TabNavigation::~TabNavigation() {
  SharedDtor();
}

void TabNavigation::SharedDtor() {
  if (virtual_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete virtual_url_;
  }
  if (referrer_ != &::google::protobuf::internal::GetEmptyString()) {
    delete referrer_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (state_ != &::google::protobuf::internal::GetEmptyString()) {
    delete state_;
  }
  if (search_terms_ != &::google::protobuf::internal::GetEmptyString()) {
    delete search_terms_;
  }
  if (favicon_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete favicon_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TabNavigation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TabNavigation& TabNavigation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_session_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_session_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

TabNavigation* TabNavigation::default_instance_ = NULL;

TabNavigation* TabNavigation::New() const {
  return new TabNavigation;
}

void TabNavigation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_virtual_url()) {
      if (virtual_url_ != &::google::protobuf::internal::GetEmptyString()) {
        virtual_url_->clear();
      }
    }
    if (has_referrer()) {
      if (referrer_ != &::google::protobuf::internal::GetEmptyString()) {
        referrer_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyString()) {
        title_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyString()) {
        state_->clear();
      }
    }
    page_transition_ = 1;
    redirect_type_ = 1;
    unique_id_ = 0;
    timestamp_msec_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    navigation_forward_back_ = false;
    navigation_from_address_bar_ = false;
    navigation_home_page_ = false;
    navigation_chain_start_ = false;
    navigation_chain_end_ = false;
    global_id_ = GOOGLE_LONGLONG(0);
    if (has_search_terms()) {
      if (search_terms_ != &::google::protobuf::internal::GetEmptyString()) {
        search_terms_->clear();
      }
    }
    if (has_favicon_url()) {
      if (favicon_url_ != &::google::protobuf::internal::GetEmptyString()) {
        favicon_url_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    blocked_state_ = 1;
    http_status_code_ = 0;
    referrer_policy_ = 1;
    is_restored_ = false;
  }
  content_pack_categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TabNavigation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtual_url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_referrer;
        break;
      }

      // optional string referrer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_referrer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referrer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_state;
        break;
      }

      // optional string state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_page_transition;
        break;
      }

      // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = TYPED];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_transition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_PageTransition_IsValid(value)) {
            set_page_transition(static_cast< ::sync_pb::SyncEnums_PageTransition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_redirect_type;
        break;
      }

      // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redirect_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_PageTransitionRedirectType_IsValid(value)) {
            set_redirect_type(static_cast< ::sync_pb::SyncEnums_PageTransitionRedirectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_unique_id;
        break;
      }

      // optional int32 unique_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_timestamp_msec;
        break;
      }

      // optional int64 timestamp_msec = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_msec_)));
          set_has_timestamp_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_navigation_forward_back;
        break;
      }

      // optional bool navigation_forward_back = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_navigation_forward_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_forward_back_)));
          set_has_navigation_forward_back();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_navigation_from_address_bar;
        break;
      }

      // optional bool navigation_from_address_bar = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_navigation_from_address_bar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_from_address_bar_)));
          set_has_navigation_from_address_bar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_navigation_home_page;
        break;
      }

      // optional bool navigation_home_page = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_navigation_home_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_home_page_)));
          set_has_navigation_home_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_navigation_chain_start;
        break;
      }

      // optional bool navigation_chain_start = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_navigation_chain_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_chain_start_)));
          set_has_navigation_chain_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_navigation_chain_end;
        break;
      }

      // optional bool navigation_chain_end = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_navigation_chain_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_chain_end_)));
          set_has_navigation_chain_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_global_id;
        break;
      }

      // optional int64 global_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_global_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &global_id_)));
          set_has_global_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_search_terms;
        break;
      }

      // optional string search_terms = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_terms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_favicon_url;
        break;
      }

      // optional string favicon_url = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_blocked_state;
        break;
      }

      // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocked_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::TabNavigation_BlockedState_IsValid(value)) {
            set_blocked_state(static_cast< ::sync_pb::TabNavigation_BlockedState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_content_pack_categories;
        break;
      }

      // repeated string content_pack_categories = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_pack_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_content_pack_categories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_content_pack_categories;
        if (input->ExpectTag(160)) goto parse_http_status_code;
        break;
      }

      // optional int32 http_status_code = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_http_status_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_status_code_)));
          set_has_http_status_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_referrer_policy;
        break;
      }

      // optional int32 referrer_policy = 21 [default = 1];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referrer_policy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &referrer_policy_)));
          set_has_referrer_policy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_is_restored;
        break;
      }

      // optional bool is_restored = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_restored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_restored_)));
          set_has_is_restored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TabNavigation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string virtual_url = 2;
  if (has_virtual_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->virtual_url(), output);
  }

  // optional string referrer = 3;
  if (has_referrer()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->referrer(), output);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }

  // optional string state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->state(), output);
  }

  // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = TYPED];
  if (has_page_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->page_transition(), output);
  }

  // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
  if (has_redirect_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->redirect_type(), output);
  }

  // optional int32 unique_id = 8;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->unique_id(), output);
  }

  // optional int64 timestamp_msec = 9;
  if (has_timestamp_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->timestamp_msec(), output);
  }

  // optional bool navigation_forward_back = 10;
  if (has_navigation_forward_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->navigation_forward_back(), output);
  }

  // optional bool navigation_from_address_bar = 11;
  if (has_navigation_from_address_bar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->navigation_from_address_bar(), output);
  }

  // optional bool navigation_home_page = 12;
  if (has_navigation_home_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->navigation_home_page(), output);
  }

  // optional bool navigation_chain_start = 13;
  if (has_navigation_chain_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->navigation_chain_start(), output);
  }

  // optional bool navigation_chain_end = 14;
  if (has_navigation_chain_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->navigation_chain_end(), output);
  }

  // optional int64 global_id = 15;
  if (has_global_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->global_id(), output);
  }

  // optional string search_terms = 16;
  if (has_search_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->search_terms(), output);
  }

  // optional string favicon_url = 17;
  if (has_favicon_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->favicon_url(), output);
  }

  // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
  if (has_blocked_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->blocked_state(), output);
  }

  // repeated string content_pack_categories = 19;
  for (int i = 0; i < this->content_pack_categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->content_pack_categories(i), output);
  }

  // optional int32 http_status_code = 20;
  if (has_http_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->http_status_code(), output);
  }

  // optional int32 referrer_policy = 21 [default = 1];
  if (has_referrer_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->referrer_policy(), output);
  }

  // optional bool is_restored = 22;
  if (has_is_restored()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_restored(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int TabNavigation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string virtual_url = 2;
    if (has_virtual_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->virtual_url());
    }

    // optional string referrer = 3;
    if (has_referrer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referrer());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = TYPED];
    if (has_page_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->page_transition());
    }

    // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
    if (has_redirect_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->redirect_type());
    }

    // optional int32 unique_id = 8;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unique_id());
    }

    // optional int64 timestamp_msec = 9;
    if (has_timestamp_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_msec());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool navigation_forward_back = 10;
    if (has_navigation_forward_back()) {
      total_size += 1 + 1;
    }

    // optional bool navigation_from_address_bar = 11;
    if (has_navigation_from_address_bar()) {
      total_size += 1 + 1;
    }

    // optional bool navigation_home_page = 12;
    if (has_navigation_home_page()) {
      total_size += 1 + 1;
    }

    // optional bool navigation_chain_start = 13;
    if (has_navigation_chain_start()) {
      total_size += 1 + 1;
    }

    // optional bool navigation_chain_end = 14;
    if (has_navigation_chain_end()) {
      total_size += 1 + 1;
    }

    // optional int64 global_id = 15;
    if (has_global_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->global_id());
    }

    // optional string search_terms = 16;
    if (has_search_terms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_terms());
    }

    // optional string favicon_url = 17;
    if (has_favicon_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon_url());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
    if (has_blocked_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blocked_state());
    }

    // optional int32 http_status_code = 20;
    if (has_http_status_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->http_status_code());
    }

    // optional int32 referrer_policy = 21 [default = 1];
    if (has_referrer_policy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->referrer_policy());
    }

    // optional bool is_restored = 22;
    if (has_is_restored()) {
      total_size += 2 + 1;
    }

  }
  // repeated string content_pack_categories = 19;
  total_size += 2 * this->content_pack_categories_size();
  for (int i = 0; i < this->content_pack_categories_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->content_pack_categories(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TabNavigation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TabNavigation*>(&from));
}

void TabNavigation::MergeFrom(const TabNavigation& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_pack_categories_.MergeFrom(from.content_pack_categories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_virtual_url()) {
      set_virtual_url(from.virtual_url());
    }
    if (from.has_referrer()) {
      set_referrer(from.referrer());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_page_transition()) {
      set_page_transition(from.page_transition());
    }
    if (from.has_redirect_type()) {
      set_redirect_type(from.redirect_type());
    }
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
    if (from.has_timestamp_msec()) {
      set_timestamp_msec(from.timestamp_msec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_navigation_forward_back()) {
      set_navigation_forward_back(from.navigation_forward_back());
    }
    if (from.has_navigation_from_address_bar()) {
      set_navigation_from_address_bar(from.navigation_from_address_bar());
    }
    if (from.has_navigation_home_page()) {
      set_navigation_home_page(from.navigation_home_page());
    }
    if (from.has_navigation_chain_start()) {
      set_navigation_chain_start(from.navigation_chain_start());
    }
    if (from.has_navigation_chain_end()) {
      set_navigation_chain_end(from.navigation_chain_end());
    }
    if (from.has_global_id()) {
      set_global_id(from.global_id());
    }
    if (from.has_search_terms()) {
      set_search_terms(from.search_terms());
    }
    if (from.has_favicon_url()) {
      set_favicon_url(from.favicon_url());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_blocked_state()) {
      set_blocked_state(from.blocked_state());
    }
    if (from.has_http_status_code()) {
      set_http_status_code(from.http_status_code());
    }
    if (from.has_referrer_policy()) {
      set_referrer_policy(from.referrer_policy());
    }
    if (from.has_is_restored()) {
      set_is_restored(from.is_restored());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TabNavigation::CopyFrom(const TabNavigation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabNavigation::IsInitialized() const {

  return true;
}

void TabNavigation::Swap(TabNavigation* other) {
  if (other != this) {
    std::swap(virtual_url_, other->virtual_url_);
    std::swap(referrer_, other->referrer_);
    std::swap(title_, other->title_);
    std::swap(state_, other->state_);
    std::swap(page_transition_, other->page_transition_);
    std::swap(redirect_type_, other->redirect_type_);
    std::swap(unique_id_, other->unique_id_);
    std::swap(timestamp_msec_, other->timestamp_msec_);
    std::swap(navigation_forward_back_, other->navigation_forward_back_);
    std::swap(navigation_from_address_bar_, other->navigation_from_address_bar_);
    std::swap(navigation_home_page_, other->navigation_home_page_);
    std::swap(navigation_chain_start_, other->navigation_chain_start_);
    std::swap(navigation_chain_end_, other->navigation_chain_end_);
    std::swap(global_id_, other->global_id_);
    std::swap(search_terms_, other->search_terms_);
    std::swap(favicon_url_, other->favicon_url_);
    std::swap(blocked_state_, other->blocked_state_);
    content_pack_categories_.Swap(&other->content_pack_categories_);
    std::swap(http_status_code_, other->http_status_code_);
    std::swap(referrer_policy_, other->referrer_policy_);
    std::swap(is_restored_, other->is_restored_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TabNavigation::GetTypeName() const {
  return "sync_pb.TabNavigation";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
