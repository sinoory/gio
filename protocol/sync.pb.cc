// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_sync_2eproto() {
  delete ProfilingData::default_instance_;
  delete EntitySpecifics::default_instance_;
  delete SyncEntity::default_instance_;
  delete SyncEntity_BookmarkData::default_instance_;
  delete ChromiumExtensionsActivity::default_instance_;
  delete ClientConfigParams::default_instance_;
  delete CommitMessage::default_instance_;
  delete GetUpdateTriggers::default_instance_;
  delete GarbageCollectionDirective::default_instance_;
  delete DataTypeProgressMarker::default_instance_;
  delete GetUpdatesMessage::default_instance_;
  delete AuthenticateMessage::default_instance_;
  delete ClearUserDataMessage::default_instance_;
  delete ClearUserDataResponse::default_instance_;
  delete ChipBag::default_instance_;
  delete ClientStatus::default_instance_;
  delete ClientToServerMessage::default_instance_;
  delete GetCrashInfoRequest::default_instance_;
  delete GetCrashInfoResponse::default_instance_;
  delete CommitResponse::default_instance_;
  delete CommitResponse_EntryResponse::default_instance_;
  delete GetUpdatesResponse::default_instance_;
  delete GetUpdatesMetadataResponse::default_instance_;
  delete GetUpdatesStreamingResponse::default_instance_;
  delete UserIdentification::default_instance_;
  delete AuthenticateResponse::default_instance_;
  delete ThrottleParameters::default_instance_;
  delete ClientToServerResponse::default_instance_;
  delete ClientToServerResponse_Error::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_sync_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_sync_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sync_pb::protobuf_AddDesc_app_5flist_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_app_5fnotification_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_app_5fsetting_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_app_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_article_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_autofill_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_bookmark_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_client_5fcommands_2eproto();
  ::sync_pb::protobuf_AddDesc_client_5fdebug_5finfo_2eproto();
  ::sync_pb::protobuf_AddDesc_device_5finfo_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_dictionary_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_encryption_2eproto();
  ::sync_pb::protobuf_AddDesc_experiments_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_extension_5fsetting_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_extension_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_favicon_5fimage_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_favicon_5ftracking_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_get_5fupdates_5fcaller_5finfo_2eproto();
  ::sync_pb::protobuf_AddDesc_history_5fdelete_5fdirective_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_nigori_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_managed_5fuser_5fsetting_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_managed_5fuser_5fshared_5fsetting_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_managed_5fuser_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_password_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_preference_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_priority_5fpreference_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_search_5fengine_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_session_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_sync_5fenums_2eproto();
  ::sync_pb::protobuf_AddDesc_synced_5fnotification_5fapp_5finfo_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_synced_5fnotification_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_theme_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_typed_5furl_5fspecifics_2eproto();
  ::sync_pb::protobuf_AddDesc_unique_5fposition_2eproto();
  ProfilingData::default_instance_ = new ProfilingData();
  EntitySpecifics::default_instance_ = new EntitySpecifics();
  SyncEntity::default_instance_ = new SyncEntity();
  SyncEntity_BookmarkData::default_instance_ = new SyncEntity_BookmarkData();
  ChromiumExtensionsActivity::default_instance_ = new ChromiumExtensionsActivity();
  ClientConfigParams::default_instance_ = new ClientConfigParams();
  CommitMessage::default_instance_ = new CommitMessage();
  GetUpdateTriggers::default_instance_ = new GetUpdateTriggers();
  GarbageCollectionDirective::default_instance_ = new GarbageCollectionDirective();
  DataTypeProgressMarker::default_instance_ = new DataTypeProgressMarker();
  GetUpdatesMessage::default_instance_ = new GetUpdatesMessage();
  AuthenticateMessage::default_instance_ = new AuthenticateMessage();
  ClearUserDataMessage::default_instance_ = new ClearUserDataMessage();
  ClearUserDataResponse::default_instance_ = new ClearUserDataResponse();
  ChipBag::default_instance_ = new ChipBag();
  ClientStatus::default_instance_ = new ClientStatus();
  ClientToServerMessage::default_instance_ = new ClientToServerMessage();
  GetCrashInfoRequest::default_instance_ = new GetCrashInfoRequest();
  GetCrashInfoResponse::default_instance_ = new GetCrashInfoResponse();
  CommitResponse::default_instance_ = new CommitResponse();
  CommitResponse_EntryResponse::default_instance_ = new CommitResponse_EntryResponse();
  GetUpdatesResponse::default_instance_ = new GetUpdatesResponse();
  GetUpdatesMetadataResponse::default_instance_ = new GetUpdatesMetadataResponse();
  GetUpdatesStreamingResponse::default_instance_ = new GetUpdatesStreamingResponse();
  UserIdentification::default_instance_ = new UserIdentification();
  AuthenticateResponse::default_instance_ = new AuthenticateResponse();
  ThrottleParameters::default_instance_ = new ThrottleParameters();
  ClientToServerResponse::default_instance_ = new ClientToServerResponse();
  ClientToServerResponse_Error::default_instance_ = new ClientToServerResponse_Error();
  ProfilingData::default_instance_->InitAsDefaultInstance();
  EntitySpecifics::default_instance_->InitAsDefaultInstance();
  SyncEntity::default_instance_->InitAsDefaultInstance();
  SyncEntity_BookmarkData::default_instance_->InitAsDefaultInstance();
  ChromiumExtensionsActivity::default_instance_->InitAsDefaultInstance();
  ClientConfigParams::default_instance_->InitAsDefaultInstance();
  CommitMessage::default_instance_->InitAsDefaultInstance();
  GetUpdateTriggers::default_instance_->InitAsDefaultInstance();
  GarbageCollectionDirective::default_instance_->InitAsDefaultInstance();
  DataTypeProgressMarker::default_instance_->InitAsDefaultInstance();
  GetUpdatesMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateMessage::default_instance_->InitAsDefaultInstance();
  ClearUserDataMessage::default_instance_->InitAsDefaultInstance();
  ClearUserDataResponse::default_instance_->InitAsDefaultInstance();
  ChipBag::default_instance_->InitAsDefaultInstance();
  ClientStatus::default_instance_->InitAsDefaultInstance();
  ClientToServerMessage::default_instance_->InitAsDefaultInstance();
  GetCrashInfoRequest::default_instance_->InitAsDefaultInstance();
  GetCrashInfoResponse::default_instance_->InitAsDefaultInstance();
  CommitResponse::default_instance_->InitAsDefaultInstance();
  CommitResponse_EntryResponse::default_instance_->InitAsDefaultInstance();
  GetUpdatesResponse::default_instance_->InitAsDefaultInstance();
  GetUpdatesMetadataResponse::default_instance_->InitAsDefaultInstance();
  GetUpdatesStreamingResponse::default_instance_->InitAsDefaultInstance();
  UserIdentification::default_instance_->InitAsDefaultInstance();
  AuthenticateResponse::default_instance_->InitAsDefaultInstance();
  ThrottleParameters::default_instance_->InitAsDefaultInstance();
  ClientToServerResponse::default_instance_->InitAsDefaultInstance();
  ClientToServerResponse_Error::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sync_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sync_2eproto_once_);
void protobuf_AddDesc_sync_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sync_2eproto_once_,
                 &protobuf_AddDesc_sync_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sync_2eproto {
  StaticDescriptorInitializer_sync_2eproto() {
    protobuf_AddDesc_sync_2eproto();
  }
} static_descriptor_initializer_sync_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ProfilingData::kMetaDataWriteTimeFieldNumber;
const int ProfilingData::kFileDataWriteTimeFieldNumber;
const int ProfilingData::kUserLookupTimeFieldNumber;
const int ProfilingData::kMetaDataReadTimeFieldNumber;
const int ProfilingData::kFileDataReadTimeFieldNumber;
const int ProfilingData::kTotalRequestTimeFieldNumber;
#endif  // !_MSC_VER

ProfilingData::ProfilingData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProfilingData::InitAsDefaultInstance() {
}

ProfilingData::ProfilingData(const ProfilingData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProfilingData::SharedCtor() {
  _cached_size_ = 0;
  meta_data_write_time_ = GOOGLE_LONGLONG(0);
  file_data_write_time_ = GOOGLE_LONGLONG(0);
  user_lookup_time_ = GOOGLE_LONGLONG(0);
  meta_data_read_time_ = GOOGLE_LONGLONG(0);
  file_data_read_time_ = GOOGLE_LONGLONG(0);
  total_request_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfilingData::~ProfilingData() {
  SharedDtor();
}

void ProfilingData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ProfilingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProfilingData& ProfilingData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ProfilingData* ProfilingData::default_instance_ = NULL;

ProfilingData* ProfilingData::New() const {
  return new ProfilingData;
}

void ProfilingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    meta_data_write_time_ = GOOGLE_LONGLONG(0);
    file_data_write_time_ = GOOGLE_LONGLONG(0);
    user_lookup_time_ = GOOGLE_LONGLONG(0);
    meta_data_read_time_ = GOOGLE_LONGLONG(0);
    file_data_read_time_ = GOOGLE_LONGLONG(0);
    total_request_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfilingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 meta_data_write_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meta_data_write_time_)));
          set_has_meta_data_write_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_data_write_time;
        break;
      }

      // optional int64 file_data_write_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_data_write_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_data_write_time_)));
          set_has_file_data_write_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_lookup_time;
        break;
      }

      // optional int64 user_lookup_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_lookup_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_lookup_time_)));
          set_has_user_lookup_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_meta_data_read_time;
        break;
      }

      // optional int64 meta_data_read_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_data_read_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meta_data_read_time_)));
          set_has_meta_data_read_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_data_read_time;
        break;
      }

      // optional int64 file_data_read_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_data_read_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_data_read_time_)));
          set_has_file_data_read_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_request_time;
        break;
      }

      // optional int64 total_request_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_request_time_)));
          set_has_total_request_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProfilingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 meta_data_write_time = 1;
  if (has_meta_data_write_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->meta_data_write_time(), output);
  }

  // optional int64 file_data_write_time = 2;
  if (has_file_data_write_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_data_write_time(), output);
  }

  // optional int64 user_lookup_time = 3;
  if (has_user_lookup_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_lookup_time(), output);
  }

  // optional int64 meta_data_read_time = 4;
  if (has_meta_data_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->meta_data_read_time(), output);
  }

  // optional int64 file_data_read_time = 5;
  if (has_file_data_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->file_data_read_time(), output);
  }

  // optional int64 total_request_time = 6;
  if (has_total_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_request_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ProfilingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 meta_data_write_time = 1;
    if (has_meta_data_write_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->meta_data_write_time());
    }

    // optional int64 file_data_write_time = 2;
    if (has_file_data_write_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_data_write_time());
    }

    // optional int64 user_lookup_time = 3;
    if (has_user_lookup_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_lookup_time());
    }

    // optional int64 meta_data_read_time = 4;
    if (has_meta_data_read_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->meta_data_read_time());
    }

    // optional int64 file_data_read_time = 5;
    if (has_file_data_read_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_data_read_time());
    }

    // optional int64 total_request_time = 6;
    if (has_total_request_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_request_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfilingData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProfilingData*>(&from));
}

void ProfilingData::MergeFrom(const ProfilingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meta_data_write_time()) {
      set_meta_data_write_time(from.meta_data_write_time());
    }
    if (from.has_file_data_write_time()) {
      set_file_data_write_time(from.file_data_write_time());
    }
    if (from.has_user_lookup_time()) {
      set_user_lookup_time(from.user_lookup_time());
    }
    if (from.has_meta_data_read_time()) {
      set_meta_data_read_time(from.meta_data_read_time());
    }
    if (from.has_file_data_read_time()) {
      set_file_data_read_time(from.file_data_read_time());
    }
    if (from.has_total_request_time()) {
      set_total_request_time(from.total_request_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfilingData::CopyFrom(const ProfilingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilingData::IsInitialized() const {

  return true;
}

void ProfilingData::Swap(ProfilingData* other) {
  if (other != this) {
    std::swap(meta_data_write_time_, other->meta_data_write_time_);
    std::swap(file_data_write_time_, other->file_data_write_time_);
    std::swap(user_lookup_time_, other->user_lookup_time_);
    std::swap(meta_data_read_time_, other->meta_data_read_time_);
    std::swap(file_data_read_time_, other->file_data_read_time_);
    std::swap(total_request_time_, other->total_request_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProfilingData::GetTypeName() const {
  return "sync_pb.ProfilingData";
}


// ===================================================================

#ifndef _MSC_VER
const int EntitySpecifics::kEncryptedFieldNumber;
const int EntitySpecifics::kAutofillFieldNumber;
const int EntitySpecifics::kBookmarkFieldNumber;
const int EntitySpecifics::kPreferenceFieldNumber;
const int EntitySpecifics::kTypedUrlFieldNumber;
const int EntitySpecifics::kThemeFieldNumber;
const int EntitySpecifics::kAppNotificationFieldNumber;
const int EntitySpecifics::kPasswordFieldNumber;
const int EntitySpecifics::kNigoriFieldNumber;
const int EntitySpecifics::kExtensionFieldNumber;
const int EntitySpecifics::kAppFieldNumber;
const int EntitySpecifics::kSessionFieldNumber;
const int EntitySpecifics::kAutofillProfileFieldNumber;
const int EntitySpecifics::kSearchEngineFieldNumber;
const int EntitySpecifics::kExtensionSettingFieldNumber;
const int EntitySpecifics::kAppSettingFieldNumber;
const int EntitySpecifics::kHistoryDeleteDirectiveFieldNumber;
const int EntitySpecifics::kSyncedNotificationFieldNumber;
const int EntitySpecifics::kSyncedNotificationAppInfoFieldNumber;
const int EntitySpecifics::kDeviceInfoFieldNumber;
const int EntitySpecifics::kExperimentsFieldNumber;
const int EntitySpecifics::kPriorityPreferenceFieldNumber;
const int EntitySpecifics::kDictionaryFieldNumber;
const int EntitySpecifics::kFaviconTrackingFieldNumber;
const int EntitySpecifics::kFaviconImageFieldNumber;
const int EntitySpecifics::kManagedUserSettingFieldNumber;
const int EntitySpecifics::kManagedUserFieldNumber;
const int EntitySpecifics::kManagedUserSharedSettingFieldNumber;
const int EntitySpecifics::kArticleFieldNumber;
const int EntitySpecifics::kAppListFieldNumber;
#endif  // !_MSC_VER

EntitySpecifics::EntitySpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EntitySpecifics::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  encrypted_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
#else
  encrypted_ = const_cast< ::sync_pb::EncryptedData*>(&::sync_pb::EncryptedData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  autofill_ = const_cast< ::sync_pb::AutofillSpecifics*>(
      ::sync_pb::AutofillSpecifics::internal_default_instance());
#else
  autofill_ = const_cast< ::sync_pb::AutofillSpecifics*>(&::sync_pb::AutofillSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bookmark_ = const_cast< ::sync_pb::BookmarkSpecifics*>(
      ::sync_pb::BookmarkSpecifics::internal_default_instance());
#else
  bookmark_ = const_cast< ::sync_pb::BookmarkSpecifics*>(&::sync_pb::BookmarkSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  preference_ = const_cast< ::sync_pb::PreferenceSpecifics*>(
      ::sync_pb::PreferenceSpecifics::internal_default_instance());
#else
  preference_ = const_cast< ::sync_pb::PreferenceSpecifics*>(&::sync_pb::PreferenceSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  typed_url_ = const_cast< ::sync_pb::TypedUrlSpecifics*>(
      ::sync_pb::TypedUrlSpecifics::internal_default_instance());
#else
  typed_url_ = const_cast< ::sync_pb::TypedUrlSpecifics*>(&::sync_pb::TypedUrlSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  theme_ = const_cast< ::sync_pb::ThemeSpecifics*>(
      ::sync_pb::ThemeSpecifics::internal_default_instance());
#else
  theme_ = const_cast< ::sync_pb::ThemeSpecifics*>(&::sync_pb::ThemeSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  app_notification_ = const_cast< ::sync_pb::AppNotification*>(
      ::sync_pb::AppNotification::internal_default_instance());
#else
  app_notification_ = const_cast< ::sync_pb::AppNotification*>(&::sync_pb::AppNotification::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  password_ = const_cast< ::sync_pb::PasswordSpecifics*>(
      ::sync_pb::PasswordSpecifics::internal_default_instance());
#else
  password_ = const_cast< ::sync_pb::PasswordSpecifics*>(&::sync_pb::PasswordSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nigori_ = const_cast< ::sync_pb::NigoriSpecifics*>(
      ::sync_pb::NigoriSpecifics::internal_default_instance());
#else
  nigori_ = const_cast< ::sync_pb::NigoriSpecifics*>(&::sync_pb::NigoriSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  extension_ = const_cast< ::sync_pb::ExtensionSpecifics*>(
      ::sync_pb::ExtensionSpecifics::internal_default_instance());
#else
  extension_ = const_cast< ::sync_pb::ExtensionSpecifics*>(&::sync_pb::ExtensionSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  app_ = const_cast< ::sync_pb::AppSpecifics*>(
      ::sync_pb::AppSpecifics::internal_default_instance());
#else
  app_ = const_cast< ::sync_pb::AppSpecifics*>(&::sync_pb::AppSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  session_ = const_cast< ::sync_pb::SessionSpecifics*>(
      ::sync_pb::SessionSpecifics::internal_default_instance());
#else
  session_ = const_cast< ::sync_pb::SessionSpecifics*>(&::sync_pb::SessionSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  autofill_profile_ = const_cast< ::sync_pb::AutofillProfileSpecifics*>(
      ::sync_pb::AutofillProfileSpecifics::internal_default_instance());
#else
  autofill_profile_ = const_cast< ::sync_pb::AutofillProfileSpecifics*>(&::sync_pb::AutofillProfileSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  search_engine_ = const_cast< ::sync_pb::SearchEngineSpecifics*>(
      ::sync_pb::SearchEngineSpecifics::internal_default_instance());
#else
  search_engine_ = const_cast< ::sync_pb::SearchEngineSpecifics*>(&::sync_pb::SearchEngineSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  extension_setting_ = const_cast< ::sync_pb::ExtensionSettingSpecifics*>(
      ::sync_pb::ExtensionSettingSpecifics::internal_default_instance());
#else
  extension_setting_ = const_cast< ::sync_pb::ExtensionSettingSpecifics*>(&::sync_pb::ExtensionSettingSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  app_setting_ = const_cast< ::sync_pb::AppSettingSpecifics*>(
      ::sync_pb::AppSettingSpecifics::internal_default_instance());
#else
  app_setting_ = const_cast< ::sync_pb::AppSettingSpecifics*>(&::sync_pb::AppSettingSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  history_delete_directive_ = const_cast< ::sync_pb::HistoryDeleteDirectiveSpecifics*>(
      ::sync_pb::HistoryDeleteDirectiveSpecifics::internal_default_instance());
#else
  history_delete_directive_ = const_cast< ::sync_pb::HistoryDeleteDirectiveSpecifics*>(&::sync_pb::HistoryDeleteDirectiveSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  synced_notification_ = const_cast< ::sync_pb::SyncedNotificationSpecifics*>(
      ::sync_pb::SyncedNotificationSpecifics::internal_default_instance());
#else
  synced_notification_ = const_cast< ::sync_pb::SyncedNotificationSpecifics*>(&::sync_pb::SyncedNotificationSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  synced_notification_app_info_ = const_cast< ::sync_pb::SyncedNotificationAppInfoSpecifics*>(
      ::sync_pb::SyncedNotificationAppInfoSpecifics::internal_default_instance());
#else
  synced_notification_app_info_ = const_cast< ::sync_pb::SyncedNotificationAppInfoSpecifics*>(&::sync_pb::SyncedNotificationAppInfoSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  device_info_ = const_cast< ::sync_pb::DeviceInfoSpecifics*>(
      ::sync_pb::DeviceInfoSpecifics::internal_default_instance());
#else
  device_info_ = const_cast< ::sync_pb::DeviceInfoSpecifics*>(&::sync_pb::DeviceInfoSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  experiments_ = const_cast< ::sync_pb::ExperimentsSpecifics*>(
      ::sync_pb::ExperimentsSpecifics::internal_default_instance());
#else
  experiments_ = const_cast< ::sync_pb::ExperimentsSpecifics*>(&::sync_pb::ExperimentsSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  priority_preference_ = const_cast< ::sync_pb::PriorityPreferenceSpecifics*>(
      ::sync_pb::PriorityPreferenceSpecifics::internal_default_instance());
#else
  priority_preference_ = const_cast< ::sync_pb::PriorityPreferenceSpecifics*>(&::sync_pb::PriorityPreferenceSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dictionary_ = const_cast< ::sync_pb::DictionarySpecifics*>(
      ::sync_pb::DictionarySpecifics::internal_default_instance());
#else
  dictionary_ = const_cast< ::sync_pb::DictionarySpecifics*>(&::sync_pb::DictionarySpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  favicon_tracking_ = const_cast< ::sync_pb::FaviconTrackingSpecifics*>(
      ::sync_pb::FaviconTrackingSpecifics::internal_default_instance());
#else
  favicon_tracking_ = const_cast< ::sync_pb::FaviconTrackingSpecifics*>(&::sync_pb::FaviconTrackingSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  favicon_image_ = const_cast< ::sync_pb::FaviconImageSpecifics*>(
      ::sync_pb::FaviconImageSpecifics::internal_default_instance());
#else
  favicon_image_ = const_cast< ::sync_pb::FaviconImageSpecifics*>(&::sync_pb::FaviconImageSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  managed_user_setting_ = const_cast< ::sync_pb::ManagedUserSettingSpecifics*>(
      ::sync_pb::ManagedUserSettingSpecifics::internal_default_instance());
#else
  managed_user_setting_ = const_cast< ::sync_pb::ManagedUserSettingSpecifics*>(&::sync_pb::ManagedUserSettingSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  managed_user_ = const_cast< ::sync_pb::ManagedUserSpecifics*>(
      ::sync_pb::ManagedUserSpecifics::internal_default_instance());
#else
  managed_user_ = const_cast< ::sync_pb::ManagedUserSpecifics*>(&::sync_pb::ManagedUserSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  managed_user_shared_setting_ = const_cast< ::sync_pb::ManagedUserSharedSettingSpecifics*>(
      ::sync_pb::ManagedUserSharedSettingSpecifics::internal_default_instance());
#else
  managed_user_shared_setting_ = const_cast< ::sync_pb::ManagedUserSharedSettingSpecifics*>(&::sync_pb::ManagedUserSharedSettingSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  article_ = const_cast< ::sync_pb::ArticleSpecifics*>(
      ::sync_pb::ArticleSpecifics::internal_default_instance());
#else
  article_ = const_cast< ::sync_pb::ArticleSpecifics*>(&::sync_pb::ArticleSpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  app_list_ = const_cast< ::sync_pb::AppListSpecifics*>(
      ::sync_pb::AppListSpecifics::internal_default_instance());
#else
  app_list_ = const_cast< ::sync_pb::AppListSpecifics*>(&::sync_pb::AppListSpecifics::default_instance());
#endif
}

EntitySpecifics::EntitySpecifics(const EntitySpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EntitySpecifics::SharedCtor() {
  _cached_size_ = 0;
  encrypted_ = NULL;
  autofill_ = NULL;
  bookmark_ = NULL;
  preference_ = NULL;
  typed_url_ = NULL;
  theme_ = NULL;
  app_notification_ = NULL;
  password_ = NULL;
  nigori_ = NULL;
  extension_ = NULL;
  app_ = NULL;
  session_ = NULL;
  autofill_profile_ = NULL;
  search_engine_ = NULL;
  extension_setting_ = NULL;
  app_setting_ = NULL;
  history_delete_directive_ = NULL;
  synced_notification_ = NULL;
  synced_notification_app_info_ = NULL;
  device_info_ = NULL;
  experiments_ = NULL;
  priority_preference_ = NULL;
  dictionary_ = NULL;
  favicon_tracking_ = NULL;
  favicon_image_ = NULL;
  managed_user_setting_ = NULL;
  managed_user_ = NULL;
  managed_user_shared_setting_ = NULL;
  article_ = NULL;
  app_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntitySpecifics::~EntitySpecifics() {
  SharedDtor();
}

void EntitySpecifics::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete encrypted_;
    delete autofill_;
    delete bookmark_;
    delete preference_;
    delete typed_url_;
    delete theme_;
    delete app_notification_;
    delete password_;
    delete nigori_;
    delete extension_;
    delete app_;
    delete session_;
    delete autofill_profile_;
    delete search_engine_;
    delete extension_setting_;
    delete app_setting_;
    delete history_delete_directive_;
    delete synced_notification_;
    delete synced_notification_app_info_;
    delete device_info_;
    delete experiments_;
    delete priority_preference_;
    delete dictionary_;
    delete favicon_tracking_;
    delete favicon_image_;
    delete managed_user_setting_;
    delete managed_user_;
    delete managed_user_shared_setting_;
    delete article_;
    delete app_list_;
  }
}

void EntitySpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntitySpecifics& EntitySpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

EntitySpecifics* EntitySpecifics::default_instance_ = NULL;

EntitySpecifics* EntitySpecifics::New() const {
  return new EntitySpecifics;
}

void EntitySpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encrypted()) {
      if (encrypted_ != NULL) encrypted_->::sync_pb::EncryptedData::Clear();
    }
    if (has_autofill()) {
      if (autofill_ != NULL) autofill_->::sync_pb::AutofillSpecifics::Clear();
    }
    if (has_bookmark()) {
      if (bookmark_ != NULL) bookmark_->::sync_pb::BookmarkSpecifics::Clear();
    }
    if (has_preference()) {
      if (preference_ != NULL) preference_->::sync_pb::PreferenceSpecifics::Clear();
    }
    if (has_typed_url()) {
      if (typed_url_ != NULL) typed_url_->::sync_pb::TypedUrlSpecifics::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::sync_pb::ThemeSpecifics::Clear();
    }
    if (has_app_notification()) {
      if (app_notification_ != NULL) app_notification_->::sync_pb::AppNotification::Clear();
    }
    if (has_password()) {
      if (password_ != NULL) password_->::sync_pb::PasswordSpecifics::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_nigori()) {
      if (nigori_ != NULL) nigori_->::sync_pb::NigoriSpecifics::Clear();
    }
    if (has_extension()) {
      if (extension_ != NULL) extension_->::sync_pb::ExtensionSpecifics::Clear();
    }
    if (has_app()) {
      if (app_ != NULL) app_->::sync_pb::AppSpecifics::Clear();
    }
    if (has_session()) {
      if (session_ != NULL) session_->::sync_pb::SessionSpecifics::Clear();
    }
    if (has_autofill_profile()) {
      if (autofill_profile_ != NULL) autofill_profile_->::sync_pb::AutofillProfileSpecifics::Clear();
    }
    if (has_search_engine()) {
      if (search_engine_ != NULL) search_engine_->::sync_pb::SearchEngineSpecifics::Clear();
    }
    if (has_extension_setting()) {
      if (extension_setting_ != NULL) extension_setting_->::sync_pb::ExtensionSettingSpecifics::Clear();
    }
    if (has_app_setting()) {
      if (app_setting_ != NULL) app_setting_->::sync_pb::AppSettingSpecifics::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_history_delete_directive()) {
      if (history_delete_directive_ != NULL) history_delete_directive_->::sync_pb::HistoryDeleteDirectiveSpecifics::Clear();
    }
    if (has_synced_notification()) {
      if (synced_notification_ != NULL) synced_notification_->::sync_pb::SyncedNotificationSpecifics::Clear();
    }
    if (has_synced_notification_app_info()) {
      if (synced_notification_app_info_ != NULL) synced_notification_app_info_->::sync_pb::SyncedNotificationAppInfoSpecifics::Clear();
    }
    if (has_device_info()) {
      if (device_info_ != NULL) device_info_->::sync_pb::DeviceInfoSpecifics::Clear();
    }
    if (has_experiments()) {
      if (experiments_ != NULL) experiments_->::sync_pb::ExperimentsSpecifics::Clear();
    }
    if (has_priority_preference()) {
      if (priority_preference_ != NULL) priority_preference_->::sync_pb::PriorityPreferenceSpecifics::Clear();
    }
    if (has_dictionary()) {
      if (dictionary_ != NULL) dictionary_->::sync_pb::DictionarySpecifics::Clear();
    }
    if (has_favicon_tracking()) {
      if (favicon_tracking_ != NULL) favicon_tracking_->::sync_pb::FaviconTrackingSpecifics::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_favicon_image()) {
      if (favicon_image_ != NULL) favicon_image_->::sync_pb::FaviconImageSpecifics::Clear();
    }
    if (has_managed_user_setting()) {
      if (managed_user_setting_ != NULL) managed_user_setting_->::sync_pb::ManagedUserSettingSpecifics::Clear();
    }
    if (has_managed_user()) {
      if (managed_user_ != NULL) managed_user_->::sync_pb::ManagedUserSpecifics::Clear();
    }
    if (has_managed_user_shared_setting()) {
      if (managed_user_shared_setting_ != NULL) managed_user_shared_setting_->::sync_pb::ManagedUserSharedSettingSpecifics::Clear();
    }
    if (has_article()) {
      if (article_ != NULL) article_->::sync_pb::ArticleSpecifics::Clear();
    }
    if (has_app_list()) {
      if (app_list_ != NULL) app_list_->::sync_pb::AppListSpecifics::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntitySpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.EncryptedData encrypted = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encrypted()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253834)) goto parse_autofill;
        break;
      }

      // optional .sync_pb.AutofillSpecifics autofill = 31729;
      case 31729: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_autofill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autofill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(263234)) goto parse_bookmark;
        break;
      }

      // optional .sync_pb.BookmarkSpecifics bookmark = 32904;
      case 32904: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bookmark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bookmark()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301618)) goto parse_preference;
        break;
      }

      // optional .sync_pb.PreferenceSpecifics preference = 37702;
      case 37702: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(326250)) goto parse_typed_url;
        break;
      }

      // optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
      case 40781: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typed_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_typed_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(329682)) goto parse_theme;
        break;
      }

      // optional .sync_pb.ThemeSpecifics theme = 41210;
      case 41210: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361474)) goto parse_app_notification;
        break;
      }

      // optional .sync_pb.AppNotification app_notification = 45184;
      case 45184: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(366986)) goto parse_password;
        break;
      }

      // optional .sync_pb.PasswordSpecifics password = 45873;
      case 45873: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381962)) goto parse_nigori;
        break;
      }

      // optional .sync_pb.NigoriSpecifics nigori = 47745;
      case 47745: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nigori:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nigori()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384954)) goto parse_extension;
        break;
      }

      // optional .sync_pb.ExtensionSpecifics extension = 48119;
      case 48119: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386914)) goto parse_app;
        break;
      }

      // optional .sync_pb.AppSpecifics app = 48364;
      case 48364: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400954)) goto parse_session;
        break;
      }

      // optional .sync_pb.SessionSpecifics session = 50119;
      case 50119: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(511610)) goto parse_autofill_profile;
        break;
      }

      // optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
      case 63951: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_autofill_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autofill_profile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(708882)) goto parse_search_engine;
        break;
      }

      // optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
      case 88610: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_engine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_engine()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(769274)) goto parse_extension_setting;
        break;
      }

      // optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
      case 96159: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extension_setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension_setting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(829250)) goto parse_app_setting;
        break;
      }

      // optional .sync_pb.AppSettingSpecifics app_setting = 103656;
      case 103656: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_setting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1202010)) goto parse_history_delete_directive;
        break;
      }

      // optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
      case 150251: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_delete_directive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_history_delete_directive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1224866)) goto parse_synced_notification;
        break;
      }

      // optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108;
      case 153108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_synced_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_synced_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1236178)) goto parse_device_info;
        break;
      }

      // optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
      case 154522: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1291970)) goto parse_experiments;
        break;
      }

      // optional .sync_pb.ExperimentsSpecifics experiments = 161496;
      case 161496: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_experiments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experiments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1307402)) goto parse_priority_preference;
        break;
      }

      // optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
      case 163425: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_priority_preference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priority_preference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1364322)) goto parse_dictionary;
        break;
      }

      // optional .sync_pb.DictionarySpecifics dictionary = 170540;
      case 170540: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictionary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1452274)) goto parse_favicon_tracking;
        break;
      }

      // optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
      case 181534: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon_tracking:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_tracking()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1456154)) goto parse_favicon_image;
        break;
      }

      // optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
      case 182019: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favicon_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favicon_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1493298)) goto parse_managed_user_setting;
        break;
      }

      // optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
      case 186662: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_managed_user_setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_managed_user_setting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1556658)) goto parse_managed_user;
        break;
      }

      // optional .sync_pb.ManagedUserSpecifics managed_user = 194582;
      case 194582: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_managed_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_managed_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616210)) goto parse_managed_user_shared_setting;
        break;
      }

      // optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026;
      case 202026: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_managed_user_shared_setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_managed_user_shared_setting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1790074)) goto parse_article;
        break;
      }

      // optional .sync_pb.ArticleSpecifics article = 223759;
      case 223759: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_article:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_article()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1833362)) goto parse_app_list;
        break;
      }

      // optional .sync_pb.AppListSpecifics app_list = 229170;
      case 229170: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1886530)) goto parse_synced_notification_app_info;
        break;
      }

      // optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816;
      case 235816: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_synced_notification_app_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_synced_notification_app_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntitySpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.EncryptedData encrypted = 1;
  if (has_encrypted()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->encrypted(), output);
  }

  // optional .sync_pb.AutofillSpecifics autofill = 31729;
  if (has_autofill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31729, this->autofill(), output);
  }

  // optional .sync_pb.BookmarkSpecifics bookmark = 32904;
  if (has_bookmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32904, this->bookmark(), output);
  }

  // optional .sync_pb.PreferenceSpecifics preference = 37702;
  if (has_preference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37702, this->preference(), output);
  }

  // optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
  if (has_typed_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40781, this->typed_url(), output);
  }

  // optional .sync_pb.ThemeSpecifics theme = 41210;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41210, this->theme(), output);
  }

  // optional .sync_pb.AppNotification app_notification = 45184;
  if (has_app_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45184, this->app_notification(), output);
  }

  // optional .sync_pb.PasswordSpecifics password = 45873;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45873, this->password(), output);
  }

  // optional .sync_pb.NigoriSpecifics nigori = 47745;
  if (has_nigori()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47745, this->nigori(), output);
  }

  // optional .sync_pb.ExtensionSpecifics extension = 48119;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48119, this->extension(), output);
  }

  // optional .sync_pb.AppSpecifics app = 48364;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48364, this->app(), output);
  }

  // optional .sync_pb.SessionSpecifics session = 50119;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50119, this->session(), output);
  }

  // optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
  if (has_autofill_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      63951, this->autofill_profile(), output);
  }

  // optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
  if (has_search_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      88610, this->search_engine(), output);
  }

  // optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
  if (has_extension_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      96159, this->extension_setting(), output);
  }

  // optional .sync_pb.AppSettingSpecifics app_setting = 103656;
  if (has_app_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      103656, this->app_setting(), output);
  }

  // optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
  if (has_history_delete_directive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      150251, this->history_delete_directive(), output);
  }

  // optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108;
  if (has_synced_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      153108, this->synced_notification(), output);
  }

  // optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
  if (has_device_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      154522, this->device_info(), output);
  }

  // optional .sync_pb.ExperimentsSpecifics experiments = 161496;
  if (has_experiments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      161496, this->experiments(), output);
  }

  // optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
  if (has_priority_preference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      163425, this->priority_preference(), output);
  }

  // optional .sync_pb.DictionarySpecifics dictionary = 170540;
  if (has_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      170540, this->dictionary(), output);
  }

  // optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
  if (has_favicon_tracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      181534, this->favicon_tracking(), output);
  }

  // optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
  if (has_favicon_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      182019, this->favicon_image(), output);
  }

  // optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
  if (has_managed_user_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      186662, this->managed_user_setting(), output);
  }

  // optional .sync_pb.ManagedUserSpecifics managed_user = 194582;
  if (has_managed_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      194582, this->managed_user(), output);
  }

  // optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026;
  if (has_managed_user_shared_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      202026, this->managed_user_shared_setting(), output);
  }

  // optional .sync_pb.ArticleSpecifics article = 223759;
  if (has_article()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      223759, this->article(), output);
  }

  // optional .sync_pb.AppListSpecifics app_list = 229170;
  if (has_app_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      229170, this->app_list(), output);
  }

  // optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816;
  if (has_synced_notification_app_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      235816, this->synced_notification_app_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int EntitySpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.EncryptedData encrypted = 1;
    if (has_encrypted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->encrypted());
    }

    // optional .sync_pb.AutofillSpecifics autofill = 31729;
    if (has_autofill()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->autofill());
    }

    // optional .sync_pb.BookmarkSpecifics bookmark = 32904;
    if (has_bookmark()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bookmark());
    }

    // optional .sync_pb.PreferenceSpecifics preference = 37702;
    if (has_preference()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preference());
    }

    // optional .sync_pb.TypedUrlSpecifics typed_url = 40781;
    if (has_typed_url()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->typed_url());
    }

    // optional .sync_pb.ThemeSpecifics theme = 41210;
    if (has_theme()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // optional .sync_pb.AppNotification app_notification = 45184;
    if (has_app_notification()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_notification());
    }

    // optional .sync_pb.PasswordSpecifics password = 45873;
    if (has_password()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->password());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .sync_pb.NigoriSpecifics nigori = 47745;
    if (has_nigori()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nigori());
    }

    // optional .sync_pb.ExtensionSpecifics extension = 48119;
    if (has_extension()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extension());
    }

    // optional .sync_pb.AppSpecifics app = 48364;
    if (has_app()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

    // optional .sync_pb.SessionSpecifics session = 50119;
    if (has_session()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }

    // optional .sync_pb.AutofillProfileSpecifics autofill_profile = 63951;
    if (has_autofill_profile()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->autofill_profile());
    }

    // optional .sync_pb.SearchEngineSpecifics search_engine = 88610;
    if (has_search_engine()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->search_engine());
    }

    // optional .sync_pb.ExtensionSettingSpecifics extension_setting = 96159;
    if (has_extension_setting()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extension_setting());
    }

    // optional .sync_pb.AppSettingSpecifics app_setting = 103656;
    if (has_app_setting()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_setting());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .sync_pb.HistoryDeleteDirectiveSpecifics history_delete_directive = 150251;
    if (has_history_delete_directive()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_delete_directive());
    }

    // optional .sync_pb.SyncedNotificationSpecifics synced_notification = 153108;
    if (has_synced_notification()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->synced_notification());
    }

    // optional .sync_pb.SyncedNotificationAppInfoSpecifics synced_notification_app_info = 235816;
    if (has_synced_notification_app_info()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->synced_notification_app_info());
    }

    // optional .sync_pb.DeviceInfoSpecifics device_info = 154522;
    if (has_device_info()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_info());
    }

    // optional .sync_pb.ExperimentsSpecifics experiments = 161496;
    if (has_experiments()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->experiments());
    }

    // optional .sync_pb.PriorityPreferenceSpecifics priority_preference = 163425;
    if (has_priority_preference()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priority_preference());
    }

    // optional .sync_pb.DictionarySpecifics dictionary = 170540;
    if (has_dictionary()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dictionary());
    }

    // optional .sync_pb.FaviconTrackingSpecifics favicon_tracking = 181534;
    if (has_favicon_tracking()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->favicon_tracking());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .sync_pb.FaviconImageSpecifics favicon_image = 182019;
    if (has_favicon_image()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->favicon_image());
    }

    // optional .sync_pb.ManagedUserSettingSpecifics managed_user_setting = 186662;
    if (has_managed_user_setting()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->managed_user_setting());
    }

    // optional .sync_pb.ManagedUserSpecifics managed_user = 194582;
    if (has_managed_user()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->managed_user());
    }

    // optional .sync_pb.ManagedUserSharedSettingSpecifics managed_user_shared_setting = 202026;
    if (has_managed_user_shared_setting()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->managed_user_shared_setting());
    }

    // optional .sync_pb.ArticleSpecifics article = 223759;
    if (has_article()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->article());
    }

    // optional .sync_pb.AppListSpecifics app_list = 229170;
    if (has_app_list()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntitySpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntitySpecifics*>(&from));
}

void EntitySpecifics::MergeFrom(const EntitySpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrypted()) {
      mutable_encrypted()->::sync_pb::EncryptedData::MergeFrom(from.encrypted());
    }
    if (from.has_autofill()) {
      mutable_autofill()->::sync_pb::AutofillSpecifics::MergeFrom(from.autofill());
    }
    if (from.has_bookmark()) {
      mutable_bookmark()->::sync_pb::BookmarkSpecifics::MergeFrom(from.bookmark());
    }
    if (from.has_preference()) {
      mutable_preference()->::sync_pb::PreferenceSpecifics::MergeFrom(from.preference());
    }
    if (from.has_typed_url()) {
      mutable_typed_url()->::sync_pb::TypedUrlSpecifics::MergeFrom(from.typed_url());
    }
    if (from.has_theme()) {
      mutable_theme()->::sync_pb::ThemeSpecifics::MergeFrom(from.theme());
    }
    if (from.has_app_notification()) {
      mutable_app_notification()->::sync_pb::AppNotification::MergeFrom(from.app_notification());
    }
    if (from.has_password()) {
      mutable_password()->::sync_pb::PasswordSpecifics::MergeFrom(from.password());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nigori()) {
      mutable_nigori()->::sync_pb::NigoriSpecifics::MergeFrom(from.nigori());
    }
    if (from.has_extension()) {
      mutable_extension()->::sync_pb::ExtensionSpecifics::MergeFrom(from.extension());
    }
    if (from.has_app()) {
      mutable_app()->::sync_pb::AppSpecifics::MergeFrom(from.app());
    }
    if (from.has_session()) {
      mutable_session()->::sync_pb::SessionSpecifics::MergeFrom(from.session());
    }
    if (from.has_autofill_profile()) {
      mutable_autofill_profile()->::sync_pb::AutofillProfileSpecifics::MergeFrom(from.autofill_profile());
    }
    if (from.has_search_engine()) {
      mutable_search_engine()->::sync_pb::SearchEngineSpecifics::MergeFrom(from.search_engine());
    }
    if (from.has_extension_setting()) {
      mutable_extension_setting()->::sync_pb::ExtensionSettingSpecifics::MergeFrom(from.extension_setting());
    }
    if (from.has_app_setting()) {
      mutable_app_setting()->::sync_pb::AppSettingSpecifics::MergeFrom(from.app_setting());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_history_delete_directive()) {
      mutable_history_delete_directive()->::sync_pb::HistoryDeleteDirectiveSpecifics::MergeFrom(from.history_delete_directive());
    }
    if (from.has_synced_notification()) {
      mutable_synced_notification()->::sync_pb::SyncedNotificationSpecifics::MergeFrom(from.synced_notification());
    }
    if (from.has_synced_notification_app_info()) {
      mutable_synced_notification_app_info()->::sync_pb::SyncedNotificationAppInfoSpecifics::MergeFrom(from.synced_notification_app_info());
    }
    if (from.has_device_info()) {
      mutable_device_info()->::sync_pb::DeviceInfoSpecifics::MergeFrom(from.device_info());
    }
    if (from.has_experiments()) {
      mutable_experiments()->::sync_pb::ExperimentsSpecifics::MergeFrom(from.experiments());
    }
    if (from.has_priority_preference()) {
      mutable_priority_preference()->::sync_pb::PriorityPreferenceSpecifics::MergeFrom(from.priority_preference());
    }
    if (from.has_dictionary()) {
      mutable_dictionary()->::sync_pb::DictionarySpecifics::MergeFrom(from.dictionary());
    }
    if (from.has_favicon_tracking()) {
      mutable_favicon_tracking()->::sync_pb::FaviconTrackingSpecifics::MergeFrom(from.favicon_tracking());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_favicon_image()) {
      mutable_favicon_image()->::sync_pb::FaviconImageSpecifics::MergeFrom(from.favicon_image());
    }
    if (from.has_managed_user_setting()) {
      mutable_managed_user_setting()->::sync_pb::ManagedUserSettingSpecifics::MergeFrom(from.managed_user_setting());
    }
    if (from.has_managed_user()) {
      mutable_managed_user()->::sync_pb::ManagedUserSpecifics::MergeFrom(from.managed_user());
    }
    if (from.has_managed_user_shared_setting()) {
      mutable_managed_user_shared_setting()->::sync_pb::ManagedUserSharedSettingSpecifics::MergeFrom(from.managed_user_shared_setting());
    }
    if (from.has_article()) {
      mutable_article()->::sync_pb::ArticleSpecifics::MergeFrom(from.article());
    }
    if (from.has_app_list()) {
      mutable_app_list()->::sync_pb::AppListSpecifics::MergeFrom(from.app_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntitySpecifics::CopyFrom(const EntitySpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySpecifics::IsInitialized() const {

  return true;
}

void EntitySpecifics::Swap(EntitySpecifics* other) {
  if (other != this) {
    std::swap(encrypted_, other->encrypted_);
    std::swap(autofill_, other->autofill_);
    std::swap(bookmark_, other->bookmark_);
    std::swap(preference_, other->preference_);
    std::swap(typed_url_, other->typed_url_);
    std::swap(theme_, other->theme_);
    std::swap(app_notification_, other->app_notification_);
    std::swap(password_, other->password_);
    std::swap(nigori_, other->nigori_);
    std::swap(extension_, other->extension_);
    std::swap(app_, other->app_);
    std::swap(session_, other->session_);
    std::swap(autofill_profile_, other->autofill_profile_);
    std::swap(search_engine_, other->search_engine_);
    std::swap(extension_setting_, other->extension_setting_);
    std::swap(app_setting_, other->app_setting_);
    std::swap(history_delete_directive_, other->history_delete_directive_);
    std::swap(synced_notification_, other->synced_notification_);
    std::swap(synced_notification_app_info_, other->synced_notification_app_info_);
    std::swap(device_info_, other->device_info_);
    std::swap(experiments_, other->experiments_);
    std::swap(priority_preference_, other->priority_preference_);
    std::swap(dictionary_, other->dictionary_);
    std::swap(favicon_tracking_, other->favicon_tracking_);
    std::swap(favicon_image_, other->favicon_image_);
    std::swap(managed_user_setting_, other->managed_user_setting_);
    std::swap(managed_user_, other->managed_user_);
    std::swap(managed_user_shared_setting_, other->managed_user_shared_setting_);
    std::swap(article_, other->article_);
    std::swap(app_list_, other->app_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EntitySpecifics::GetTypeName() const {
  return "sync_pb.EntitySpecifics";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncEntity_BookmarkData::kBookmarkFolderFieldNumber;
const int SyncEntity_BookmarkData::kBookmarkUrlFieldNumber;
const int SyncEntity_BookmarkData::kBookmarkFaviconFieldNumber;
#endif  // !_MSC_VER

SyncEntity_BookmarkData::SyncEntity_BookmarkData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncEntity_BookmarkData::InitAsDefaultInstance() {
}

SyncEntity_BookmarkData::SyncEntity_BookmarkData(const SyncEntity_BookmarkData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncEntity_BookmarkData::SharedCtor() {
  _cached_size_ = 0;
  bookmark_folder_ = false;
  bookmark_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  bookmark_favicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncEntity_BookmarkData::~SyncEntity_BookmarkData() {
  SharedDtor();
}

void SyncEntity_BookmarkData::SharedDtor() {
  if (bookmark_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete bookmark_url_;
  }
  if (bookmark_favicon_ != &::google::protobuf::internal::GetEmptyString()) {
    delete bookmark_favicon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncEntity_BookmarkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncEntity_BookmarkData& SyncEntity_BookmarkData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

SyncEntity_BookmarkData* SyncEntity_BookmarkData::default_instance_ = NULL;

SyncEntity_BookmarkData* SyncEntity_BookmarkData::New() const {
  return new SyncEntity_BookmarkData;
}

void SyncEntity_BookmarkData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bookmark_folder_ = false;
    if (has_bookmark_url()) {
      if (bookmark_url_ != &::google::protobuf::internal::GetEmptyString()) {
        bookmark_url_->clear();
      }
    }
    if (has_bookmark_favicon()) {
      if (bookmark_favicon_ != &::google::protobuf::internal::GetEmptyString()) {
        bookmark_favicon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncEntity_BookmarkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool bookmark_folder = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bookmark_folder_)));
          set_has_bookmark_folder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_bookmark_url;
        break;
      }

      // optional string bookmark_url = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bookmark_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bookmark_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bookmark_favicon;
        break;
      }

      // optional bytes bookmark_favicon = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bookmark_favicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bookmark_favicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncEntity_BookmarkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool bookmark_folder = 12;
  if (has_bookmark_folder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->bookmark_folder(), output);
  }

  // optional string bookmark_url = 13;
  if (has_bookmark_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->bookmark_url(), output);
  }

  // optional bytes bookmark_favicon = 14;
  if (has_bookmark_favicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->bookmark_favicon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncEntity_BookmarkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool bookmark_folder = 12;
    if (has_bookmark_folder()) {
      total_size += 1 + 1;
    }

    // optional string bookmark_url = 13;
    if (has_bookmark_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bookmark_url());
    }

    // optional bytes bookmark_favicon = 14;
    if (has_bookmark_favicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bookmark_favicon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncEntity_BookmarkData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncEntity_BookmarkData*>(&from));
}

void SyncEntity_BookmarkData::MergeFrom(const SyncEntity_BookmarkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bookmark_folder()) {
      set_bookmark_folder(from.bookmark_folder());
    }
    if (from.has_bookmark_url()) {
      set_bookmark_url(from.bookmark_url());
    }
    if (from.has_bookmark_favicon()) {
      set_bookmark_favicon(from.bookmark_favicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncEntity_BookmarkData::CopyFrom(const SyncEntity_BookmarkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEntity_BookmarkData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncEntity_BookmarkData::Swap(SyncEntity_BookmarkData* other) {
  if (other != this) {
    std::swap(bookmark_folder_, other->bookmark_folder_);
    std::swap(bookmark_url_, other->bookmark_url_);
    std::swap(bookmark_favicon_, other->bookmark_favicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncEntity_BookmarkData::GetTypeName() const {
  return "sync_pb.SyncEntity.BookmarkData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SyncEntity::kIdStringFieldNumber;
const int SyncEntity::kParentIdStringFieldNumber;
const int SyncEntity::kOldParentIdFieldNumber;
const int SyncEntity::kVersionFieldNumber;
const int SyncEntity::kMtimeFieldNumber;
const int SyncEntity::kCtimeFieldNumber;
const int SyncEntity::kNameFieldNumber;
const int SyncEntity::kNonUniqueNameFieldNumber;
const int SyncEntity::kSyncTimestampFieldNumber;
const int SyncEntity::kServerDefinedUniqueTagFieldNumber;
const int SyncEntity::kBookmarkdataFieldNumber;
const int SyncEntity::kPositionInParentFieldNumber;
const int SyncEntity::kInsertAfterItemIdFieldNumber;
const int SyncEntity::kDeletedFieldNumber;
const int SyncEntity::kOriginatorCacheGuidFieldNumber;
const int SyncEntity::kOriginatorClientItemIdFieldNumber;
const int SyncEntity::kSpecificsFieldNumber;
const int SyncEntity::kFolderFieldNumber;
const int SyncEntity::kClientDefinedUniqueTagFieldNumber;
const int SyncEntity::kOrdinalInParentFieldNumber;
const int SyncEntity::kUniquePositionFieldNumber;
#endif  // !_MSC_VER

SyncEntity::SyncEntity()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncEntity::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bookmarkdata_ = const_cast< ::sync_pb::SyncEntity_BookmarkData*>(
      ::sync_pb::SyncEntity_BookmarkData::internal_default_instance());
#else
  bookmarkdata_ = const_cast< ::sync_pb::SyncEntity_BookmarkData*>(&::sync_pb::SyncEntity_BookmarkData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  specifics_ = const_cast< ::sync_pb::EntitySpecifics*>(
      ::sync_pb::EntitySpecifics::internal_default_instance());
#else
  specifics_ = const_cast< ::sync_pb::EntitySpecifics*>(&::sync_pb::EntitySpecifics::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  unique_position_ = const_cast< ::sync_pb::UniquePosition*>(
      ::sync_pb::UniquePosition::internal_default_instance());
#else
  unique_position_ = const_cast< ::sync_pb::UniquePosition*>(&::sync_pb::UniquePosition::default_instance());
#endif
}

SyncEntity::SyncEntity(const SyncEntity& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncEntity::SharedCtor() {
  _cached_size_ = 0;
  id_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  parent_id_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  old_parent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  version_ = GOOGLE_LONGLONG(0);
  mtime_ = GOOGLE_LONGLONG(0);
  ctime_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  non_unique_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  sync_timestamp_ = GOOGLE_LONGLONG(0);
  server_defined_unique_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  bookmarkdata_ = NULL;
  position_in_parent_ = GOOGLE_LONGLONG(0);
  insert_after_item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  deleted_ = false;
  originator_cache_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  originator_client_item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  specifics_ = NULL;
  folder_ = false;
  client_defined_unique_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ordinal_in_parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  unique_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncEntity::~SyncEntity() {
  SharedDtor();
}

void SyncEntity::SharedDtor() {
  if (id_string_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_string_;
  }
  if (parent_id_string_ != &::google::protobuf::internal::GetEmptyString()) {
    delete parent_id_string_;
  }
  if (old_parent_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete old_parent_id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (non_unique_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete non_unique_name_;
  }
  if (server_defined_unique_tag_ != &::google::protobuf::internal::GetEmptyString()) {
    delete server_defined_unique_tag_;
  }
  if (insert_after_item_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete insert_after_item_id_;
  }
  if (originator_cache_guid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete originator_cache_guid_;
  }
  if (originator_client_item_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete originator_client_item_id_;
  }
  if (client_defined_unique_tag_ != &::google::protobuf::internal::GetEmptyString()) {
    delete client_defined_unique_tag_;
  }
  if (ordinal_in_parent_ != &::google::protobuf::internal::GetEmptyString()) {
    delete ordinal_in_parent_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete bookmarkdata_;
    delete specifics_;
    delete unique_position_;
  }
}

void SyncEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncEntity& SyncEntity::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

SyncEntity* SyncEntity::default_instance_ = NULL;

SyncEntity* SyncEntity::New() const {
  return new SyncEntity;
}

void SyncEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id_string()) {
      if (id_string_ != &::google::protobuf::internal::GetEmptyString()) {
        id_string_->clear();
      }
    }
    if (has_parent_id_string()) {
      if (parent_id_string_ != &::google::protobuf::internal::GetEmptyString()) {
        parent_id_string_->clear();
      }
    }
    if (has_old_parent_id()) {
      if (old_parent_id_ != &::google::protobuf::internal::GetEmptyString()) {
        old_parent_id_->clear();
      }
    }
    version_ = GOOGLE_LONGLONG(0);
    mtime_ = GOOGLE_LONGLONG(0);
    ctime_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_non_unique_name()) {
      if (non_unique_name_ != &::google::protobuf::internal::GetEmptyString()) {
        non_unique_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sync_timestamp_ = GOOGLE_LONGLONG(0);
    if (has_server_defined_unique_tag()) {
      if (server_defined_unique_tag_ != &::google::protobuf::internal::GetEmptyString()) {
        server_defined_unique_tag_->clear();
      }
    }
    if (has_bookmarkdata()) {
      if (bookmarkdata_ != NULL) bookmarkdata_->::sync_pb::SyncEntity_BookmarkData::Clear();
    }
    position_in_parent_ = GOOGLE_LONGLONG(0);
    if (has_insert_after_item_id()) {
      if (insert_after_item_id_ != &::google::protobuf::internal::GetEmptyString()) {
        insert_after_item_id_->clear();
      }
    }
    deleted_ = false;
    if (has_originator_cache_guid()) {
      if (originator_cache_guid_ != &::google::protobuf::internal::GetEmptyString()) {
        originator_cache_guid_->clear();
      }
    }
    if (has_originator_client_item_id()) {
      if (originator_client_item_id_ != &::google::protobuf::internal::GetEmptyString()) {
        originator_client_item_id_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_specifics()) {
      if (specifics_ != NULL) specifics_->::sync_pb::EntitySpecifics::Clear();
    }
    folder_ = false;
    if (has_client_defined_unique_tag()) {
      if (client_defined_unique_tag_ != &::google::protobuf::internal::GetEmptyString()) {
        client_defined_unique_tag_->clear();
      }
    }
    if (has_ordinal_in_parent()) {
      if (ordinal_in_parent_ != &::google::protobuf::internal::GetEmptyString()) {
        ordinal_in_parent_->clear();
      }
    }
    if (has_unique_position()) {
      if (unique_position_ != NULL) unique_position_->::sync_pb::UniquePosition::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parent_id_string;
        break;
      }

      // optional string parent_id_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_id_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_parent_id;
        break;
      }

      // optional string old_parent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_parent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_parent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // required int64 version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mtime;
        break;
      }

      // optional int64 mtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ctime;
        break;
      }

      // optional int64 ctime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // required string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_non_unique_name;
        break;
      }

      // optional string non_unique_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_non_unique_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_non_unique_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sync_timestamp;
        break;
      }

      // optional int64 sync_timestamp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sync_timestamp_)));
          set_has_sync_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_server_defined_unique_tag;
        break;
      }

      // optional string server_defined_unique_tag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_defined_unique_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_defined_unique_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(91)) goto parse_bookmarkdata;
        break;
      }

      // optional group BookmarkData = 11 {
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_bookmarkdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                11, input, mutable_bookmarkdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_position_in_parent;
        break;
      }

      // optional int64 position_in_parent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position_in_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_in_parent_)));
          set_has_position_in_parent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_insert_after_item_id;
        break;
      }

      // optional string insert_after_item_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_insert_after_item_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_after_item_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_deleted;
        break;
      }

      // optional bool deleted = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_originator_cache_guid;
        break;
      }

      // optional string originator_cache_guid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originator_cache_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originator_cache_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_originator_client_item_id;
        break;
      }

      // optional string originator_client_item_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originator_client_item_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originator_client_item_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_specifics;
        break;
      }

      // optional .sync_pb.EntitySpecifics specifics = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specifics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specifics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_folder;
        break;
      }

      // optional bool folder = 22 [default = false];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_folder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &folder_)));
          set_has_folder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_client_defined_unique_tag;
        break;
      }

      // optional string client_defined_unique_tag = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_defined_unique_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_defined_unique_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_ordinal_in_parent;
        break;
      }

      // optional bytes ordinal_in_parent = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ordinal_in_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ordinal_in_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_unique_position;
        break;
      }

      // optional .sync_pb.UniquePosition unique_position = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unique_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unique_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id_string = 1;
  if (has_id_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id_string(), output);
  }

  // optional string parent_id_string = 2;
  if (has_parent_id_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->parent_id_string(), output);
  }

  // optional string old_parent_id = 3;
  if (has_old_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->old_parent_id(), output);
  }

  // required int64 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->version(), output);
  }

  // optional int64 mtime = 5;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->mtime(), output);
  }

  // optional int64 ctime = 6;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ctime(), output);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // optional string non_unique_name = 8;
  if (has_non_unique_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->non_unique_name(), output);
  }

  // optional int64 sync_timestamp = 9;
  if (has_sync_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->sync_timestamp(), output);
  }

  // optional string server_defined_unique_tag = 10;
  if (has_server_defined_unique_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->server_defined_unique_tag(), output);
  }

  // optional group BookmarkData = 11 {
  if (has_bookmarkdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      11, this->bookmarkdata(), output);
  }

  // optional int64 position_in_parent = 15;
  if (has_position_in_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->position_in_parent(), output);
  }

  // optional string insert_after_item_id = 16;
  if (has_insert_after_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->insert_after_item_id(), output);
  }

  // optional bool deleted = 18 [default = false];
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->deleted(), output);
  }

  // optional string originator_cache_guid = 19;
  if (has_originator_cache_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->originator_cache_guid(), output);
  }

  // optional string originator_client_item_id = 20;
  if (has_originator_client_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->originator_client_item_id(), output);
  }

  // optional .sync_pb.EntitySpecifics specifics = 21;
  if (has_specifics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->specifics(), output);
  }

  // optional bool folder = 22 [default = false];
  if (has_folder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->folder(), output);
  }

  // optional string client_defined_unique_tag = 23;
  if (has_client_defined_unique_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->client_defined_unique_tag(), output);
  }

  // optional bytes ordinal_in_parent = 24;
  if (has_ordinal_in_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      24, this->ordinal_in_parent(), output);
  }

  // optional .sync_pb.UniquePosition unique_position = 25;
  if (has_unique_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->unique_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int SyncEntity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id_string = 1;
    if (has_id_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_string());
    }

    // optional string parent_id_string = 2;
    if (has_parent_id_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_id_string());
    }

    // optional string old_parent_id = 3;
    if (has_old_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_parent_id());
    }

    // required int64 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int64 mtime = 5;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

    // optional int64 ctime = 6;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ctime());
    }

    // required string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string non_unique_name = 8;
    if (has_non_unique_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->non_unique_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 sync_timestamp = 9;
    if (has_sync_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sync_timestamp());
    }

    // optional string server_defined_unique_tag = 10;
    if (has_server_defined_unique_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_defined_unique_tag());
    }

    // optional group BookmarkData = 11 {
    if (has_bookmarkdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->bookmarkdata());
    }

    // optional int64 position_in_parent = 15;
    if (has_position_in_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->position_in_parent());
    }

    // optional string insert_after_item_id = 16;
    if (has_insert_after_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insert_after_item_id());
    }

    // optional bool deleted = 18 [default = false];
    if (has_deleted()) {
      total_size += 2 + 1;
    }

    // optional string originator_cache_guid = 19;
    if (has_originator_cache_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originator_cache_guid());
    }

    // optional string originator_client_item_id = 20;
    if (has_originator_client_item_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originator_client_item_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .sync_pb.EntitySpecifics specifics = 21;
    if (has_specifics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specifics());
    }

    // optional bool folder = 22 [default = false];
    if (has_folder()) {
      total_size += 2 + 1;
    }

    // optional string client_defined_unique_tag = 23;
    if (has_client_defined_unique_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_defined_unique_tag());
    }

    // optional bytes ordinal_in_parent = 24;
    if (has_ordinal_in_parent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ordinal_in_parent());
    }

    // optional .sync_pb.UniquePosition unique_position = 25;
    if (has_unique_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unique_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncEntity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncEntity*>(&from));
}

void SyncEntity::MergeFrom(const SyncEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id_string()) {
      set_id_string(from.id_string());
    }
    if (from.has_parent_id_string()) {
      set_parent_id_string(from.parent_id_string());
    }
    if (from.has_old_parent_id()) {
      set_old_parent_id(from.old_parent_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_non_unique_name()) {
      set_non_unique_name(from.non_unique_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sync_timestamp()) {
      set_sync_timestamp(from.sync_timestamp());
    }
    if (from.has_server_defined_unique_tag()) {
      set_server_defined_unique_tag(from.server_defined_unique_tag());
    }
    if (from.has_bookmarkdata()) {
      mutable_bookmarkdata()->::sync_pb::SyncEntity_BookmarkData::MergeFrom(from.bookmarkdata());
    }
    if (from.has_position_in_parent()) {
      set_position_in_parent(from.position_in_parent());
    }
    if (from.has_insert_after_item_id()) {
      set_insert_after_item_id(from.insert_after_item_id());
    }
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
    if (from.has_originator_cache_guid()) {
      set_originator_cache_guid(from.originator_cache_guid());
    }
    if (from.has_originator_client_item_id()) {
      set_originator_client_item_id(from.originator_client_item_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_specifics()) {
      mutable_specifics()->::sync_pb::EntitySpecifics::MergeFrom(from.specifics());
    }
    if (from.has_folder()) {
      set_folder(from.folder());
    }
    if (from.has_client_defined_unique_tag()) {
      set_client_defined_unique_tag(from.client_defined_unique_tag());
    }
    if (from.has_ordinal_in_parent()) {
      set_ordinal_in_parent(from.ordinal_in_parent());
    }
    if (from.has_unique_position()) {
      mutable_unique_position()->::sync_pb::UniquePosition::MergeFrom(from.unique_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncEntity::CopyFrom(const SyncEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000048) != 0x00000048) return false;

  if (has_bookmarkdata()) {
    if (!this->bookmarkdata().IsInitialized()) return false;
  }
  return true;
}

void SyncEntity::Swap(SyncEntity* other) {
  if (other != this) {
    std::swap(id_string_, other->id_string_);
    std::swap(parent_id_string_, other->parent_id_string_);
    std::swap(old_parent_id_, other->old_parent_id_);
    std::swap(version_, other->version_);
    std::swap(mtime_, other->mtime_);
    std::swap(ctime_, other->ctime_);
    std::swap(name_, other->name_);
    std::swap(non_unique_name_, other->non_unique_name_);
    std::swap(sync_timestamp_, other->sync_timestamp_);
    std::swap(server_defined_unique_tag_, other->server_defined_unique_tag_);
    std::swap(bookmarkdata_, other->bookmarkdata_);
    std::swap(position_in_parent_, other->position_in_parent_);
    std::swap(insert_after_item_id_, other->insert_after_item_id_);
    std::swap(deleted_, other->deleted_);
    std::swap(originator_cache_guid_, other->originator_cache_guid_);
    std::swap(originator_client_item_id_, other->originator_client_item_id_);
    std::swap(specifics_, other->specifics_);
    std::swap(folder_, other->folder_);
    std::swap(client_defined_unique_tag_, other->client_defined_unique_tag_);
    std::swap(ordinal_in_parent_, other->ordinal_in_parent_);
    std::swap(unique_position_, other->unique_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncEntity::GetTypeName() const {
  return "sync_pb.SyncEntity";
}


// ===================================================================

#ifndef _MSC_VER
const int ChromiumExtensionsActivity::kExtensionIdFieldNumber;
const int ChromiumExtensionsActivity::kBookmarkWritesSinceLastCommitFieldNumber;
#endif  // !_MSC_VER

ChromiumExtensionsActivity::ChromiumExtensionsActivity()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ChromiumExtensionsActivity::InitAsDefaultInstance() {
}

ChromiumExtensionsActivity::ChromiumExtensionsActivity(const ChromiumExtensionsActivity& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ChromiumExtensionsActivity::SharedCtor() {
  _cached_size_ = 0;
  extension_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  bookmark_writes_since_last_commit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChromiumExtensionsActivity::~ChromiumExtensionsActivity() {
  SharedDtor();
}

void ChromiumExtensionsActivity::SharedDtor() {
  if (extension_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete extension_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChromiumExtensionsActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChromiumExtensionsActivity& ChromiumExtensionsActivity::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ChromiumExtensionsActivity* ChromiumExtensionsActivity::default_instance_ = NULL;

ChromiumExtensionsActivity* ChromiumExtensionsActivity::New() const {
  return new ChromiumExtensionsActivity;
}

void ChromiumExtensionsActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_extension_id()) {
      if (extension_id_ != &::google::protobuf::internal::GetEmptyString()) {
        extension_id_->clear();
      }
    }
    bookmark_writes_since_last_commit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChromiumExtensionsActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string extension_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bookmark_writes_since_last_commit;
        break;
      }

      // optional uint32 bookmark_writes_since_last_commit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bookmark_writes_since_last_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bookmark_writes_since_last_commit_)));
          set_has_bookmark_writes_since_last_commit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChromiumExtensionsActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string extension_id = 1;
  if (has_extension_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->extension_id(), output);
  }

  // optional uint32 bookmark_writes_since_last_commit = 2;
  if (has_bookmark_writes_since_last_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bookmark_writes_since_last_commit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ChromiumExtensionsActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string extension_id = 1;
    if (has_extension_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension_id());
    }

    // optional uint32 bookmark_writes_since_last_commit = 2;
    if (has_bookmark_writes_since_last_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bookmark_writes_since_last_commit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromiumExtensionsActivity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChromiumExtensionsActivity*>(&from));
}

void ChromiumExtensionsActivity::MergeFrom(const ChromiumExtensionsActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extension_id()) {
      set_extension_id(from.extension_id());
    }
    if (from.has_bookmark_writes_since_last_commit()) {
      set_bookmark_writes_since_last_commit(from.bookmark_writes_since_last_commit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChromiumExtensionsActivity::CopyFrom(const ChromiumExtensionsActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromiumExtensionsActivity::IsInitialized() const {

  return true;
}

void ChromiumExtensionsActivity::Swap(ChromiumExtensionsActivity* other) {
  if (other != this) {
    std::swap(extension_id_, other->extension_id_);
    std::swap(bookmark_writes_since_last_commit_, other->bookmark_writes_since_last_commit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChromiumExtensionsActivity::GetTypeName() const {
  return "sync_pb.ChromiumExtensionsActivity";
}


// ===================================================================

#ifndef _MSC_VER
const int ClientConfigParams::kEnabledTypeIdsFieldNumber;
const int ClientConfigParams::kTabsDatatypeEnabledFieldNumber;
#endif  // !_MSC_VER

ClientConfigParams::ClientConfigParams()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientConfigParams::InitAsDefaultInstance() {
}

ClientConfigParams::ClientConfigParams(const ClientConfigParams& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientConfigParams::SharedCtor() {
  _cached_size_ = 0;
  tabs_datatype_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientConfigParams::~ClientConfigParams() {
  SharedDtor();
}

void ClientConfigParams::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientConfigParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientConfigParams& ClientConfigParams::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ClientConfigParams* ClientConfigParams::default_instance_ = NULL;

ClientConfigParams* ClientConfigParams::New() const {
  return new ClientConfigParams;
}

void ClientConfigParams::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    tabs_datatype_enabled_ = false;
  }
  enabled_type_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientConfigParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 enabled_type_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled_type_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_enabled_type_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enabled_type_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_enabled_type_ids;
        if (input->ExpectTag(16)) goto parse_tabs_datatype_enabled;
        break;
      }

      // optional bool tabs_datatype_enabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabs_datatype_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tabs_datatype_enabled_)));
          set_has_tabs_datatype_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientConfigParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 enabled_type_ids = 1;
  for (int i = 0; i < this->enabled_type_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->enabled_type_ids(i), output);
  }

  // optional bool tabs_datatype_enabled = 2;
  if (has_tabs_datatype_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tabs_datatype_enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ClientConfigParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool tabs_datatype_enabled = 2;
    if (has_tabs_datatype_enabled()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 enabled_type_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->enabled_type_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enabled_type_ids(i));
    }
    total_size += 1 * this->enabled_type_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConfigParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientConfigParams*>(&from));
}

void ClientConfigParams::MergeFrom(const ClientConfigParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  enabled_type_ids_.MergeFrom(from.enabled_type_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_tabs_datatype_enabled()) {
      set_tabs_datatype_enabled(from.tabs_datatype_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientConfigParams::CopyFrom(const ClientConfigParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConfigParams::IsInitialized() const {

  return true;
}

void ClientConfigParams::Swap(ClientConfigParams* other) {
  if (other != this) {
    enabled_type_ids_.Swap(&other->enabled_type_ids_);
    std::swap(tabs_datatype_enabled_, other->tabs_datatype_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientConfigParams::GetTypeName() const {
  return "sync_pb.ClientConfigParams";
}


// ===================================================================

#ifndef _MSC_VER
const int CommitMessage::kEntriesFieldNumber;
const int CommitMessage::kCacheGuidFieldNumber;
const int CommitMessage::kExtensionsActivityFieldNumber;
const int CommitMessage::kConfigParamsFieldNumber;
#endif  // !_MSC_VER

CommitMessage::CommitMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CommitMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_params_ = const_cast< ::sync_pb::ClientConfigParams*>(
      ::sync_pb::ClientConfigParams::internal_default_instance());
#else
  config_params_ = const_cast< ::sync_pb::ClientConfigParams*>(&::sync_pb::ClientConfigParams::default_instance());
#endif
}

CommitMessage::CommitMessage(const CommitMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CommitMessage::SharedCtor() {
  _cached_size_ = 0;
  cache_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  config_params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommitMessage::~CommitMessage() {
  SharedDtor();
}

void CommitMessage::SharedDtor() {
  if (cache_guid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete cache_guid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete config_params_;
  }
}

void CommitMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitMessage& CommitMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

CommitMessage* CommitMessage::default_instance_ = NULL;

CommitMessage* CommitMessage::New() const {
  return new CommitMessage;
}

void CommitMessage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_cache_guid()) {
      if (cache_guid_ != &::google::protobuf::internal::GetEmptyString()) {
        cache_guid_->clear();
      }
    }
    if (has_config_params()) {
      if (config_params_ != NULL) config_params_->::sync_pb::ClientConfigParams::Clear();
    }
  }
  entries_.Clear();
  extensions_activity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommitMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.SyncEntity entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectTag(18)) goto parse_cache_guid;
        break;
      }

      // optional string cache_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cache_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extensions_activity;
        break;
      }

      // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extensions_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extensions_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extensions_activity;
        if (input->ExpectTag(34)) goto parse_config_params;
        break;
      }

      // optional .sync_pb.ClientConfigParams config_params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommitMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sync_pb.SyncEntity entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entries(i), output);
  }

  // optional string cache_guid = 2;
  if (has_cache_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cache_guid(), output);
  }

  // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
  for (int i = 0; i < this->extensions_activity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->extensions_activity(i), output);
  }

  // optional .sync_pb.ClientConfigParams config_params = 4;
  if (has_config_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->config_params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int CommitMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string cache_guid = 2;
    if (has_cache_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_guid());
    }

    // optional .sync_pb.ClientConfigParams config_params = 4;
    if (has_config_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_params());
    }

  }
  // repeated .sync_pb.SyncEntity entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  // repeated .sync_pb.ChromiumExtensionsActivity extensions_activity = 3;
  total_size += 1 * this->extensions_activity_size();
  for (int i = 0; i < this->extensions_activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extensions_activity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitMessage*>(&from));
}

void CommitMessage::MergeFrom(const CommitMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  extensions_activity_.MergeFrom(from.extensions_activity_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cache_guid()) {
      set_cache_guid(from.cache_guid());
    }
    if (from.has_config_params()) {
      mutable_config_params()->::sync_pb::ClientConfigParams::MergeFrom(from.config_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommitMessage::CopyFrom(const CommitMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitMessage::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void CommitMessage::Swap(CommitMessage* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(cache_guid_, other->cache_guid_);
    extensions_activity_.Swap(&other->extensions_activity_);
    std::swap(config_params_, other->config_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommitMessage::GetTypeName() const {
  return "sync_pb.CommitMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUpdateTriggers::kNotificationHintFieldNumber;
const int GetUpdateTriggers::kClientDroppedHintsFieldNumber;
const int GetUpdateTriggers::kInvalidationsOutOfSyncFieldNumber;
const int GetUpdateTriggers::kLocalModificationNudgesFieldNumber;
const int GetUpdateTriggers::kDatatypeRefreshNudgesFieldNumber;
const int GetUpdateTriggers::kServerDroppedHintsFieldNumber;
#endif  // !_MSC_VER

GetUpdateTriggers::GetUpdateTriggers()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetUpdateTriggers::InitAsDefaultInstance() {
}

GetUpdateTriggers::GetUpdateTriggers(const GetUpdateTriggers& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetUpdateTriggers::SharedCtor() {
  _cached_size_ = 0;
  client_dropped_hints_ = false;
  invalidations_out_of_sync_ = false;
  local_modification_nudges_ = GOOGLE_LONGLONG(0);
  datatype_refresh_nudges_ = GOOGLE_LONGLONG(0);
  server_dropped_hints_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUpdateTriggers::~GetUpdateTriggers() {
  SharedDtor();
}

void GetUpdateTriggers::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUpdateTriggers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdateTriggers& GetUpdateTriggers::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

GetUpdateTriggers* GetUpdateTriggers::default_instance_ = NULL;

GetUpdateTriggers* GetUpdateTriggers::New() const {
  return new GetUpdateTriggers;
}

void GetUpdateTriggers::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    client_dropped_hints_ = false;
    invalidations_out_of_sync_ = false;
    local_modification_nudges_ = GOOGLE_LONGLONG(0);
    datatype_refresh_nudges_ = GOOGLE_LONGLONG(0);
    server_dropped_hints_ = false;
  }
  notification_hint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUpdateTriggers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string notification_hint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notification_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_notification_hint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notification_hint;
        if (input->ExpectTag(16)) goto parse_client_dropped_hints;
        break;
      }

      // optional bool client_dropped_hints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_dropped_hints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_dropped_hints_)));
          set_has_client_dropped_hints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_invalidations_out_of_sync;
        break;
      }

      // optional bool invalidations_out_of_sync = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invalidations_out_of_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalidations_out_of_sync_)));
          set_has_invalidations_out_of_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_local_modification_nudges;
        break;
      }

      // optional int64 local_modification_nudges = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_modification_nudges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &local_modification_nudges_)));
          set_has_local_modification_nudges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_datatype_refresh_nudges;
        break;
      }

      // optional int64 datatype_refresh_nudges = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datatype_refresh_nudges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datatype_refresh_nudges_)));
          set_has_datatype_refresh_nudges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_server_dropped_hints;
        break;
      }

      // optional bool server_dropped_hints = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_dropped_hints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_dropped_hints_)));
          set_has_server_dropped_hints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUpdateTriggers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string notification_hint = 1;
  for (int i = 0; i < this->notification_hint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notification_hint(i), output);
  }

  // optional bool client_dropped_hints = 2;
  if (has_client_dropped_hints()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->client_dropped_hints(), output);
  }

  // optional bool invalidations_out_of_sync = 3;
  if (has_invalidations_out_of_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->invalidations_out_of_sync(), output);
  }

  // optional int64 local_modification_nudges = 4;
  if (has_local_modification_nudges()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->local_modification_nudges(), output);
  }

  // optional int64 datatype_refresh_nudges = 5;
  if (has_datatype_refresh_nudges()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->datatype_refresh_nudges(), output);
  }

  // optional bool server_dropped_hints = 6;
  if (has_server_dropped_hints()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->server_dropped_hints(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GetUpdateTriggers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool client_dropped_hints = 2;
    if (has_client_dropped_hints()) {
      total_size += 1 + 1;
    }

    // optional bool invalidations_out_of_sync = 3;
    if (has_invalidations_out_of_sync()) {
      total_size += 1 + 1;
    }

    // optional int64 local_modification_nudges = 4;
    if (has_local_modification_nudges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->local_modification_nudges());
    }

    // optional int64 datatype_refresh_nudges = 5;
    if (has_datatype_refresh_nudges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datatype_refresh_nudges());
    }

    // optional bool server_dropped_hints = 6;
    if (has_server_dropped_hints()) {
      total_size += 1 + 1;
    }

  }
  // repeated string notification_hint = 1;
  total_size += 1 * this->notification_hint_size();
  for (int i = 0; i < this->notification_hint_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->notification_hint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdateTriggers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdateTriggers*>(&from));
}

void GetUpdateTriggers::MergeFrom(const GetUpdateTriggers& from) {
  GOOGLE_CHECK_NE(&from, this);
  notification_hint_.MergeFrom(from.notification_hint_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_client_dropped_hints()) {
      set_client_dropped_hints(from.client_dropped_hints());
    }
    if (from.has_invalidations_out_of_sync()) {
      set_invalidations_out_of_sync(from.invalidations_out_of_sync());
    }
    if (from.has_local_modification_nudges()) {
      set_local_modification_nudges(from.local_modification_nudges());
    }
    if (from.has_datatype_refresh_nudges()) {
      set_datatype_refresh_nudges(from.datatype_refresh_nudges());
    }
    if (from.has_server_dropped_hints()) {
      set_server_dropped_hints(from.server_dropped_hints());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUpdateTriggers::CopyFrom(const GetUpdateTriggers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdateTriggers::IsInitialized() const {

  return true;
}

void GetUpdateTriggers::Swap(GetUpdateTriggers* other) {
  if (other != this) {
    notification_hint_.Swap(&other->notification_hint_);
    std::swap(client_dropped_hints_, other->client_dropped_hints_);
    std::swap(invalidations_out_of_sync_, other->invalidations_out_of_sync_);
    std::swap(local_modification_nudges_, other->local_modification_nudges_);
    std::swap(datatype_refresh_nudges_, other->datatype_refresh_nudges_);
    std::swap(server_dropped_hints_, other->server_dropped_hints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUpdateTriggers::GetTypeName() const {
  return "sync_pb.GetUpdateTriggers";
}


// ===================================================================

bool GarbageCollectionDirective_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GarbageCollectionDirective_Type GarbageCollectionDirective::UNKNOWN;
const GarbageCollectionDirective_Type GarbageCollectionDirective::VERSION_WATERMARK;
const GarbageCollectionDirective_Type GarbageCollectionDirective::AGE_WATERMARK;
const GarbageCollectionDirective_Type GarbageCollectionDirective::MAX_ITEM_COUNT;
const GarbageCollectionDirective_Type GarbageCollectionDirective::Type_MIN;
const GarbageCollectionDirective_Type GarbageCollectionDirective::Type_MAX;
const int GarbageCollectionDirective::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GarbageCollectionDirective::kTypeFieldNumber;
const int GarbageCollectionDirective::kVersionWatermarkFieldNumber;
const int GarbageCollectionDirective::kAgeWatermarkInDaysFieldNumber;
const int GarbageCollectionDirective::kMaxNumberOfItemsFieldNumber;
#endif  // !_MSC_VER

GarbageCollectionDirective::GarbageCollectionDirective()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GarbageCollectionDirective::InitAsDefaultInstance() {
}

GarbageCollectionDirective::GarbageCollectionDirective(const GarbageCollectionDirective& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GarbageCollectionDirective::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  version_watermark_ = GOOGLE_LONGLONG(0);
  age_watermark_in_days_ = 0;
  max_number_of_items_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GarbageCollectionDirective::~GarbageCollectionDirective() {
  SharedDtor();
}

void GarbageCollectionDirective::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GarbageCollectionDirective::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GarbageCollectionDirective& GarbageCollectionDirective::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

GarbageCollectionDirective* GarbageCollectionDirective::default_instance_ = NULL;

GarbageCollectionDirective* GarbageCollectionDirective::New() const {
  return new GarbageCollectionDirective;
}

void GarbageCollectionDirective::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    version_watermark_ = GOOGLE_LONGLONG(0);
    age_watermark_in_days_ = 0;
    max_number_of_items_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GarbageCollectionDirective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::GarbageCollectionDirective_Type_IsValid(value)) {
            set_type(static_cast< ::sync_pb::GarbageCollectionDirective_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version_watermark;
        break;
      }

      // optional int64 version_watermark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_watermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_watermark_)));
          set_has_version_watermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_age_watermark_in_days;
        break;
      }

      // optional int32 age_watermark_in_days = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age_watermark_in_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_watermark_in_days_)));
          set_has_age_watermark_in_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_number_of_items;
        break;
      }

      // optional int32 max_number_of_items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_number_of_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_number_of_items_)));
          set_has_max_number_of_items();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GarbageCollectionDirective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 version_watermark = 2;
  if (has_version_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version_watermark(), output);
  }

  // optional int32 age_watermark_in_days = 3;
  if (has_age_watermark_in_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age_watermark_in_days(), output);
  }

  // optional int32 max_number_of_items = 4;
  if (has_max_number_of_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_number_of_items(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GarbageCollectionDirective::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 version_watermark = 2;
    if (has_version_watermark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version_watermark());
    }

    // optional int32 age_watermark_in_days = 3;
    if (has_age_watermark_in_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_watermark_in_days());
    }

    // optional int32 max_number_of_items = 4;
    if (has_max_number_of_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_number_of_items());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GarbageCollectionDirective::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GarbageCollectionDirective*>(&from));
}

void GarbageCollectionDirective::MergeFrom(const GarbageCollectionDirective& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_version_watermark()) {
      set_version_watermark(from.version_watermark());
    }
    if (from.has_age_watermark_in_days()) {
      set_age_watermark_in_days(from.age_watermark_in_days());
    }
    if (from.has_max_number_of_items()) {
      set_max_number_of_items(from.max_number_of_items());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GarbageCollectionDirective::CopyFrom(const GarbageCollectionDirective& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarbageCollectionDirective::IsInitialized() const {

  return true;
}

void GarbageCollectionDirective::Swap(GarbageCollectionDirective* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(version_watermark_, other->version_watermark_);
    std::swap(age_watermark_in_days_, other->age_watermark_in_days_);
    std::swap(max_number_of_items_, other->max_number_of_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GarbageCollectionDirective::GetTypeName() const {
  return "sync_pb.GarbageCollectionDirective";
}


// ===================================================================

#ifndef _MSC_VER
const int DataTypeProgressMarker::kDataTypeIdFieldNumber;
const int DataTypeProgressMarker::kTokenFieldNumber;
const int DataTypeProgressMarker::kTimestampTokenForMigrationFieldNumber;
const int DataTypeProgressMarker::kNotificationHintFieldNumber;
const int DataTypeProgressMarker::kGetUpdateTriggersFieldNumber;
const int DataTypeProgressMarker::kGcDirectiveFieldNumber;
#endif  // !_MSC_VER

DataTypeProgressMarker::DataTypeProgressMarker()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DataTypeProgressMarker::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  get_update_triggers_ = const_cast< ::sync_pb::GetUpdateTriggers*>(
      ::sync_pb::GetUpdateTriggers::internal_default_instance());
#else
  get_update_triggers_ = const_cast< ::sync_pb::GetUpdateTriggers*>(&::sync_pb::GetUpdateTriggers::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gc_directive_ = const_cast< ::sync_pb::GarbageCollectionDirective*>(
      ::sync_pb::GarbageCollectionDirective::internal_default_instance());
#else
  gc_directive_ = const_cast< ::sync_pb::GarbageCollectionDirective*>(&::sync_pb::GarbageCollectionDirective::default_instance());
#endif
}

DataTypeProgressMarker::DataTypeProgressMarker(const DataTypeProgressMarker& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DataTypeProgressMarker::SharedCtor() {
  _cached_size_ = 0;
  data_type_id_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  timestamp_token_for_migration_ = GOOGLE_LONGLONG(0);
  notification_hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  get_update_triggers_ = NULL;
  gc_directive_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTypeProgressMarker::~DataTypeProgressMarker() {
  SharedDtor();
}

void DataTypeProgressMarker::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyString()) {
    delete token_;
  }
  if (notification_hint_ != &::google::protobuf::internal::GetEmptyString()) {
    delete notification_hint_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete get_update_triggers_;
    delete gc_directive_;
  }
}

void DataTypeProgressMarker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataTypeProgressMarker& DataTypeProgressMarker::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

DataTypeProgressMarker* DataTypeProgressMarker::default_instance_ = NULL;

DataTypeProgressMarker* DataTypeProgressMarker::New() const {
  return new DataTypeProgressMarker;
}

void DataTypeProgressMarker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_type_id_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyString()) {
        token_->clear();
      }
    }
    timestamp_token_for_migration_ = GOOGLE_LONGLONG(0);
    if (has_notification_hint()) {
      if (notification_hint_ != &::google::protobuf::internal::GetEmptyString()) {
        notification_hint_->clear();
      }
    }
    if (has_get_update_triggers()) {
      if (get_update_triggers_ != NULL) get_update_triggers_->::sync_pb::GetUpdateTriggers::Clear();
    }
    if (has_gc_directive()) {
      if (gc_directive_ != NULL) gc_directive_->::sync_pb::GarbageCollectionDirective::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataTypeProgressMarker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_type_id_)));
          set_has_data_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp_token_for_migration;
        break;
      }

      // optional int64 timestamp_token_for_migration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp_token_for_migration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_token_for_migration_)));
          set_has_timestamp_token_for_migration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notification_hint;
        break;
      }

      // optional string notification_hint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notification_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_hint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_get_update_triggers;
        break;
      }

      // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_update_triggers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_update_triggers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gc_directive;
        break;
      }

      // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gc_directive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gc_directive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataTypeProgressMarker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data_type_id = 1;
  if (has_data_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_type_id(), output);
  }

  // optional bytes token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->token(), output);
  }

  // optional int64 timestamp_token_for_migration = 3;
  if (has_timestamp_token_for_migration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp_token_for_migration(), output);
  }

  // optional string notification_hint = 4;
  if (has_notification_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->notification_hint(), output);
  }

  // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
  if (has_get_update_triggers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->get_update_triggers(), output);
  }

  // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
  if (has_gc_directive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->gc_directive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int DataTypeProgressMarker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data_type_id = 1;
    if (has_data_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_type_id());
    }

    // optional bytes token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional int64 timestamp_token_for_migration = 3;
    if (has_timestamp_token_for_migration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_token_for_migration());
    }

    // optional string notification_hint = 4;
    if (has_notification_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_hint());
    }

    // optional .sync_pb.GetUpdateTriggers get_update_triggers = 5;
    if (has_get_update_triggers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_update_triggers());
    }

    // optional .sync_pb.GarbageCollectionDirective gc_directive = 6;
    if (has_gc_directive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gc_directive());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTypeProgressMarker::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataTypeProgressMarker*>(&from));
}

void DataTypeProgressMarker::MergeFrom(const DataTypeProgressMarker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_type_id()) {
      set_data_type_id(from.data_type_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_timestamp_token_for_migration()) {
      set_timestamp_token_for_migration(from.timestamp_token_for_migration());
    }
    if (from.has_notification_hint()) {
      set_notification_hint(from.notification_hint());
    }
    if (from.has_get_update_triggers()) {
      mutable_get_update_triggers()->::sync_pb::GetUpdateTriggers::MergeFrom(from.get_update_triggers());
    }
    if (from.has_gc_directive()) {
      mutable_gc_directive()->::sync_pb::GarbageCollectionDirective::MergeFrom(from.gc_directive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataTypeProgressMarker::CopyFrom(const DataTypeProgressMarker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTypeProgressMarker::IsInitialized() const {

  return true;
}

void DataTypeProgressMarker::Swap(DataTypeProgressMarker* other) {
  if (other != this) {
    std::swap(data_type_id_, other->data_type_id_);
    std::swap(token_, other->token_);
    std::swap(timestamp_token_for_migration_, other->timestamp_token_for_migration_);
    std::swap(notification_hint_, other->notification_hint_);
    std::swap(get_update_triggers_, other->get_update_triggers_);
    std::swap(gc_directive_, other->gc_directive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataTypeProgressMarker::GetTypeName() const {
  return "sync_pb.DataTypeProgressMarker";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUpdatesMessage::kFromTimestampFieldNumber;
const int GetUpdatesMessage::kCallerInfoFieldNumber;
const int GetUpdatesMessage::kFetchFoldersFieldNumber;
const int GetUpdatesMessage::kRequestedTypesFieldNumber;
const int GetUpdatesMessage::kBatchSizeFieldNumber;
const int GetUpdatesMessage::kFromProgressMarkerFieldNumber;
const int GetUpdatesMessage::kStreamingFieldNumber;
const int GetUpdatesMessage::kNeedEncryptionKeyFieldNumber;
const int GetUpdatesMessage::kCreateMobileBookmarksFolderFieldNumber;
const int GetUpdatesMessage::kGetUpdatesOriginFieldNumber;
const int GetUpdatesMessage::kIsRetryFieldNumber;
#endif  // !_MSC_VER

GetUpdatesMessage::GetUpdatesMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetUpdatesMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  caller_info_ = const_cast< ::sync_pb::GetUpdatesCallerInfo*>(
      ::sync_pb::GetUpdatesCallerInfo::internal_default_instance());
#else
  caller_info_ = const_cast< ::sync_pb::GetUpdatesCallerInfo*>(&::sync_pb::GetUpdatesCallerInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  requested_types_ = const_cast< ::sync_pb::EntitySpecifics*>(
      ::sync_pb::EntitySpecifics::internal_default_instance());
#else
  requested_types_ = const_cast< ::sync_pb::EntitySpecifics*>(&::sync_pb::EntitySpecifics::default_instance());
#endif
}

GetUpdatesMessage::GetUpdatesMessage(const GetUpdatesMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetUpdatesMessage::SharedCtor() {
  _cached_size_ = 0;
  from_timestamp_ = GOOGLE_LONGLONG(0);
  caller_info_ = NULL;
  fetch_folders_ = true;
  requested_types_ = NULL;
  batch_size_ = 0;
  streaming_ = false;
  need_encryption_key_ = false;
  create_mobile_bookmarks_folder_ = false;
  get_updates_origin_ = 0;
  is_retry_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUpdatesMessage::~GetUpdatesMessage() {
  SharedDtor();
}

void GetUpdatesMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete caller_info_;
    delete requested_types_;
  }
}

void GetUpdatesMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdatesMessage& GetUpdatesMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

GetUpdatesMessage* GetUpdatesMessage::default_instance_ = NULL;

GetUpdatesMessage* GetUpdatesMessage::New() const {
  return new GetUpdatesMessage;
}

void GetUpdatesMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_timestamp_ = GOOGLE_LONGLONG(0);
    if (has_caller_info()) {
      if (caller_info_ != NULL) caller_info_->::sync_pb::GetUpdatesCallerInfo::Clear();
    }
    fetch_folders_ = true;
    if (has_requested_types()) {
      if (requested_types_ != NULL) requested_types_->::sync_pb::EntitySpecifics::Clear();
    }
    batch_size_ = 0;
    streaming_ = false;
    need_encryption_key_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    create_mobile_bookmarks_folder_ = false;
    get_updates_origin_ = 0;
    is_retry_ = false;
  }
  from_progress_marker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUpdatesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 from_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_timestamp_)));
          set_has_from_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_caller_info;
        break;
      }

      // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caller_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caller_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fetch_folders;
        break;
      }

      // optional bool fetch_folders = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_folders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_folders_)));
          set_has_fetch_folders();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_requested_types;
        break;
      }

      // optional .sync_pb.EntitySpecifics requested_types = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requested_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requested_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_batch_size;
        break;
      }

      // optional int32 batch_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_from_progress_marker;
        break;
      }

      // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_progress_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_from_progress_marker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_from_progress_marker;
        if (input->ExpectTag(56)) goto parse_streaming;
        break;
      }

      // optional bool streaming = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streaming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_)));
          set_has_streaming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_need_encryption_key;
        break;
      }

      // optional bool need_encryption_key = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_encryption_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_encryption_key_)));
          set_has_need_encryption_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_get_updates_origin;
        break;
      }

      // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_updates_origin:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_GetUpdatesOrigin_IsValid(value)) {
            set_get_updates_origin(static_cast< ::sync_pb::SyncEnums_GetUpdatesOrigin >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_retry;
        break;
      }

      // optional bool is_retry = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_retry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_retry_)));
          set_has_is_retry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8000)) goto parse_create_mobile_bookmarks_folder;
        break;
      }

      // optional bool create_mobile_bookmarks_folder = 1000 [default = false];
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_mobile_bookmarks_folder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_mobile_bookmarks_folder_)));
          set_has_create_mobile_bookmarks_folder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUpdatesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 from_timestamp = 1;
  if (has_from_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->from_timestamp(), output);
  }

  // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
  if (has_caller_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->caller_info(), output);
  }

  // optional bool fetch_folders = 3 [default = true];
  if (has_fetch_folders()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fetch_folders(), output);
  }

  // optional .sync_pb.EntitySpecifics requested_types = 4;
  if (has_requested_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->requested_types(), output);
  }

  // optional int32 batch_size = 5;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->batch_size(), output);
  }

  // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
  for (int i = 0; i < this->from_progress_marker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->from_progress_marker(i), output);
  }

  // optional bool streaming = 7 [default = false];
  if (has_streaming()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->streaming(), output);
  }

  // optional bool need_encryption_key = 8 [default = false];
  if (has_need_encryption_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->need_encryption_key(), output);
  }

  // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
  if (has_get_updates_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->get_updates_origin(), output);
  }

  // optional bool is_retry = 10 [default = false];
  if (has_is_retry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_retry(), output);
  }

  // optional bool create_mobile_bookmarks_folder = 1000 [default = false];
  if (has_create_mobile_bookmarks_folder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1000, this->create_mobile_bookmarks_folder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GetUpdatesMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 from_timestamp = 1;
    if (has_from_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->from_timestamp());
    }

    // optional .sync_pb.GetUpdatesCallerInfo caller_info = 2;
    if (has_caller_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caller_info());
    }

    // optional bool fetch_folders = 3 [default = true];
    if (has_fetch_folders()) {
      total_size += 1 + 1;
    }

    // optional .sync_pb.EntitySpecifics requested_types = 4;
    if (has_requested_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requested_types());
    }

    // optional int32 batch_size = 5;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

    // optional bool streaming = 7 [default = false];
    if (has_streaming()) {
      total_size += 1 + 1;
    }

    // optional bool need_encryption_key = 8 [default = false];
    if (has_need_encryption_key()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool create_mobile_bookmarks_folder = 1000 [default = false];
    if (has_create_mobile_bookmarks_folder()) {
      total_size += 2 + 1;
    }

    // optional .sync_pb.SyncEnums.GetUpdatesOrigin get_updates_origin = 9;
    if (has_get_updates_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->get_updates_origin());
    }

    // optional bool is_retry = 10 [default = false];
    if (has_is_retry()) {
      total_size += 1 + 1;
    }

  }
  // repeated .sync_pb.DataTypeProgressMarker from_progress_marker = 6;
  total_size += 1 * this->from_progress_marker_size();
  for (int i = 0; i < this->from_progress_marker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->from_progress_marker(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatesMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdatesMessage*>(&from));
}

void GetUpdatesMessage::MergeFrom(const GetUpdatesMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  from_progress_marker_.MergeFrom(from.from_progress_marker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_timestamp()) {
      set_from_timestamp(from.from_timestamp());
    }
    if (from.has_caller_info()) {
      mutable_caller_info()->::sync_pb::GetUpdatesCallerInfo::MergeFrom(from.caller_info());
    }
    if (from.has_fetch_folders()) {
      set_fetch_folders(from.fetch_folders());
    }
    if (from.has_requested_types()) {
      mutable_requested_types()->::sync_pb::EntitySpecifics::MergeFrom(from.requested_types());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_streaming()) {
      set_streaming(from.streaming());
    }
    if (from.has_need_encryption_key()) {
      set_need_encryption_key(from.need_encryption_key());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_mobile_bookmarks_folder()) {
      set_create_mobile_bookmarks_folder(from.create_mobile_bookmarks_folder());
    }
    if (from.has_get_updates_origin()) {
      set_get_updates_origin(from.get_updates_origin());
    }
    if (from.has_is_retry()) {
      set_is_retry(from.is_retry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUpdatesMessage::CopyFrom(const GetUpdatesMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesMessage::IsInitialized() const {

  if (has_caller_info()) {
    if (!this->caller_info().IsInitialized()) return false;
  }
  return true;
}

void GetUpdatesMessage::Swap(GetUpdatesMessage* other) {
  if (other != this) {
    std::swap(from_timestamp_, other->from_timestamp_);
    std::swap(caller_info_, other->caller_info_);
    std::swap(fetch_folders_, other->fetch_folders_);
    std::swap(requested_types_, other->requested_types_);
    std::swap(batch_size_, other->batch_size_);
    from_progress_marker_.Swap(&other->from_progress_marker_);
    std::swap(streaming_, other->streaming_);
    std::swap(need_encryption_key_, other->need_encryption_key_);
    std::swap(create_mobile_bookmarks_folder_, other->create_mobile_bookmarks_folder_);
    std::swap(get_updates_origin_, other->get_updates_origin_);
    std::swap(is_retry_, other->is_retry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUpdatesMessage::GetTypeName() const {
  return "sync_pb.GetUpdatesMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateMessage::kAuthTokenFieldNumber;
#endif  // !_MSC_VER

AuthenticateMessage::AuthenticateMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AuthenticateMessage::InitAsDefaultInstance() {
}

AuthenticateMessage::AuthenticateMessage(const AuthenticateMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AuthenticateMessage::SharedCtor() {
  _cached_size_ = 0;
  auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateMessage::~AuthenticateMessage() {
  SharedDtor();
}

void AuthenticateMessage::SharedDtor() {
  if (auth_token_ != &::google::protobuf::internal::GetEmptyString()) {
    delete auth_token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateMessage& AuthenticateMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

AuthenticateMessage* AuthenticateMessage::default_instance_ = NULL;

AuthenticateMessage* AuthenticateMessage::New() const {
  return new AuthenticateMessage;
}

void AuthenticateMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_auth_token()) {
      if (auth_token_ != &::google::protobuf::internal::GetEmptyString()) {
        auth_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthenticateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string auth_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthenticateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string auth_token = 1;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->auth_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int AuthenticateMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string auth_token = 1;
    if (has_auth_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateMessage*>(&from));
}

void AuthenticateMessage::MergeFrom(const AuthenticateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth_token()) {
      set_auth_token(from.auth_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthenticateMessage::CopyFrom(const AuthenticateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthenticateMessage::Swap(AuthenticateMessage* other) {
  if (other != this) {
    std::swap(auth_token_, other->auth_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AuthenticateMessage::GetTypeName() const {
  return "sync_pb.AuthenticateMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearUserDataMessage::ClearUserDataMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClearUserDataMessage::InitAsDefaultInstance() {
}

ClearUserDataMessage::ClearUserDataMessage(const ClearUserDataMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClearUserDataMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearUserDataMessage::~ClearUserDataMessage() {
  SharedDtor();
}

void ClearUserDataMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClearUserDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClearUserDataMessage& ClearUserDataMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ClearUserDataMessage* ClearUserDataMessage::default_instance_ = NULL;

ClearUserDataMessage* ClearUserDataMessage::New() const {
  return new ClearUserDataMessage;
}

void ClearUserDataMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearUserDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClearUserDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ClearUserDataMessage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearUserDataMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClearUserDataMessage*>(&from));
}

void ClearUserDataMessage::MergeFrom(const ClearUserDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearUserDataMessage::CopyFrom(const ClearUserDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearUserDataMessage::IsInitialized() const {

  return true;
}

void ClearUserDataMessage::Swap(ClearUserDataMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClearUserDataMessage::GetTypeName() const {
  return "sync_pb.ClearUserDataMessage";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearUserDataResponse::ClearUserDataResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClearUserDataResponse::InitAsDefaultInstance() {
}

ClearUserDataResponse::ClearUserDataResponse(const ClearUserDataResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClearUserDataResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearUserDataResponse::~ClearUserDataResponse() {
  SharedDtor();
}

void ClearUserDataResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClearUserDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClearUserDataResponse& ClearUserDataResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ClearUserDataResponse* ClearUserDataResponse::default_instance_ = NULL;

ClearUserDataResponse* ClearUserDataResponse::New() const {
  return new ClearUserDataResponse;
}

void ClearUserDataResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearUserDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClearUserDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ClearUserDataResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearUserDataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClearUserDataResponse*>(&from));
}

void ClearUserDataResponse::MergeFrom(const ClearUserDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearUserDataResponse::CopyFrom(const ClearUserDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearUserDataResponse::IsInitialized() const {

  return true;
}

void ClearUserDataResponse::Swap(ClearUserDataResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClearUserDataResponse::GetTypeName() const {
  return "sync_pb.ClearUserDataResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ChipBag::kServerChipsFieldNumber;
#endif  // !_MSC_VER

ChipBag::ChipBag()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ChipBag::InitAsDefaultInstance() {
}

ChipBag::ChipBag(const ChipBag& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ChipBag::SharedCtor() {
  _cached_size_ = 0;
  server_chips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChipBag::~ChipBag() {
  SharedDtor();
}

void ChipBag::SharedDtor() {
  if (server_chips_ != &::google::protobuf::internal::GetEmptyString()) {
    delete server_chips_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChipBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChipBag& ChipBag::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ChipBag* ChipBag::default_instance_ = NULL;

ChipBag* ChipBag::New() const {
  return new ChipBag;
}

void ChipBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_chips()) {
      if (server_chips_ != &::google::protobuf::internal::GetEmptyString()) {
        server_chips_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChipBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes server_chips = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_chips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChipBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes server_chips = 1;
  if (has_server_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->server_chips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ChipBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes server_chips = 1;
    if (has_server_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_chips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChipBag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChipBag*>(&from));
}

void ChipBag::MergeFrom(const ChipBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_chips()) {
      set_server_chips(from.server_chips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChipBag::CopyFrom(const ChipBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChipBag::IsInitialized() const {

  return true;
}

void ChipBag::Swap(ChipBag* other) {
  if (other != this) {
    std::swap(server_chips_, other->server_chips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChipBag::GetTypeName() const {
  return "sync_pb.ChipBag";
}


// ===================================================================

#ifndef _MSC_VER
const int ClientStatus::kHierarchyConflictDetectedFieldNumber;
#endif  // !_MSC_VER

ClientStatus::ClientStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientStatus::InitAsDefaultInstance() {
}

ClientStatus::ClientStatus(const ClientStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientStatus::SharedCtor() {
  _cached_size_ = 0;
  hierarchy_conflict_detected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientStatus::~ClientStatus() {
  SharedDtor();
}

void ClientStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientStatus& ClientStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ClientStatus* ClientStatus::default_instance_ = NULL;

ClientStatus* ClientStatus::New() const {
  return new ClientStatus;
}

void ClientStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hierarchy_conflict_detected_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hierarchy_conflict_detected = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hierarchy_conflict_detected_)));
          set_has_hierarchy_conflict_detected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hierarchy_conflict_detected = 1;
  if (has_hierarchy_conflict_detected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hierarchy_conflict_detected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ClientStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hierarchy_conflict_detected = 1;
    if (has_hierarchy_conflict_detected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientStatus*>(&from));
}

void ClientStatus::MergeFrom(const ClientStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hierarchy_conflict_detected()) {
      set_hierarchy_conflict_detected(from.hierarchy_conflict_detected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientStatus::CopyFrom(const ClientStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStatus::IsInitialized() const {

  return true;
}

void ClientStatus::Swap(ClientStatus* other) {
  if (other != this) {
    std::swap(hierarchy_conflict_detected_, other->hierarchy_conflict_detected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientStatus::GetTypeName() const {
  return "sync_pb.ClientStatus";
}


// ===================================================================

bool ClientToServerMessage_Contents_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientToServerMessage_Contents ClientToServerMessage::COMMIT;
const ClientToServerMessage_Contents ClientToServerMessage::GET_UPDATES;
const ClientToServerMessage_Contents ClientToServerMessage::AUTHENTICATE;
const ClientToServerMessage_Contents ClientToServerMessage::CLEAR_DATA;
const ClientToServerMessage_Contents ClientToServerMessage::Contents_MIN;
const ClientToServerMessage_Contents ClientToServerMessage::Contents_MAX;
const int ClientToServerMessage::Contents_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientToServerMessage::kShareFieldNumber;
const int ClientToServerMessage::kProtocolVersionFieldNumber;
const int ClientToServerMessage::kMessageContentsFieldNumber;
const int ClientToServerMessage::kCommitFieldNumber;
const int ClientToServerMessage::kGetUpdatesFieldNumber;
const int ClientToServerMessage::kAuthenticateFieldNumber;
const int ClientToServerMessage::kClearUserDataFieldNumber;
const int ClientToServerMessage::kStoreBirthdayFieldNumber;
const int ClientToServerMessage::kSyncProblemDetectedFieldNumber;
const int ClientToServerMessage::kDebugInfoFieldNumber;
const int ClientToServerMessage::kBagOfChipsFieldNumber;
const int ClientToServerMessage::kApiKeyFieldNumber;
const int ClientToServerMessage::kClientStatusFieldNumber;
const int ClientToServerMessage::kInvalidatorClientIdFieldNumber;
#endif  // !_MSC_VER

ClientToServerMessage::ClientToServerMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientToServerMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  commit_ = const_cast< ::sync_pb::CommitMessage*>(
      ::sync_pb::CommitMessage::internal_default_instance());
#else
  commit_ = const_cast< ::sync_pb::CommitMessage*>(&::sync_pb::CommitMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  get_updates_ = const_cast< ::sync_pb::GetUpdatesMessage*>(
      ::sync_pb::GetUpdatesMessage::internal_default_instance());
#else
  get_updates_ = const_cast< ::sync_pb::GetUpdatesMessage*>(&::sync_pb::GetUpdatesMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  authenticate_ = const_cast< ::sync_pb::AuthenticateMessage*>(
      ::sync_pb::AuthenticateMessage::internal_default_instance());
#else
  authenticate_ = const_cast< ::sync_pb::AuthenticateMessage*>(&::sync_pb::AuthenticateMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clear_user_data_ = const_cast< ::sync_pb::ClearUserDataMessage*>(
      ::sync_pb::ClearUserDataMessage::internal_default_instance());
#else
  clear_user_data_ = const_cast< ::sync_pb::ClearUserDataMessage*>(&::sync_pb::ClearUserDataMessage::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  debug_info_ = const_cast< ::sync_pb::DebugInfo*>(
      ::sync_pb::DebugInfo::internal_default_instance());
#else
  debug_info_ = const_cast< ::sync_pb::DebugInfo*>(&::sync_pb::DebugInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bag_of_chips_ = const_cast< ::sync_pb::ChipBag*>(
      ::sync_pb::ChipBag::internal_default_instance());
#else
  bag_of_chips_ = const_cast< ::sync_pb::ChipBag*>(&::sync_pb::ChipBag::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  client_status_ = const_cast< ::sync_pb::ClientStatus*>(
      ::sync_pb::ClientStatus::internal_default_instance());
#else
  client_status_ = const_cast< ::sync_pb::ClientStatus*>(&::sync_pb::ClientStatus::default_instance());
#endif
}

ClientToServerMessage::ClientToServerMessage(const ClientToServerMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToServerMessage::SharedCtor() {
  _cached_size_ = 0;
  share_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  protocol_version_ = 31;
  message_contents_ = 1;
  commit_ = NULL;
  get_updates_ = NULL;
  authenticate_ = NULL;
  clear_user_data_ = NULL;
  store_birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  sync_problem_detected_ = false;
  debug_info_ = NULL;
  bag_of_chips_ = NULL;
  api_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  client_status_ = NULL;
  invalidator_client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToServerMessage::~ClientToServerMessage() {
  SharedDtor();
}

void ClientToServerMessage::SharedDtor() {
  if (share_ != &::google::protobuf::internal::GetEmptyString()) {
    delete share_;
  }
  if (store_birthday_ != &::google::protobuf::internal::GetEmptyString()) {
    delete store_birthday_;
  }
  if (api_key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete api_key_;
  }
  if (invalidator_client_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete invalidator_client_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete commit_;
    delete get_updates_;
    delete authenticate_;
    delete clear_user_data_;
    delete debug_info_;
    delete bag_of_chips_;
    delete client_status_;
  }
}

void ClientToServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToServerMessage& ClientToServerMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ClientToServerMessage* ClientToServerMessage::default_instance_ = NULL;

ClientToServerMessage* ClientToServerMessage::New() const {
  return new ClientToServerMessage;
}

void ClientToServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_share()) {
      if (share_ != &::google::protobuf::internal::GetEmptyString()) {
        share_->clear();
      }
    }
    protocol_version_ = 31;
    message_contents_ = 1;
    if (has_commit()) {
      if (commit_ != NULL) commit_->::sync_pb::CommitMessage::Clear();
    }
    if (has_get_updates()) {
      if (get_updates_ != NULL) get_updates_->::sync_pb::GetUpdatesMessage::Clear();
    }
    if (has_authenticate()) {
      if (authenticate_ != NULL) authenticate_->::sync_pb::AuthenticateMessage::Clear();
    }
    if (has_clear_user_data()) {
      if (clear_user_data_ != NULL) clear_user_data_->::sync_pb::ClearUserDataMessage::Clear();
    }
    if (has_store_birthday()) {
      if (store_birthday_ != &::google::protobuf::internal::GetEmptyString()) {
        store_birthday_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sync_problem_detected_ = false;
    if (has_debug_info()) {
      if (debug_info_ != NULL) debug_info_->::sync_pb::DebugInfo::Clear();
    }
    if (has_bag_of_chips()) {
      if (bag_of_chips_ != NULL) bag_of_chips_->::sync_pb::ChipBag::Clear();
    }
    if (has_api_key()) {
      if (api_key_ != &::google::protobuf::internal::GetEmptyString()) {
        api_key_->clear();
      }
    }
    if (has_client_status()) {
      if (client_status_ != NULL) client_status_->::sync_pb::ClientStatus::Clear();
    }
    if (has_invalidator_client_id()) {
      if (invalidator_client_id_ != &::google::protobuf::internal::GetEmptyString()) {
        invalidator_client_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string share = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_protocol_version;
        break;
      }

      // optional int32 protocol_version = 2 [default = 31];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_message_contents;
        break;
      }

      // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_contents:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::ClientToServerMessage_Contents_IsValid(value)) {
            set_message_contents(static_cast< ::sync_pb::ClientToServerMessage_Contents >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_commit;
        break;
      }

      // optional .sync_pb.CommitMessage commit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_get_updates;
        break;
      }

      // optional .sync_pb.GetUpdatesMessage get_updates = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_authenticate;
        break;
      }

      // optional .sync_pb.AuthenticateMessage authenticate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authenticate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authenticate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_store_birthday;
        break;
      }

      // optional string store_birthday = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_birthday()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sync_problem_detected;
        break;
      }

      // optional bool sync_problem_detected = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_problem_detected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_problem_detected_)));
          set_has_sync_problem_detected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_clear_user_data;
        break;
      }

      // optional .sync_pb.ClearUserDataMessage clear_user_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clear_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_user_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_debug_info;
        break;
      }

      // optional .sync_pb.DebugInfo debug_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bag_of_chips;
        break;
      }

      // optional .sync_pb.ChipBag bag_of_chips = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag_of_chips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag_of_chips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_api_key;
        break;
      }

      // optional string api_key = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_api_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_client_status;
        break;
      }

      // optional .sync_pb.ClientStatus client_status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_invalidator_client_id;
        break;
      }

      // optional string invalidator_client_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invalidator_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invalidator_client_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string share = 1;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->share(), output);
  }

  // optional int32 protocol_version = 2 [default = 31];
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->protocol_version(), output);
  }

  // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
  if (has_message_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->message_contents(), output);
  }

  // optional .sync_pb.CommitMessage commit = 4;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->commit(), output);
  }

  // optional .sync_pb.GetUpdatesMessage get_updates = 5;
  if (has_get_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->get_updates(), output);
  }

  // optional .sync_pb.AuthenticateMessage authenticate = 6;
  if (has_authenticate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->authenticate(), output);
  }

  // optional string store_birthday = 7;
  if (has_store_birthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->store_birthday(), output);
  }

  // optional bool sync_problem_detected = 8 [default = false];
  if (has_sync_problem_detected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->sync_problem_detected(), output);
  }

  // optional .sync_pb.ClearUserDataMessage clear_user_data = 9;
  if (has_clear_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->clear_user_data(), output);
  }

  // optional .sync_pb.DebugInfo debug_info = 10;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->debug_info(), output);
  }

  // optional .sync_pb.ChipBag bag_of_chips = 11;
  if (has_bag_of_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->bag_of_chips(), output);
  }

  // optional string api_key = 12;
  if (has_api_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->api_key(), output);
  }

  // optional .sync_pb.ClientStatus client_status = 13;
  if (has_client_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->client_status(), output);
  }

  // optional string invalidator_client_id = 14;
  if (has_invalidator_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->invalidator_client_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ClientToServerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string share = 1;
    if (has_share()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->share());
    }

    // optional int32 protocol_version = 2 [default = 31];
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocol_version());
    }

    // required .sync_pb.ClientToServerMessage.Contents message_contents = 3;
    if (has_message_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_contents());
    }

    // optional .sync_pb.CommitMessage commit = 4;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commit());
    }

    // optional .sync_pb.GetUpdatesMessage get_updates = 5;
    if (has_get_updates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_updates());
    }

    // optional .sync_pb.AuthenticateMessage authenticate = 6;
    if (has_authenticate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authenticate());
    }

    // optional .sync_pb.ClearUserDataMessage clear_user_data = 9;
    if (has_clear_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clear_user_data());
    }

    // optional string store_birthday = 7;
    if (has_store_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_birthday());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool sync_problem_detected = 8 [default = false];
    if (has_sync_problem_detected()) {
      total_size += 1 + 1;
    }

    // optional .sync_pb.DebugInfo debug_info = 10;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_info());
    }

    // optional .sync_pb.ChipBag bag_of_chips = 11;
    if (has_bag_of_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag_of_chips());
    }

    // optional string api_key = 12;
    if (has_api_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->api_key());
    }

    // optional .sync_pb.ClientStatus client_status = 13;
    if (has_client_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_status());
    }

    // optional string invalidator_client_id = 14;
    if (has_invalidator_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invalidator_client_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToServerMessage*>(&from));
}

void ClientToServerMessage::MergeFrom(const ClientToServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_share()) {
      set_share(from.share());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_message_contents()) {
      set_message_contents(from.message_contents());
    }
    if (from.has_commit()) {
      mutable_commit()->::sync_pb::CommitMessage::MergeFrom(from.commit());
    }
    if (from.has_get_updates()) {
      mutable_get_updates()->::sync_pb::GetUpdatesMessage::MergeFrom(from.get_updates());
    }
    if (from.has_authenticate()) {
      mutable_authenticate()->::sync_pb::AuthenticateMessage::MergeFrom(from.authenticate());
    }
    if (from.has_clear_user_data()) {
      mutable_clear_user_data()->::sync_pb::ClearUserDataMessage::MergeFrom(from.clear_user_data());
    }
    if (from.has_store_birthday()) {
      set_store_birthday(from.store_birthday());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sync_problem_detected()) {
      set_sync_problem_detected(from.sync_problem_detected());
    }
    if (from.has_debug_info()) {
      mutable_debug_info()->::sync_pb::DebugInfo::MergeFrom(from.debug_info());
    }
    if (from.has_bag_of_chips()) {
      mutable_bag_of_chips()->::sync_pb::ChipBag::MergeFrom(from.bag_of_chips());
    }
    if (from.has_api_key()) {
      set_api_key(from.api_key());
    }
    if (from.has_client_status()) {
      mutable_client_status()->::sync_pb::ClientStatus::MergeFrom(from.client_status());
    }
    if (from.has_invalidator_client_id()) {
      set_invalidator_client_id(from.invalidator_client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToServerMessage::CopyFrom(const ClientToServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_commit()) {
    if (!this->commit().IsInitialized()) return false;
  }
  if (has_get_updates()) {
    if (!this->get_updates().IsInitialized()) return false;
  }
  if (has_authenticate()) {
    if (!this->authenticate().IsInitialized()) return false;
  }
  if (has_debug_info()) {
    if (!this->debug_info().IsInitialized()) return false;
  }
  return true;
}

void ClientToServerMessage::Swap(ClientToServerMessage* other) {
  if (other != this) {
    std::swap(share_, other->share_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(message_contents_, other->message_contents_);
    std::swap(commit_, other->commit_);
    std::swap(get_updates_, other->get_updates_);
    std::swap(authenticate_, other->authenticate_);
    std::swap(clear_user_data_, other->clear_user_data_);
    std::swap(store_birthday_, other->store_birthday_);
    std::swap(sync_problem_detected_, other->sync_problem_detected_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(bag_of_chips_, other->bag_of_chips_);
    std::swap(api_key_, other->api_key_);
    std::swap(client_status_, other->client_status_);
    std::swap(invalidator_client_id_, other->invalidator_client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientToServerMessage::GetTypeName() const {
  return "sync_pb.ClientToServerMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCrashInfoRequest::kCrashIdFieldNumber;
const int GetCrashInfoRequest::kCrashTimeMillisFieldNumber;
#endif  // !_MSC_VER

GetCrashInfoRequest::GetCrashInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetCrashInfoRequest::InitAsDefaultInstance() {
}

GetCrashInfoRequest::GetCrashInfoRequest(const GetCrashInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetCrashInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  crash_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  crash_time_millis_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCrashInfoRequest::~GetCrashInfoRequest() {
  SharedDtor();
}

void GetCrashInfoRequest::SharedDtor() {
  if (crash_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete crash_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCrashInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCrashInfoRequest& GetCrashInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

GetCrashInfoRequest* GetCrashInfoRequest::default_instance_ = NULL;

GetCrashInfoRequest* GetCrashInfoRequest::New() const {
  return new GetCrashInfoRequest;
}

void GetCrashInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_crash_id()) {
      if (crash_id_ != &::google::protobuf::internal::GetEmptyString()) {
        crash_id_->clear();
      }
    }
    crash_time_millis_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCrashInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string crash_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crash_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crash_time_millis;
        break;
      }

      // optional int64 crash_time_millis = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crash_time_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crash_time_millis_)));
          set_has_crash_time_millis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCrashInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string crash_id = 1;
  if (has_crash_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->crash_id(), output);
  }

  // optional int64 crash_time_millis = 2;
  if (has_crash_time_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->crash_time_millis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GetCrashInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string crash_id = 1;
    if (has_crash_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crash_id());
    }

    // optional int64 crash_time_millis = 2;
    if (has_crash_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crash_time_millis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCrashInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCrashInfoRequest*>(&from));
}

void GetCrashInfoRequest::MergeFrom(const GetCrashInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crash_id()) {
      set_crash_id(from.crash_id());
    }
    if (from.has_crash_time_millis()) {
      set_crash_time_millis(from.crash_time_millis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCrashInfoRequest::CopyFrom(const GetCrashInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCrashInfoRequest::IsInitialized() const {

  return true;
}

void GetCrashInfoRequest::Swap(GetCrashInfoRequest* other) {
  if (other != this) {
    std::swap(crash_id_, other->crash_id_);
    std::swap(crash_time_millis_, other->crash_time_millis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCrashInfoRequest::GetTypeName() const {
  return "sync_pb.GetCrashInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int GetCrashInfoResponse::kStackIdFieldNumber;
const int GetCrashInfoResponse::kCrashTimeMillisFieldNumber;
#endif  // !_MSC_VER

GetCrashInfoResponse::GetCrashInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetCrashInfoResponse::InitAsDefaultInstance() {
}

GetCrashInfoResponse::GetCrashInfoResponse(const GetCrashInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetCrashInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  stack_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  crash_time_millis_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCrashInfoResponse::~GetCrashInfoResponse() {
  SharedDtor();
}

void GetCrashInfoResponse::SharedDtor() {
  if (stack_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete stack_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetCrashInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetCrashInfoResponse& GetCrashInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

GetCrashInfoResponse* GetCrashInfoResponse::default_instance_ = NULL;

GetCrashInfoResponse* GetCrashInfoResponse::New() const {
  return new GetCrashInfoResponse;
}

void GetCrashInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stack_id()) {
      if (stack_id_ != &::google::protobuf::internal::GetEmptyString()) {
        stack_id_->clear();
      }
    }
    crash_time_millis_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCrashInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stack_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stack_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crash_time_millis;
        break;
      }

      // optional int64 crash_time_millis = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crash_time_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crash_time_millis_)));
          set_has_crash_time_millis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCrashInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stack_id = 1;
  if (has_stack_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stack_id(), output);
  }

  // optional int64 crash_time_millis = 2;
  if (has_crash_time_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->crash_time_millis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GetCrashInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stack_id = 1;
    if (has_stack_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stack_id());
    }

    // optional int64 crash_time_millis = 2;
    if (has_crash_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crash_time_millis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCrashInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetCrashInfoResponse*>(&from));
}

void GetCrashInfoResponse::MergeFrom(const GetCrashInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stack_id()) {
      set_stack_id(from.stack_id());
    }
    if (from.has_crash_time_millis()) {
      set_crash_time_millis(from.crash_time_millis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCrashInfoResponse::CopyFrom(const GetCrashInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCrashInfoResponse::IsInitialized() const {

  return true;
}

void GetCrashInfoResponse::Swap(GetCrashInfoResponse* other) {
  if (other != this) {
    std::swap(stack_id_, other->stack_id_);
    std::swap(crash_time_millis_, other->crash_time_millis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetCrashInfoResponse::GetTypeName() const {
  return "sync_pb.GetCrashInfoResponse";
}


// ===================================================================

bool CommitResponse_ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommitResponse_ResponseType CommitResponse::SUCCESS;
const CommitResponse_ResponseType CommitResponse::CONFLICT;
const CommitResponse_ResponseType CommitResponse::RETRY;
const CommitResponse_ResponseType CommitResponse::INVALID_MESSAGE;
const CommitResponse_ResponseType CommitResponse::OVER_QUOTA;
const CommitResponse_ResponseType CommitResponse::TRANSIENT_ERROR;
const CommitResponse_ResponseType CommitResponse::ResponseType_MIN;
const CommitResponse_ResponseType CommitResponse::ResponseType_MAX;
const int CommitResponse::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CommitResponse_EntryResponse::kResponseTypeFieldNumber;
const int CommitResponse_EntryResponse::kIdStringFieldNumber;
const int CommitResponse_EntryResponse::kParentIdStringFieldNumber;
const int CommitResponse_EntryResponse::kPositionInParentFieldNumber;
const int CommitResponse_EntryResponse::kVersionFieldNumber;
const int CommitResponse_EntryResponse::kNameFieldNumber;
const int CommitResponse_EntryResponse::kNonUniqueNameFieldNumber;
const int CommitResponse_EntryResponse::kErrorMessageFieldNumber;
const int CommitResponse_EntryResponse::kMtimeFieldNumber;
#endif  // !_MSC_VER

CommitResponse_EntryResponse::CommitResponse_EntryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CommitResponse_EntryResponse::InitAsDefaultInstance() {
}

CommitResponse_EntryResponse::CommitResponse_EntryResponse(const CommitResponse_EntryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CommitResponse_EntryResponse::SharedCtor() {
  _cached_size_ = 0;
  response_type_ = 1;
  id_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  parent_id_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  position_in_parent_ = GOOGLE_LONGLONG(0);
  version_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  non_unique_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  mtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommitResponse_EntryResponse::~CommitResponse_EntryResponse() {
  SharedDtor();
}

void CommitResponse_EntryResponse::SharedDtor() {
  if (id_string_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_string_;
  }
  if (parent_id_string_ != &::google::protobuf::internal::GetEmptyString()) {
    delete parent_id_string_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (non_unique_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete non_unique_name_;
  }
  if (error_message_ != &::google::protobuf::internal::GetEmptyString()) {
    delete error_message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommitResponse_EntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitResponse_EntryResponse& CommitResponse_EntryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

CommitResponse_EntryResponse* CommitResponse_EntryResponse::default_instance_ = NULL;

CommitResponse_EntryResponse* CommitResponse_EntryResponse::New() const {
  return new CommitResponse_EntryResponse;
}

void CommitResponse_EntryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_type_ = 1;
    if (has_id_string()) {
      if (id_string_ != &::google::protobuf::internal::GetEmptyString()) {
        id_string_->clear();
      }
    }
    if (has_parent_id_string()) {
      if (parent_id_string_ != &::google::protobuf::internal::GetEmptyString()) {
        parent_id_string_->clear();
      }
    }
    position_in_parent_ = GOOGLE_LONGLONG(0);
    version_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_non_unique_name()) {
      if (non_unique_name_ != &::google::protobuf::internal::GetEmptyString()) {
        non_unique_name_->clear();
      }
    }
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::GetEmptyString()) {
        error_message_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommitResponse_EntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sync_pb.CommitResponse.ResponseType response_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::CommitResponse_ResponseType_IsValid(value)) {
            set_response_type(static_cast< ::sync_pb::CommitResponse_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id_string;
        break;
      }

      // optional string id_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parent_id_string;
        break;
      }

      // optional string parent_id_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_id_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_position_in_parent;
        break;
      }

      // optional int64 position_in_parent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position_in_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_in_parent_)));
          set_has_position_in_parent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_version;
        break;
      }

      // optional int64 version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_non_unique_name;
        break;
      }

      // optional string non_unique_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_non_unique_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_non_unique_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_error_message;
        break;
      }

      // optional string error_message = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mtime;
        break;
      }

      // optional int64 mtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommitResponse_EntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sync_pb.CommitResponse.ResponseType response_type = 2;
  if (has_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response_type(), output);
  }

  // optional string id_string = 3;
  if (has_id_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id_string(), output);
  }

  // optional string parent_id_string = 4;
  if (has_parent_id_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->parent_id_string(), output);
  }

  // optional int64 position_in_parent = 5;
  if (has_position_in_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->position_in_parent(), output);
  }

  // optional int64 version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->version(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // optional string non_unique_name = 8;
  if (has_non_unique_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->non_unique_name(), output);
  }

  // optional string error_message = 9;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->error_message(), output);
  }

  // optional int64 mtime = 10;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->mtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int CommitResponse_EntryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sync_pb.CommitResponse.ResponseType response_type = 2;
    if (has_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
    }

    // optional string id_string = 3;
    if (has_id_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_string());
    }

    // optional string parent_id_string = 4;
    if (has_parent_id_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_id_string());
    }

    // optional int64 position_in_parent = 5;
    if (has_position_in_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->position_in_parent());
    }

    // optional int64 version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string non_unique_name = 8;
    if (has_non_unique_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->non_unique_name());
    }

    // optional string error_message = 9;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 mtime = 10;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse_EntryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitResponse_EntryResponse*>(&from));
}

void CommitResponse_EntryResponse::MergeFrom(const CommitResponse_EntryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_type()) {
      set_response_type(from.response_type());
    }
    if (from.has_id_string()) {
      set_id_string(from.id_string());
    }
    if (from.has_parent_id_string()) {
      set_parent_id_string(from.parent_id_string());
    }
    if (from.has_position_in_parent()) {
      set_position_in_parent(from.position_in_parent());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_non_unique_name()) {
      set_non_unique_name(from.non_unique_name());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommitResponse_EntryResponse::CopyFrom(const CommitResponse_EntryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse_EntryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommitResponse_EntryResponse::Swap(CommitResponse_EntryResponse* other) {
  if (other != this) {
    std::swap(response_type_, other->response_type_);
    std::swap(id_string_, other->id_string_);
    std::swap(parent_id_string_, other->parent_id_string_);
    std::swap(position_in_parent_, other->position_in_parent_);
    std::swap(version_, other->version_);
    std::swap(name_, other->name_);
    std::swap(non_unique_name_, other->non_unique_name_);
    std::swap(error_message_, other->error_message_);
    std::swap(mtime_, other->mtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommitResponse_EntryResponse::GetTypeName() const {
  return "sync_pb.CommitResponse.EntryResponse";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommitResponse::kEntryresponseFieldNumber;
#endif  // !_MSC_VER

CommitResponse::CommitResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CommitResponse::InitAsDefaultInstance() {
}

CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CommitResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommitResponse::~CommitResponse() {
  SharedDtor();
}

void CommitResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommitResponse& CommitResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

CommitResponse* CommitResponse::default_instance_ = NULL;

CommitResponse* CommitResponse::New() const {
  return new CommitResponse;
}

void CommitResponse::Clear() {
  entryresponse_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group EntryResponse = 1 {
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_entryresponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                1, input, add_entryresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(11)) goto parse_entryresponse;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated group EntryResponse = 1 {
  for (int i = 0; i < this->entryresponse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroup(
      1, this->entryresponse(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int CommitResponse::ByteSize() const {
  int total_size = 0;

  // repeated group EntryResponse = 1 {
  total_size += 2 * this->entryresponse_size();
  for (int i = 0; i < this->entryresponse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->entryresponse(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommitResponse*>(&from));
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  entryresponse_.MergeFrom(from.entryresponse_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {

  for (int i = 0; i < entryresponse_size(); i++) {
    if (!this->entryresponse(i).IsInitialized()) return false;
  }
  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other != this) {
    entryresponse_.Swap(&other->entryresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommitResponse::GetTypeName() const {
  return "sync_pb.CommitResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUpdatesResponse::kEntriesFieldNumber;
const int GetUpdatesResponse::kNewTimestampFieldNumber;
const int GetUpdatesResponse::kDeprecatedNewestTimestampFieldNumber;
const int GetUpdatesResponse::kChangesRemainingFieldNumber;
const int GetUpdatesResponse::kNewProgressMarkerFieldNumber;
const int GetUpdatesResponse::kEncryptionKeysFieldNumber;
#endif  // !_MSC_VER

GetUpdatesResponse::GetUpdatesResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetUpdatesResponse::InitAsDefaultInstance() {
}

GetUpdatesResponse::GetUpdatesResponse(const GetUpdatesResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetUpdatesResponse::SharedCtor() {
  _cached_size_ = 0;
  new_timestamp_ = GOOGLE_LONGLONG(0);
  deprecated_newest_timestamp_ = GOOGLE_LONGLONG(0);
  changes_remaining_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUpdatesResponse::~GetUpdatesResponse() {
  SharedDtor();
}

void GetUpdatesResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUpdatesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdatesResponse& GetUpdatesResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

GetUpdatesResponse* GetUpdatesResponse::default_instance_ = NULL;

GetUpdatesResponse* GetUpdatesResponse::New() const {
  return new GetUpdatesResponse;
}

void GetUpdatesResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    new_timestamp_ = GOOGLE_LONGLONG(0);
    deprecated_newest_timestamp_ = GOOGLE_LONGLONG(0);
    changes_remaining_ = GOOGLE_LONGLONG(0);
  }
  entries_.Clear();
  new_progress_marker_.Clear();
  encryption_keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUpdatesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.SyncEntity entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectTag(16)) goto parse_new_timestamp;
        break;
      }

      // optional int64 new_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_timestamp_)));
          set_has_new_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deprecated_newest_timestamp;
        break;
      }

      // optional int64 deprecated_newest_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_newest_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deprecated_newest_timestamp_)));
          set_has_deprecated_newest_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_changes_remaining;
        break;
      }

      // optional int64 changes_remaining = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changes_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &changes_remaining_)));
          set_has_changes_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_progress_marker;
        break;
      }

      // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_progress_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_progress_marker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_progress_marker;
        if (input->ExpectTag(50)) goto parse_encryption_keys;
        break;
      }

      // repeated bytes encryption_keys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encryption_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_encryption_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_encryption_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUpdatesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sync_pb.SyncEntity entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entries(i), output);
  }

  // optional int64 new_timestamp = 2;
  if (has_new_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->new_timestamp(), output);
  }

  // optional int64 deprecated_newest_timestamp = 3;
  if (has_deprecated_newest_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->deprecated_newest_timestamp(), output);
  }

  // optional int64 changes_remaining = 4;
  if (has_changes_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->changes_remaining(), output);
  }

  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
  for (int i = 0; i < this->new_progress_marker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->new_progress_marker(i), output);
  }

  // repeated bytes encryption_keys = 6;
  for (int i = 0; i < this->encryption_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->encryption_keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GetUpdatesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 new_timestamp = 2;
    if (has_new_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_timestamp());
    }

    // optional int64 deprecated_newest_timestamp = 3;
    if (has_deprecated_newest_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deprecated_newest_timestamp());
    }

    // optional int64 changes_remaining = 4;
    if (has_changes_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changes_remaining());
    }

  }
  // repeated .sync_pb.SyncEntity entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 5;
  total_size += 1 * this->new_progress_marker_size();
  for (int i = 0; i < this->new_progress_marker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_progress_marker(i));
  }

  // repeated bytes encryption_keys = 6;
  total_size += 1 * this->encryption_keys_size();
  for (int i = 0; i < this->encryption_keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->encryption_keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatesResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdatesResponse*>(&from));
}

void GetUpdatesResponse::MergeFrom(const GetUpdatesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  new_progress_marker_.MergeFrom(from.new_progress_marker_);
  encryption_keys_.MergeFrom(from.encryption_keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_new_timestamp()) {
      set_new_timestamp(from.new_timestamp());
    }
    if (from.has_deprecated_newest_timestamp()) {
      set_deprecated_newest_timestamp(from.deprecated_newest_timestamp());
    }
    if (from.has_changes_remaining()) {
      set_changes_remaining(from.changes_remaining());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUpdatesResponse::CopyFrom(const GetUpdatesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesResponse::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void GetUpdatesResponse::Swap(GetUpdatesResponse* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(new_timestamp_, other->new_timestamp_);
    std::swap(deprecated_newest_timestamp_, other->deprecated_newest_timestamp_);
    std::swap(changes_remaining_, other->changes_remaining_);
    new_progress_marker_.Swap(&other->new_progress_marker_);
    encryption_keys_.Swap(&other->encryption_keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUpdatesResponse::GetTypeName() const {
  return "sync_pb.GetUpdatesResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUpdatesMetadataResponse::kChangesRemainingFieldNumber;
const int GetUpdatesMetadataResponse::kNewProgressMarkerFieldNumber;
#endif  // !_MSC_VER

GetUpdatesMetadataResponse::GetUpdatesMetadataResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetUpdatesMetadataResponse::InitAsDefaultInstance() {
}

GetUpdatesMetadataResponse::GetUpdatesMetadataResponse(const GetUpdatesMetadataResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetUpdatesMetadataResponse::SharedCtor() {
  _cached_size_ = 0;
  changes_remaining_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUpdatesMetadataResponse::~GetUpdatesMetadataResponse() {
  SharedDtor();
}

void GetUpdatesMetadataResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUpdatesMetadataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdatesMetadataResponse& GetUpdatesMetadataResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

GetUpdatesMetadataResponse* GetUpdatesMetadataResponse::default_instance_ = NULL;

GetUpdatesMetadataResponse* GetUpdatesMetadataResponse::New() const {
  return new GetUpdatesMetadataResponse;
}

void GetUpdatesMetadataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    changes_remaining_ = GOOGLE_LONGLONG(0);
  }
  new_progress_marker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUpdatesMetadataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 changes_remaining = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &changes_remaining_)));
          set_has_changes_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_progress_marker;
        break;
      }

      // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_progress_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_progress_marker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_progress_marker;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUpdatesMetadataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 changes_remaining = 1;
  if (has_changes_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->changes_remaining(), output);
  }

  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 2;
  for (int i = 0; i < this->new_progress_marker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->new_progress_marker(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GetUpdatesMetadataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 changes_remaining = 1;
    if (has_changes_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changes_remaining());
    }

  }
  // repeated .sync_pb.DataTypeProgressMarker new_progress_marker = 2;
  total_size += 1 * this->new_progress_marker_size();
  for (int i = 0; i < this->new_progress_marker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_progress_marker(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatesMetadataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdatesMetadataResponse*>(&from));
}

void GetUpdatesMetadataResponse::MergeFrom(const GetUpdatesMetadataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_progress_marker_.MergeFrom(from.new_progress_marker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changes_remaining()) {
      set_changes_remaining(from.changes_remaining());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUpdatesMetadataResponse::CopyFrom(const GetUpdatesMetadataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesMetadataResponse::IsInitialized() const {

  return true;
}

void GetUpdatesMetadataResponse::Swap(GetUpdatesMetadataResponse* other) {
  if (other != this) {
    std::swap(changes_remaining_, other->changes_remaining_);
    new_progress_marker_.Swap(&other->new_progress_marker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUpdatesMetadataResponse::GetTypeName() const {
  return "sync_pb.GetUpdatesMetadataResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int GetUpdatesStreamingResponse::kEntriesFieldNumber;
#endif  // !_MSC_VER

GetUpdatesStreamingResponse::GetUpdatesStreamingResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetUpdatesStreamingResponse::InitAsDefaultInstance() {
}

GetUpdatesStreamingResponse::GetUpdatesStreamingResponse(const GetUpdatesStreamingResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetUpdatesStreamingResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUpdatesStreamingResponse::~GetUpdatesStreamingResponse() {
  SharedDtor();
}

void GetUpdatesStreamingResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUpdatesStreamingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUpdatesStreamingResponse& GetUpdatesStreamingResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

GetUpdatesStreamingResponse* GetUpdatesStreamingResponse::default_instance_ = NULL;

GetUpdatesStreamingResponse* GetUpdatesStreamingResponse::New() const {
  return new GetUpdatesStreamingResponse;
}

void GetUpdatesStreamingResponse::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUpdatesStreamingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.SyncEntity entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUpdatesStreamingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sync_pb.SyncEntity entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int GetUpdatesStreamingResponse::ByteSize() const {
  int total_size = 0;

  // repeated .sync_pb.SyncEntity entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatesStreamingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetUpdatesStreamingResponse*>(&from));
}

void GetUpdatesStreamingResponse::MergeFrom(const GetUpdatesStreamingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUpdatesStreamingResponse::CopyFrom(const GetUpdatesStreamingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatesStreamingResponse::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void GetUpdatesStreamingResponse::Swap(GetUpdatesStreamingResponse* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetUpdatesStreamingResponse::GetTypeName() const {
  return "sync_pb.GetUpdatesStreamingResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UserIdentification::kEmailFieldNumber;
const int UserIdentification::kDisplayNameFieldNumber;
const int UserIdentification::kObfuscatedIdFieldNumber;
#endif  // !_MSC_VER

UserIdentification::UserIdentification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserIdentification::InitAsDefaultInstance() {
}

UserIdentification::UserIdentification(const UserIdentification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserIdentification::SharedCtor() {
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  obfuscated_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserIdentification::~UserIdentification() {
  SharedDtor();
}

void UserIdentification::SharedDtor() {
  if (email_ != &::google::protobuf::internal::GetEmptyString()) {
    delete email_;
  }
  if (display_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete display_name_;
  }
  if (obfuscated_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete obfuscated_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserIdentification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserIdentification& UserIdentification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

UserIdentification* UserIdentification::default_instance_ = NULL;

UserIdentification* UserIdentification::New() const {
  return new UserIdentification;
}

void UserIdentification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyString()) {
        email_->clear();
      }
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::GetEmptyString()) {
        display_name_->clear();
      }
    }
    if (has_obfuscated_id()) {
      if (obfuscated_id_ != &::google::protobuf::internal::GetEmptyString()) {
        obfuscated_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserIdentification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display_name;
        break;
      }

      // optional string display_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obfuscated_id;
        break;
      }

      // optional string obfuscated_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obfuscated_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obfuscated_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserIdentification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email(), output);
  }

  // optional string display_name = 2;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->display_name(), output);
  }

  // optional string obfuscated_id = 3;
  if (has_obfuscated_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->obfuscated_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int UserIdentification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string display_name = 2;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string obfuscated_id = 3;
    if (has_obfuscated_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->obfuscated_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserIdentification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserIdentification*>(&from));
}

void UserIdentification::MergeFrom(const UserIdentification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_obfuscated_id()) {
      set_obfuscated_id(from.obfuscated_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserIdentification::CopyFrom(const UserIdentification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIdentification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserIdentification::Swap(UserIdentification* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(display_name_, other->display_name_);
    std::swap(obfuscated_id_, other->obfuscated_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserIdentification::GetTypeName() const {
  return "sync_pb.UserIdentification";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateResponse::kUserFieldNumber;
#endif  // !_MSC_VER

AuthenticateResponse::AuthenticateResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AuthenticateResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_ = const_cast< ::sync_pb::UserIdentification*>(
      ::sync_pb::UserIdentification::internal_default_instance());
#else
  user_ = const_cast< ::sync_pb::UserIdentification*>(&::sync_pb::UserIdentification::default_instance());
#endif
}

AuthenticateResponse::AuthenticateResponse(const AuthenticateResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AuthenticateResponse::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateResponse::~AuthenticateResponse() {
  SharedDtor();
}

void AuthenticateResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_;
  }
}

void AuthenticateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateResponse& AuthenticateResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

AuthenticateResponse* AuthenticateResponse::default_instance_ = NULL;

AuthenticateResponse* AuthenticateResponse::New() const {
  return new AuthenticateResponse;
}

void AuthenticateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::sync_pb::UserIdentification::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthenticateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserIdentification user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthenticateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.UserIdentification user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int AuthenticateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.UserIdentification user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateResponse*>(&from));
}

void AuthenticateResponse::MergeFrom(const AuthenticateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::sync_pb::UserIdentification::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthenticateResponse::CopyFrom(const AuthenticateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateResponse::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void AuthenticateResponse::Swap(AuthenticateResponse* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AuthenticateResponse::GetTypeName() const {
  return "sync_pb.AuthenticateResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int ThrottleParameters::kMinMeasurePayloadSizeFieldNumber;
const int ThrottleParameters::kTargetUtilizationFieldNumber;
const int ThrottleParameters::kMeasureIntervalMaxFieldNumber;
const int ThrottleParameters::kMeasureIntervalMinFieldNumber;
const int ThrottleParameters::kObservationWindowFieldNumber;
#endif  // !_MSC_VER

ThrottleParameters::ThrottleParameters()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ThrottleParameters::InitAsDefaultInstance() {
}

ThrottleParameters::ThrottleParameters(const ThrottleParameters& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ThrottleParameters::SharedCtor() {
  _cached_size_ = 0;
  min_measure_payload_size_ = 0;
  target_utilization_ = 0;
  measure_interval_max_ = 0;
  measure_interval_min_ = 0;
  observation_window_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThrottleParameters::~ThrottleParameters() {
  SharedDtor();
}

void ThrottleParameters::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ThrottleParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ThrottleParameters& ThrottleParameters::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ThrottleParameters* ThrottleParameters::default_instance_ = NULL;

ThrottleParameters* ThrottleParameters::New() const {
  return new ThrottleParameters;
}

void ThrottleParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_measure_payload_size_ = 0;
    target_utilization_ = 0;
    measure_interval_max_ = 0;
    measure_interval_min_ = 0;
    observation_window_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThrottleParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_measure_payload_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_measure_payload_size_)));
          set_has_min_measure_payload_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_utilization;
        break;
      }

      // required double target_utilization = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_utilization_)));
          set_has_target_utilization();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_measure_interval_max;
        break;
      }

      // required double measure_interval_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_measure_interval_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measure_interval_max_)));
          set_has_measure_interval_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_measure_interval_min;
        break;
      }

      // required double measure_interval_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_measure_interval_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measure_interval_min_)));
          set_has_measure_interval_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_observation_window;
        break;
      }

      // required double observation_window = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_observation_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &observation_window_)));
          set_has_observation_window();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThrottleParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 min_measure_payload_size = 1;
  if (has_min_measure_payload_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_measure_payload_size(), output);
  }

  // required double target_utilization = 2;
  if (has_target_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->target_utilization(), output);
  }

  // required double measure_interval_max = 3;
  if (has_measure_interval_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->measure_interval_max(), output);
  }

  // required double measure_interval_min = 4;
  if (has_measure_interval_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->measure_interval_min(), output);
  }

  // required double observation_window = 5;
  if (has_observation_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->observation_window(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ThrottleParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 min_measure_payload_size = 1;
    if (has_min_measure_payload_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_measure_payload_size());
    }

    // required double target_utilization = 2;
    if (has_target_utilization()) {
      total_size += 1 + 8;
    }

    // required double measure_interval_max = 3;
    if (has_measure_interval_max()) {
      total_size += 1 + 8;
    }

    // required double measure_interval_min = 4;
    if (has_measure_interval_min()) {
      total_size += 1 + 8;
    }

    // required double observation_window = 5;
    if (has_observation_window()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThrottleParameters::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ThrottleParameters*>(&from));
}

void ThrottleParameters::MergeFrom(const ThrottleParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_measure_payload_size()) {
      set_min_measure_payload_size(from.min_measure_payload_size());
    }
    if (from.has_target_utilization()) {
      set_target_utilization(from.target_utilization());
    }
    if (from.has_measure_interval_max()) {
      set_measure_interval_max(from.measure_interval_max());
    }
    if (from.has_measure_interval_min()) {
      set_measure_interval_min(from.measure_interval_min());
    }
    if (from.has_observation_window()) {
      set_observation_window(from.observation_window());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThrottleParameters::CopyFrom(const ThrottleParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThrottleParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ThrottleParameters::Swap(ThrottleParameters* other) {
  if (other != this) {
    std::swap(min_measure_payload_size_, other->min_measure_payload_size_);
    std::swap(target_utilization_, other->target_utilization_);
    std::swap(measure_interval_max_, other->measure_interval_max_);
    std::swap(measure_interval_min_, other->measure_interval_min_);
    std::swap(observation_window_, other->observation_window_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ThrottleParameters::GetTypeName() const {
  return "sync_pb.ThrottleParameters";
}


// ===================================================================

#ifndef _MSC_VER
const int ClientToServerResponse_Error::kErrorTypeFieldNumber;
const int ClientToServerResponse_Error::kErrorDescriptionFieldNumber;
const int ClientToServerResponse_Error::kUrlFieldNumber;
const int ClientToServerResponse_Error::kActionFieldNumber;
const int ClientToServerResponse_Error::kErrorDataTypeIdsFieldNumber;
#endif  // !_MSC_VER

ClientToServerResponse_Error::ClientToServerResponse_Error()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientToServerResponse_Error::InitAsDefaultInstance() {
}

ClientToServerResponse_Error::ClientToServerResponse_Error(const ClientToServerResponse_Error& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToServerResponse_Error::SharedCtor() {
  _cached_size_ = 0;
  error_type_ = 100;
  error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  action_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToServerResponse_Error::~ClientToServerResponse_Error() {
  SharedDtor();
}

void ClientToServerResponse_Error::SharedDtor() {
  if (error_description_ != &::google::protobuf::internal::GetEmptyString()) {
    delete error_description_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientToServerResponse_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToServerResponse_Error& ClientToServerResponse_Error::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ClientToServerResponse_Error* ClientToServerResponse_Error::default_instance_ = NULL;

ClientToServerResponse_Error* ClientToServerResponse_Error::New() const {
  return new ClientToServerResponse_Error;
}

void ClientToServerResponse_Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_type_ = 100;
    if (has_error_description()) {
      if (error_description_ != &::google::protobuf::internal::GetEmptyString()) {
        error_description_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyString()) {
        url_->clear();
      }
    }
    action_ = 5;
  }
  error_data_type_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToServerResponse_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_ErrorType_IsValid(value)) {
            set_error_type(static_cast< ::sync_pb::SyncEnums_ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_description;
        break;
      }

      // optional string error_description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_Action_IsValid(value)) {
            set_action(static_cast< ::sync_pb::SyncEnums_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_error_data_type_ids;
        break;
      }

      // repeated int32 error_data_type_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_data_type_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_error_data_type_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_error_data_type_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_error_data_type_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToServerResponse_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
  if (has_error_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  // optional string error_description = 2;
  if (has_error_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_description(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // repeated int32 error_data_type_ids = 5;
  for (int i = 0; i < this->error_data_type_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->error_data_type_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ClientToServerResponse_Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.SyncEnums.ErrorType error_type = 1 [default = UNKNOWN];
    if (has_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
    }

    // optional string error_description = 2;
    if (has_error_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_description());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .sync_pb.SyncEnums.Action action = 4 [default = UNKNOWN_ACTION];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  // repeated int32 error_data_type_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->error_data_type_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->error_data_type_ids(i));
    }
    total_size += 1 * this->error_data_type_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServerResponse_Error::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToServerResponse_Error*>(&from));
}

void ClientToServerResponse_Error::MergeFrom(const ClientToServerResponse_Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  error_data_type_ids_.MergeFrom(from.error_data_type_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_type()) {
      set_error_type(from.error_type());
    }
    if (from.has_error_description()) {
      set_error_description(from.error_description());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToServerResponse_Error::CopyFrom(const ClientToServerResponse_Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerResponse_Error::IsInitialized() const {

  return true;
}

void ClientToServerResponse_Error::Swap(ClientToServerResponse_Error* other) {
  if (other != this) {
    std::swap(error_type_, other->error_type_);
    std::swap(error_description_, other->error_description_);
    std::swap(url_, other->url_);
    std::swap(action_, other->action_);
    error_data_type_ids_.Swap(&other->error_data_type_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientToServerResponse_Error::GetTypeName() const {
  return "sync_pb.ClientToServerResponse.Error";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientToServerResponse::kCommitFieldNumber;
const int ClientToServerResponse::kGetUpdatesFieldNumber;
const int ClientToServerResponse::kAuthenticateFieldNumber;
const int ClientToServerResponse::kErrorCodeFieldNumber;
const int ClientToServerResponse::kErrorMessageFieldNumber;
const int ClientToServerResponse::kStoreBirthdayFieldNumber;
const int ClientToServerResponse::kClientCommandFieldNumber;
const int ClientToServerResponse::kProfilingDataFieldNumber;
const int ClientToServerResponse::kClearUserDataFieldNumber;
const int ClientToServerResponse::kStreamMetadataFieldNumber;
const int ClientToServerResponse::kStreamDataFieldNumber;
const int ClientToServerResponse::kMigratedDataTypeIdFieldNumber;
const int ClientToServerResponse::kErrorFieldNumber;
const int ClientToServerResponse::kNewBagOfChipsFieldNumber;
#endif  // !_MSC_VER

ClientToServerResponse::ClientToServerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ClientToServerResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  commit_ = const_cast< ::sync_pb::CommitResponse*>(
      ::sync_pb::CommitResponse::internal_default_instance());
#else
  commit_ = const_cast< ::sync_pb::CommitResponse*>(&::sync_pb::CommitResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  get_updates_ = const_cast< ::sync_pb::GetUpdatesResponse*>(
      ::sync_pb::GetUpdatesResponse::internal_default_instance());
#else
  get_updates_ = const_cast< ::sync_pb::GetUpdatesResponse*>(&::sync_pb::GetUpdatesResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  authenticate_ = const_cast< ::sync_pb::AuthenticateResponse*>(
      ::sync_pb::AuthenticateResponse::internal_default_instance());
#else
  authenticate_ = const_cast< ::sync_pb::AuthenticateResponse*>(&::sync_pb::AuthenticateResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  client_command_ = const_cast< ::sync_pb::ClientCommand*>(
      ::sync_pb::ClientCommand::internal_default_instance());
#else
  client_command_ = const_cast< ::sync_pb::ClientCommand*>(&::sync_pb::ClientCommand::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  profiling_data_ = const_cast< ::sync_pb::ProfilingData*>(
      ::sync_pb::ProfilingData::internal_default_instance());
#else
  profiling_data_ = const_cast< ::sync_pb::ProfilingData*>(&::sync_pb::ProfilingData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  clear_user_data_ = const_cast< ::sync_pb::ClearUserDataResponse*>(
      ::sync_pb::ClearUserDataResponse::internal_default_instance());
#else
  clear_user_data_ = const_cast< ::sync_pb::ClearUserDataResponse*>(&::sync_pb::ClearUserDataResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stream_metadata_ = const_cast< ::sync_pb::GetUpdatesMetadataResponse*>(
      ::sync_pb::GetUpdatesMetadataResponse::internal_default_instance());
#else
  stream_metadata_ = const_cast< ::sync_pb::GetUpdatesMetadataResponse*>(&::sync_pb::GetUpdatesMetadataResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stream_data_ = const_cast< ::sync_pb::GetUpdatesStreamingResponse*>(
      ::sync_pb::GetUpdatesStreamingResponse::internal_default_instance());
#else
  stream_data_ = const_cast< ::sync_pb::GetUpdatesStreamingResponse*>(&::sync_pb::GetUpdatesStreamingResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  error_ = const_cast< ::sync_pb::ClientToServerResponse_Error*>(
      ::sync_pb::ClientToServerResponse_Error::internal_default_instance());
#else
  error_ = const_cast< ::sync_pb::ClientToServerResponse_Error*>(&::sync_pb::ClientToServerResponse_Error::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  new_bag_of_chips_ = const_cast< ::sync_pb::ChipBag*>(
      ::sync_pb::ChipBag::internal_default_instance());
#else
  new_bag_of_chips_ = const_cast< ::sync_pb::ChipBag*>(&::sync_pb::ChipBag::default_instance());
#endif
}

ClientToServerResponse::ClientToServerResponse(const ClientToServerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToServerResponse::SharedCtor() {
  _cached_size_ = 0;
  commit_ = NULL;
  get_updates_ = NULL;
  authenticate_ = NULL;
  error_code_ = 100;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  store_birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  client_command_ = NULL;
  profiling_data_ = NULL;
  clear_user_data_ = NULL;
  stream_metadata_ = NULL;
  stream_data_ = NULL;
  error_ = NULL;
  new_bag_of_chips_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToServerResponse::~ClientToServerResponse() {
  SharedDtor();
}

void ClientToServerResponse::SharedDtor() {
  if (error_message_ != &::google::protobuf::internal::GetEmptyString()) {
    delete error_message_;
  }
  if (store_birthday_ != &::google::protobuf::internal::GetEmptyString()) {
    delete store_birthday_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete commit_;
    delete get_updates_;
    delete authenticate_;
    delete client_command_;
    delete profiling_data_;
    delete clear_user_data_;
    delete stream_metadata_;
    delete stream_data_;
    delete error_;
    delete new_bag_of_chips_;
  }
}

void ClientToServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToServerResponse& ClientToServerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sync_2eproto();
#endif
  return *default_instance_;
}

ClientToServerResponse* ClientToServerResponse::default_instance_ = NULL;

ClientToServerResponse* ClientToServerResponse::New() const {
  return new ClientToServerResponse;
}

void ClientToServerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commit()) {
      if (commit_ != NULL) commit_->::sync_pb::CommitResponse::Clear();
    }
    if (has_get_updates()) {
      if (get_updates_ != NULL) get_updates_->::sync_pb::GetUpdatesResponse::Clear();
    }
    if (has_authenticate()) {
      if (authenticate_ != NULL) authenticate_->::sync_pb::AuthenticateResponse::Clear();
    }
    error_code_ = 100;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::GetEmptyString()) {
        error_message_->clear();
      }
    }
    if (has_store_birthday()) {
      if (store_birthday_ != &::google::protobuf::internal::GetEmptyString()) {
        store_birthday_->clear();
      }
    }
    if (has_client_command()) {
      if (client_command_ != NULL) client_command_->::sync_pb::ClientCommand::Clear();
    }
    if (has_profiling_data()) {
      if (profiling_data_ != NULL) profiling_data_->::sync_pb::ProfilingData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_clear_user_data()) {
      if (clear_user_data_ != NULL) clear_user_data_->::sync_pb::ClearUserDataResponse::Clear();
    }
    if (has_stream_metadata()) {
      if (stream_metadata_ != NULL) stream_metadata_->::sync_pb::GetUpdatesMetadataResponse::Clear();
    }
    if (has_stream_data()) {
      if (stream_data_ != NULL) stream_data_->::sync_pb::GetUpdatesStreamingResponse::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::sync_pb::ClientToServerResponse_Error::Clear();
    }
    if (has_new_bag_of_chips()) {
      if (new_bag_of_chips_ != NULL) new_bag_of_chips_->::sync_pb::ChipBag::Clear();
    }
  }
  migrated_data_type_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.CommitResponse commit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_get_updates;
        break;
      }

      // optional .sync_pb.GetUpdatesResponse get_updates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_authenticate;
        break;
      }

      // optional .sync_pb.AuthenticateResponse authenticate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authenticate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authenticate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_code;
        break;
      }

      // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_ErrorType_IsValid(value)) {
            set_error_code(static_cast< ::sync_pb::SyncEnums_ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error_message;
        break;
      }

      // optional string error_message = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_store_birthday;
        break;
      }

      // optional string store_birthday = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_birthday()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_client_command;
        break;
      }

      // optional .sync_pb.ClientCommand client_command = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_profiling_data;
        break;
      }

      // optional .sync_pb.ProfilingData profiling_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profiling_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profiling_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_clear_user_data;
        break;
      }

      // optional .sync_pb.ClearUserDataResponse clear_user_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clear_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_user_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stream_metadata;
        break;
      }

      // optional .sync_pb.GetUpdatesMetadataResponse stream_metadata = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_stream_data;
        break;
      }

      // optional .sync_pb.GetUpdatesStreamingResponse stream_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_migrated_data_type_id;
        break;
      }

      // repeated int32 migrated_data_type_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_migrated_data_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_migrated_data_type_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_migrated_data_type_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_migrated_data_type_id;
        if (input->ExpectTag(106)) goto parse_error;
        break;
      }

      // optional .sync_pb.ClientToServerResponse.Error error = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_new_bag_of_chips;
        break;
      }

      // optional .sync_pb.ChipBag new_bag_of_chips = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_bag_of_chips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_bag_of_chips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.CommitResponse commit = 1;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->commit(), output);
  }

  // optional .sync_pb.GetUpdatesResponse get_updates = 2;
  if (has_get_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->get_updates(), output);
  }

  // optional .sync_pb.AuthenticateResponse authenticate = 3;
  if (has_authenticate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->authenticate(), output);
  }

  // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error_code(), output);
  }

  // optional string error_message = 5;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error_message(), output);
  }

  // optional string store_birthday = 6;
  if (has_store_birthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->store_birthday(), output);
  }

  // optional .sync_pb.ClientCommand client_command = 7;
  if (has_client_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->client_command(), output);
  }

  // optional .sync_pb.ProfilingData profiling_data = 8;
  if (has_profiling_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->profiling_data(), output);
  }

  // optional .sync_pb.ClearUserDataResponse clear_user_data = 9;
  if (has_clear_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->clear_user_data(), output);
  }

  // optional .sync_pb.GetUpdatesMetadataResponse stream_metadata = 10;
  if (has_stream_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->stream_metadata(), output);
  }

  // optional .sync_pb.GetUpdatesStreamingResponse stream_data = 11;
  if (has_stream_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->stream_data(), output);
  }

  // repeated int32 migrated_data_type_id = 12;
  for (int i = 0; i < this->migrated_data_type_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->migrated_data_type_id(i), output);
  }

  // optional .sync_pb.ClientToServerResponse.Error error = 13;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->error(), output);
  }

  // optional .sync_pb.ChipBag new_bag_of_chips = 14;
  if (has_new_bag_of_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->new_bag_of_chips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int ClientToServerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.CommitResponse commit = 1;
    if (has_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commit());
    }

    // optional .sync_pb.GetUpdatesResponse get_updates = 2;
    if (has_get_updates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_updates());
    }

    // optional .sync_pb.AuthenticateResponse authenticate = 3;
    if (has_authenticate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authenticate());
    }

    // optional .sync_pb.SyncEnums.ErrorType error_code = 4 [default = UNKNOWN];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional string error_message = 5;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional string store_birthday = 6;
    if (has_store_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_birthday());
    }

    // optional .sync_pb.ClientCommand client_command = 7;
    if (has_client_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_command());
    }

    // optional .sync_pb.ProfilingData profiling_data = 8;
    if (has_profiling_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profiling_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .sync_pb.ClearUserDataResponse clear_user_data = 9;
    if (has_clear_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clear_user_data());
    }

    // optional .sync_pb.GetUpdatesMetadataResponse stream_metadata = 10;
    if (has_stream_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream_metadata());
    }

    // optional .sync_pb.GetUpdatesStreamingResponse stream_data = 11;
    if (has_stream_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream_data());
    }

    // optional .sync_pb.ClientToServerResponse.Error error = 13;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional .sync_pb.ChipBag new_bag_of_chips = 14;
    if (has_new_bag_of_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_bag_of_chips());
    }

  }
  // repeated int32 migrated_data_type_id = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->migrated_data_type_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->migrated_data_type_id(i));
    }
    total_size += 1 * this->migrated_data_type_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToServerResponse*>(&from));
}

void ClientToServerResponse::MergeFrom(const ClientToServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  migrated_data_type_id_.MergeFrom(from.migrated_data_type_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commit()) {
      mutable_commit()->::sync_pb::CommitResponse::MergeFrom(from.commit());
    }
    if (from.has_get_updates()) {
      mutable_get_updates()->::sync_pb::GetUpdatesResponse::MergeFrom(from.get_updates());
    }
    if (from.has_authenticate()) {
      mutable_authenticate()->::sync_pb::AuthenticateResponse::MergeFrom(from.authenticate());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
    if (from.has_store_birthday()) {
      set_store_birthday(from.store_birthday());
    }
    if (from.has_client_command()) {
      mutable_client_command()->::sync_pb::ClientCommand::MergeFrom(from.client_command());
    }
    if (from.has_profiling_data()) {
      mutable_profiling_data()->::sync_pb::ProfilingData::MergeFrom(from.profiling_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clear_user_data()) {
      mutable_clear_user_data()->::sync_pb::ClearUserDataResponse::MergeFrom(from.clear_user_data());
    }
    if (from.has_stream_metadata()) {
      mutable_stream_metadata()->::sync_pb::GetUpdatesMetadataResponse::MergeFrom(from.stream_metadata());
    }
    if (from.has_stream_data()) {
      mutable_stream_data()->::sync_pb::GetUpdatesStreamingResponse::MergeFrom(from.stream_data());
    }
    if (from.has_error()) {
      mutable_error()->::sync_pb::ClientToServerResponse_Error::MergeFrom(from.error());
    }
    if (from.has_new_bag_of_chips()) {
      mutable_new_bag_of_chips()->::sync_pb::ChipBag::MergeFrom(from.new_bag_of_chips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToServerResponse::CopyFrom(const ClientToServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerResponse::IsInitialized() const {

  if (has_commit()) {
    if (!this->commit().IsInitialized()) return false;
  }
  if (has_get_updates()) {
    if (!this->get_updates().IsInitialized()) return false;
  }
  if (has_authenticate()) {
    if (!this->authenticate().IsInitialized()) return false;
  }
  if (has_stream_data()) {
    if (!this->stream_data().IsInitialized()) return false;
  }
  return true;
}

void ClientToServerResponse::Swap(ClientToServerResponse* other) {
  if (other != this) {
    std::swap(commit_, other->commit_);
    std::swap(get_updates_, other->get_updates_);
    std::swap(authenticate_, other->authenticate_);
    std::swap(error_code_, other->error_code_);
    std::swap(error_message_, other->error_message_);
    std::swap(store_birthday_, other->store_birthday_);
    std::swap(client_command_, other->client_command_);
    std::swap(profiling_data_, other->profiling_data_);
    std::swap(clear_user_data_, other->clear_user_data_);
    std::swap(stream_metadata_, other->stream_metadata_);
    std::swap(stream_data_, other->stream_data_);
    migrated_data_type_id_.Swap(&other->migrated_data_type_id_);
    std::swap(error_, other->error_);
    std::swap(new_bag_of_chips_, other->new_bag_of_chips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientToServerResponse::GetTypeName() const {
  return "sync_pb.ClientToServerResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
