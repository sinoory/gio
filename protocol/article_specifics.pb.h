// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: article_specifics.proto

#ifndef PROTOBUF_article_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_article_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/base/sync_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_EXPORT protobuf_AddDesc_article_5fspecifics_2eproto();
void protobuf_AssignDesc_article_5fspecifics_2eproto();
void protobuf_ShutdownFile_article_5fspecifics_2eproto();

class ArticleSpecifics;
class ArticlePage;

// ===================================================================

class SYNC_EXPORT ArticleSpecifics : public ::google::protobuf::MessageLite {
 public:
  ArticleSpecifics();
  virtual ~ArticleSpecifics();

  ArticleSpecifics(const ArticleSpecifics& from);

  inline ArticleSpecifics& operator=(const ArticleSpecifics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ArticleSpecifics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ArticleSpecifics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ArticleSpecifics* other);

  // implements Message ----------------------------------------------

  ArticleSpecifics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ArticleSpecifics& from);
  void MergeFrom(const ArticleSpecifics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string entry_id = 1;
  inline bool has_entry_id() const;
  inline void clear_entry_id();
  static const int kEntryIdFieldNumber = 1;
  inline const ::std::string& entry_id() const;
  inline void set_entry_id(const ::std::string& value);
  inline void set_entry_id(const char* value);
  inline void set_entry_id(const char* value, size_t size);
  inline ::std::string* mutable_entry_id();
  inline ::std::string* release_entry_id();
  inline void set_allocated_entry_id(::std::string* entry_id);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // repeated .sync_pb.ArticlePage pages = 3;
  inline int pages_size() const;
  inline void clear_pages();
  static const int kPagesFieldNumber = 3;
  inline const ::sync_pb::ArticlePage& pages(int index) const;
  inline ::sync_pb::ArticlePage* mutable_pages(int index);
  inline ::sync_pb::ArticlePage* add_pages();
  inline const ::google::protobuf::RepeatedPtrField< ::sync_pb::ArticlePage >&
      pages() const;
  inline ::google::protobuf::RepeatedPtrField< ::sync_pb::ArticlePage >*
      mutable_pages();

  // @@protoc_insertion_point(class_scope:sync_pb.ArticleSpecifics)
 private:
  inline void set_has_entry_id();
  inline void clear_has_entry_id();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* entry_id_;
  ::std::string* title_;
  ::google::protobuf::RepeatedPtrField< ::sync_pb::ArticlePage > pages_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_article_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_article_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_article_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_article_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static ArticleSpecifics* default_instance_;
};
// -------------------------------------------------------------------

class SYNC_EXPORT ArticlePage : public ::google::protobuf::MessageLite {
 public:
  ArticlePage();
  virtual ~ArticlePage();

  ArticlePage(const ArticlePage& from);

  inline ArticlePage& operator=(const ArticlePage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ArticlePage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ArticlePage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ArticlePage* other);

  // implements Message ----------------------------------------------

  ArticlePage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ArticlePage& from);
  void MergeFrom(const ArticlePage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:sync_pb.ArticlePage)
 private:
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_article_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_article_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_article_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_article_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static ArticlePage* default_instance_;
};
// ===================================================================


// ===================================================================

// ArticleSpecifics

// optional string entry_id = 1;
inline bool ArticleSpecifics::has_entry_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArticleSpecifics::set_has_entry_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArticleSpecifics::clear_has_entry_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArticleSpecifics::clear_entry_id() {
  if (entry_id_ != &::google::protobuf::internal::GetEmptyString()) {
    entry_id_->clear();
  }
  clear_has_entry_id();
}
inline const ::std::string& ArticleSpecifics::entry_id() const {
  return *entry_id_;
}
inline void ArticleSpecifics::set_entry_id(const ::std::string& value) {
  set_has_entry_id();
  if (entry_id_ == &::google::protobuf::internal::GetEmptyString()) {
    entry_id_ = new ::std::string;
  }
  entry_id_->assign(value);
}
inline void ArticleSpecifics::set_entry_id(const char* value) {
  set_has_entry_id();
  if (entry_id_ == &::google::protobuf::internal::GetEmptyString()) {
    entry_id_ = new ::std::string;
  }
  entry_id_->assign(value);
}
inline void ArticleSpecifics::set_entry_id(const char* value, size_t size) {
  set_has_entry_id();
  if (entry_id_ == &::google::protobuf::internal::GetEmptyString()) {
    entry_id_ = new ::std::string;
  }
  entry_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArticleSpecifics::mutable_entry_id() {
  set_has_entry_id();
  if (entry_id_ == &::google::protobuf::internal::GetEmptyString()) {
    entry_id_ = new ::std::string;
  }
  return entry_id_;
}
inline ::std::string* ArticleSpecifics::release_entry_id() {
  clear_has_entry_id();
  if (entry_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = entry_id_;
    entry_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ArticleSpecifics::set_allocated_entry_id(::std::string* entry_id) {
  if (entry_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete entry_id_;
  }
  if (entry_id) {
    set_has_entry_id();
    entry_id_ = entry_id;
  } else {
    clear_has_entry_id();
    entry_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string title = 2;
inline bool ArticleSpecifics::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArticleSpecifics::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArticleSpecifics::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArticleSpecifics::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& ArticleSpecifics::title() const {
  return *title_;
}
inline void ArticleSpecifics::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ArticleSpecifics::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ArticleSpecifics::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArticleSpecifics::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* ArticleSpecifics::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ArticleSpecifics::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .sync_pb.ArticlePage pages = 3;
inline int ArticleSpecifics::pages_size() const {
  return pages_.size();
}
inline void ArticleSpecifics::clear_pages() {
  pages_.Clear();
}
inline const ::sync_pb::ArticlePage& ArticleSpecifics::pages(int index) const {
  return pages_.Get(index);
}
inline ::sync_pb::ArticlePage* ArticleSpecifics::mutable_pages(int index) {
  return pages_.Mutable(index);
}
inline ::sync_pb::ArticlePage* ArticleSpecifics::add_pages() {
  return pages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sync_pb::ArticlePage >&
ArticleSpecifics::pages() const {
  return pages_;
}
inline ::google::protobuf::RepeatedPtrField< ::sync_pb::ArticlePage >*
ArticleSpecifics::mutable_pages() {
  return &pages_;
}

// -------------------------------------------------------------------

// ArticlePage

// optional string url = 1;
inline bool ArticlePage::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArticlePage::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArticlePage::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArticlePage::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& ArticlePage::url() const {
  return *url_;
}
inline void ArticlePage::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ArticlePage::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ArticlePage::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArticlePage::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* ArticlePage::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ArticlePage::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_article_5fspecifics_2eproto__INCLUDED
