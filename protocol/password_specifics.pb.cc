// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "password_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_password_5fspecifics_2eproto() {
  delete PasswordSpecificsData::default_instance_;
  delete PasswordSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_password_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_password_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::sync_pb::protobuf_AddDesc_encryption_2eproto();
  PasswordSpecificsData::default_instance_ = new PasswordSpecificsData();
  PasswordSpecifics::default_instance_ = new PasswordSpecifics();
  PasswordSpecificsData::default_instance_->InitAsDefaultInstance();
  PasswordSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_password_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_password_5fspecifics_2eproto_once_);
void protobuf_AddDesc_password_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_password_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_password_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_password_5fspecifics_2eproto {
  StaticDescriptorInitializer_password_5fspecifics_2eproto() {
    protobuf_AddDesc_password_5fspecifics_2eproto();
  }
} static_descriptor_initializer_password_5fspecifics_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PasswordSpecificsData::kSchemeFieldNumber;
const int PasswordSpecificsData::kSignonRealmFieldNumber;
const int PasswordSpecificsData::kOriginFieldNumber;
const int PasswordSpecificsData::kActionFieldNumber;
const int PasswordSpecificsData::kUsernameElementFieldNumber;
const int PasswordSpecificsData::kUsernameValueFieldNumber;
const int PasswordSpecificsData::kPasswordElementFieldNumber;
const int PasswordSpecificsData::kPasswordValueFieldNumber;
const int PasswordSpecificsData::kSslValidFieldNumber;
const int PasswordSpecificsData::kPreferredFieldNumber;
const int PasswordSpecificsData::kDateCreatedFieldNumber;
const int PasswordSpecificsData::kBlacklistedFieldNumber;
#endif  // !_MSC_VER

PasswordSpecificsData::PasswordSpecificsData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PasswordSpecificsData::InitAsDefaultInstance() {
}

PasswordSpecificsData::PasswordSpecificsData(const PasswordSpecificsData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PasswordSpecificsData::SharedCtor() {
  _cached_size_ = 0;
  scheme_ = 0;
  signon_realm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  username_element_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  username_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  password_element_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  password_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ssl_valid_ = false;
  preferred_ = false;
  date_created_ = GOOGLE_LONGLONG(0);
  blacklisted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasswordSpecificsData::~PasswordSpecificsData() {
  SharedDtor();
}

void PasswordSpecificsData::SharedDtor() {
  if (signon_realm_ != &::google::protobuf::internal::GetEmptyString()) {
    delete signon_realm_;
  }
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    delete origin_;
  }
  if (action_ != &::google::protobuf::internal::GetEmptyString()) {
    delete action_;
  }
  if (username_element_ != &::google::protobuf::internal::GetEmptyString()) {
    delete username_element_;
  }
  if (username_value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete username_value_;
  }
  if (password_element_ != &::google::protobuf::internal::GetEmptyString()) {
    delete password_element_;
  }
  if (password_value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete password_value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PasswordSpecificsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PasswordSpecificsData& PasswordSpecificsData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_password_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_password_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

PasswordSpecificsData* PasswordSpecificsData::default_instance_ = NULL;

PasswordSpecificsData* PasswordSpecificsData::New() const {
  return new PasswordSpecificsData;
}

void PasswordSpecificsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scheme_ = 0;
    if (has_signon_realm()) {
      if (signon_realm_ != &::google::protobuf::internal::GetEmptyString()) {
        signon_realm_->clear();
      }
    }
    if (has_origin()) {
      if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
        origin_->clear();
      }
    }
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::GetEmptyString()) {
        action_->clear();
      }
    }
    if (has_username_element()) {
      if (username_element_ != &::google::protobuf::internal::GetEmptyString()) {
        username_element_->clear();
      }
    }
    if (has_username_value()) {
      if (username_value_ != &::google::protobuf::internal::GetEmptyString()) {
        username_value_->clear();
      }
    }
    if (has_password_element()) {
      if (password_element_ != &::google::protobuf::internal::GetEmptyString()) {
        password_element_->clear();
      }
    }
    if (has_password_value()) {
      if (password_value_ != &::google::protobuf::internal::GetEmptyString()) {
        password_value_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ssl_valid_ = false;
    preferred_ = false;
    date_created_ = GOOGLE_LONGLONG(0);
    blacklisted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PasswordSpecificsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scheme = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scheme_)));
          set_has_scheme();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signon_realm;
        break;
      }

      // optional string signon_realm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signon_realm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signon_realm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_origin;
        break;
      }

      // optional string origin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_action;
        break;
      }

      // optional string action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_username_element;
        break;
      }

      // optional string username_element = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username_element()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_username_value;
        break;
      }

      // optional string username_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_password_element;
        break;
      }

      // optional string password_element = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_element()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_password_value;
        break;
      }

      // optional string password_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ssl_valid;
        break;
      }

      // optional bool ssl_valid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ssl_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ssl_valid_)));
          set_has_ssl_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_preferred;
        break;
      }

      // optional bool preferred = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preferred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preferred_)));
          set_has_preferred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_date_created;
        break;
      }

      // optional int64 date_created = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_created_)));
          set_has_date_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_blacklisted;
        break;
      }

      // optional bool blacklisted = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blacklisted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blacklisted_)));
          set_has_blacklisted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PasswordSpecificsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 scheme = 1;
  if (has_scheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scheme(), output);
  }

  // optional string signon_realm = 2;
  if (has_signon_realm()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signon_realm(), output);
  }

  // optional string origin = 3;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->origin(), output);
  }

  // optional string action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->action(), output);
  }

  // optional string username_element = 5;
  if (has_username_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->username_element(), output);
  }

  // optional string username_value = 6;
  if (has_username_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->username_value(), output);
  }

  // optional string password_element = 7;
  if (has_password_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->password_element(), output);
  }

  // optional string password_value = 8;
  if (has_password_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->password_value(), output);
  }

  // optional bool ssl_valid = 9;
  if (has_ssl_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ssl_valid(), output);
  }

  // optional bool preferred = 10;
  if (has_preferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->preferred(), output);
  }

  // optional int64 date_created = 11;
  if (has_date_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->date_created(), output);
  }

  // optional bool blacklisted = 12;
  if (has_blacklisted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->blacklisted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int PasswordSpecificsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 scheme = 1;
    if (has_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scheme());
    }

    // optional string signon_realm = 2;
    if (has_signon_realm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signon_realm());
    }

    // optional string origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional string action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional string username_element = 5;
    if (has_username_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username_element());
    }

    // optional string username_value = 6;
    if (has_username_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username_value());
    }

    // optional string password_element = 7;
    if (has_password_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_element());
    }

    // optional string password_value = 8;
    if (has_password_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_value());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ssl_valid = 9;
    if (has_ssl_valid()) {
      total_size += 1 + 1;
    }

    // optional bool preferred = 10;
    if (has_preferred()) {
      total_size += 1 + 1;
    }

    // optional int64 date_created = 11;
    if (has_date_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date_created());
    }

    // optional bool blacklisted = 12;
    if (has_blacklisted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasswordSpecificsData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PasswordSpecificsData*>(&from));
}

void PasswordSpecificsData::MergeFrom(const PasswordSpecificsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scheme()) {
      set_scheme(from.scheme());
    }
    if (from.has_signon_realm()) {
      set_signon_realm(from.signon_realm());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_username_element()) {
      set_username_element(from.username_element());
    }
    if (from.has_username_value()) {
      set_username_value(from.username_value());
    }
    if (from.has_password_element()) {
      set_password_element(from.password_element());
    }
    if (from.has_password_value()) {
      set_password_value(from.password_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ssl_valid()) {
      set_ssl_valid(from.ssl_valid());
    }
    if (from.has_preferred()) {
      set_preferred(from.preferred());
    }
    if (from.has_date_created()) {
      set_date_created(from.date_created());
    }
    if (from.has_blacklisted()) {
      set_blacklisted(from.blacklisted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PasswordSpecificsData::CopyFrom(const PasswordSpecificsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordSpecificsData::IsInitialized() const {

  return true;
}

void PasswordSpecificsData::Swap(PasswordSpecificsData* other) {
  if (other != this) {
    std::swap(scheme_, other->scheme_);
    std::swap(signon_realm_, other->signon_realm_);
    std::swap(origin_, other->origin_);
    std::swap(action_, other->action_);
    std::swap(username_element_, other->username_element_);
    std::swap(username_value_, other->username_value_);
    std::swap(password_element_, other->password_element_);
    std::swap(password_value_, other->password_value_);
    std::swap(ssl_valid_, other->ssl_valid_);
    std::swap(preferred_, other->preferred_);
    std::swap(date_created_, other->date_created_);
    std::swap(blacklisted_, other->blacklisted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PasswordSpecificsData::GetTypeName() const {
  return "sync_pb.PasswordSpecificsData";
}


// ===================================================================

#ifndef _MSC_VER
const int PasswordSpecifics::kEncryptedFieldNumber;
const int PasswordSpecifics::kClientOnlyEncryptedDataFieldNumber;
#endif  // !_MSC_VER

PasswordSpecifics::PasswordSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PasswordSpecifics::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  encrypted_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
#else
  encrypted_ = const_cast< ::sync_pb::EncryptedData*>(&::sync_pb::EncryptedData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  client_only_encrypted_data_ = const_cast< ::sync_pb::PasswordSpecificsData*>(
      ::sync_pb::PasswordSpecificsData::internal_default_instance());
#else
  client_only_encrypted_data_ = const_cast< ::sync_pb::PasswordSpecificsData*>(&::sync_pb::PasswordSpecificsData::default_instance());
#endif
}

PasswordSpecifics::PasswordSpecifics(const PasswordSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PasswordSpecifics::SharedCtor() {
  _cached_size_ = 0;
  encrypted_ = NULL;
  client_only_encrypted_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasswordSpecifics::~PasswordSpecifics() {
  SharedDtor();
}

void PasswordSpecifics::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete encrypted_;
    delete client_only_encrypted_data_;
  }
}

void PasswordSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PasswordSpecifics& PasswordSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_password_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_password_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

PasswordSpecifics* PasswordSpecifics::default_instance_ = NULL;

PasswordSpecifics* PasswordSpecifics::New() const {
  return new PasswordSpecifics;
}

void PasswordSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encrypted()) {
      if (encrypted_ != NULL) encrypted_->::sync_pb::EncryptedData::Clear();
    }
    if (has_client_only_encrypted_data()) {
      if (client_only_encrypted_data_ != NULL) client_only_encrypted_data_->::sync_pb::PasswordSpecificsData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PasswordSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.EncryptedData encrypted = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encrypted()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_only_encrypted_data;
        break;
      }

      // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_only_encrypted_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_only_encrypted_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PasswordSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .sync_pb.EncryptedData encrypted = 1;
  if (has_encrypted()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->encrypted(), output);
  }

  // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
  if (has_client_only_encrypted_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->client_only_encrypted_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int PasswordSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .sync_pb.EncryptedData encrypted = 1;
    if (has_encrypted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->encrypted());
    }

    // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
    if (has_client_only_encrypted_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_only_encrypted_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasswordSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PasswordSpecifics*>(&from));
}

void PasswordSpecifics::MergeFrom(const PasswordSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrypted()) {
      mutable_encrypted()->::sync_pb::EncryptedData::MergeFrom(from.encrypted());
    }
    if (from.has_client_only_encrypted_data()) {
      mutable_client_only_encrypted_data()->::sync_pb::PasswordSpecificsData::MergeFrom(from.client_only_encrypted_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PasswordSpecifics::CopyFrom(const PasswordSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordSpecifics::IsInitialized() const {

  return true;
}

void PasswordSpecifics::Swap(PasswordSpecifics* other) {
  if (other != this) {
    std::swap(encrypted_, other->encrypted_);
    std::swap(client_only_encrypted_data_, other->client_only_encrypted_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PasswordSpecifics::GetTypeName() const {
  return "sync_pb.PasswordSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
