// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autofill_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "autofill_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {

void protobuf_ShutdownFile_autofill_5fspecifics_2eproto() {
  delete AutofillProfileSpecifics::default_instance_;
  delete AutofillSpecifics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_autofill_5fspecifics_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_autofill_5fspecifics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AutofillProfileSpecifics::default_instance_ = new AutofillProfileSpecifics();
  AutofillSpecifics::default_instance_ = new AutofillSpecifics();
  AutofillProfileSpecifics::default_instance_->InitAsDefaultInstance();
  AutofillSpecifics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_autofill_5fspecifics_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_autofill_5fspecifics_2eproto_once_);
void protobuf_AddDesc_autofill_5fspecifics_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_autofill_5fspecifics_2eproto_once_,
                 &protobuf_AddDesc_autofill_5fspecifics_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_autofill_5fspecifics_2eproto {
  StaticDescriptorInitializer_autofill_5fspecifics_2eproto() {
    protobuf_AddDesc_autofill_5fspecifics_2eproto();
  }
} static_descriptor_initializer_autofill_5fspecifics_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int AutofillProfileSpecifics::kGuidFieldNumber;
const int AutofillProfileSpecifics::kOriginFieldNumber;
const int AutofillProfileSpecifics::kNameFirstFieldNumber;
const int AutofillProfileSpecifics::kNameMiddleFieldNumber;
const int AutofillProfileSpecifics::kNameLastFieldNumber;
const int AutofillProfileSpecifics::kEmailAddressFieldNumber;
const int AutofillProfileSpecifics::kCompanyNameFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeLine1FieldNumber;
const int AutofillProfileSpecifics::kAddressHomeLine2FieldNumber;
const int AutofillProfileSpecifics::kAddressHomeCityFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeStateFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeZipFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeCountryFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeStreetAddressFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeSortingCodeFieldNumber;
const int AutofillProfileSpecifics::kAddressHomeDependentLocalityFieldNumber;
const int AutofillProfileSpecifics::kPhoneHomeWholeNumberFieldNumber;
const int AutofillProfileSpecifics::kLabelFieldNumber;
const int AutofillProfileSpecifics::kPhoneFaxWholeNumberFieldNumber;
#endif  // !_MSC_VER

AutofillProfileSpecifics::AutofillProfileSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AutofillProfileSpecifics::InitAsDefaultInstance() {
}

AutofillProfileSpecifics::AutofillProfileSpecifics(const AutofillProfileSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AutofillProfileSpecifics::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_line1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_line2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_zip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_street_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_sorting_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  address_home_dependent_locality_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  phone_fax_whole_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillProfileSpecifics::~AutofillProfileSpecifics() {
  SharedDtor();
}

void AutofillProfileSpecifics::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete guid_;
  }
  if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
    delete origin_;
  }
  if (company_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete company_name_;
  }
  if (address_home_line1_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_line1_;
  }
  if (address_home_line2_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_line2_;
  }
  if (address_home_city_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_city_;
  }
  if (address_home_state_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_state_;
  }
  if (address_home_zip_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_zip_;
  }
  if (address_home_country_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_country_;
  }
  if (address_home_street_address_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_street_address_;
  }
  if (address_home_sorting_code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_sorting_code_;
  }
  if (address_home_dependent_locality_ != &::google::protobuf::internal::GetEmptyString()) {
    delete address_home_dependent_locality_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyString()) {
    delete label_;
  }
  if (phone_fax_whole_number_ != &::google::protobuf::internal::GetEmptyString()) {
    delete phone_fax_whole_number_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AutofillProfileSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillProfileSpecifics& AutofillProfileSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_autofill_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_autofill_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

AutofillProfileSpecifics* AutofillProfileSpecifics::default_instance_ = NULL;

AutofillProfileSpecifics* AutofillProfileSpecifics::New() const {
  return new AutofillProfileSpecifics;
}

void AutofillProfileSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyString()) {
        guid_->clear();
      }
    }
    if (has_origin()) {
      if (origin_ != &::google::protobuf::internal::GetEmptyString()) {
        origin_->clear();
      }
    }
    if (has_company_name()) {
      if (company_name_ != &::google::protobuf::internal::GetEmptyString()) {
        company_name_->clear();
      }
    }
    if (has_address_home_line1()) {
      if (address_home_line1_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_line1_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_address_home_line2()) {
      if (address_home_line2_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_line2_->clear();
      }
    }
    if (has_address_home_city()) {
      if (address_home_city_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_city_->clear();
      }
    }
    if (has_address_home_state()) {
      if (address_home_state_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_state_->clear();
      }
    }
    if (has_address_home_zip()) {
      if (address_home_zip_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_zip_->clear();
      }
    }
    if (has_address_home_country()) {
      if (address_home_country_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_country_->clear();
      }
    }
    if (has_address_home_street_address()) {
      if (address_home_street_address_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_street_address_->clear();
      }
    }
    if (has_address_home_sorting_code()) {
      if (address_home_sorting_code_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_sorting_code_->clear();
      }
    }
    if (has_address_home_dependent_locality()) {
      if (address_home_dependent_locality_ != &::google::protobuf::internal::GetEmptyString()) {
        address_home_dependent_locality_->clear();
      }
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyString()) {
        label_->clear();
      }
    }
    if (has_phone_fax_whole_number()) {
      if (phone_fax_whole_number_ != &::google::protobuf::internal::GetEmptyString()) {
        phone_fax_whole_number_->clear();
      }
    }
  }
  name_first_.Clear();
  name_middle_.Clear();
  name_last_.Clear();
  email_address_.Clear();
  phone_home_whole_number_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutofillProfileSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_first;
        break;
      }

      // repeated string name_first = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_first:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name_first()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_first;
        if (input->ExpectTag(26)) goto parse_name_middle;
        break;
      }

      // repeated string name_middle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_middle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name_middle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name_middle;
        if (input->ExpectTag(34)) goto parse_name_last;
        break;
      }

      // repeated string name_last = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name_last()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name_last;
        if (input->ExpectTag(42)) goto parse_email_address;
        break;
      }

      // repeated string email_address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_email_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_email_address;
        if (input->ExpectTag(50)) goto parse_company_name;
        break;
      }

      // optional string company_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_address_home_line1;
        break;
      }

      // optional string address_home_line1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_line1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_line1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_address_home_line2;
        break;
      }

      // optional string address_home_line2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_line2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_line2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_address_home_city;
        break;
      }

      // optional string address_home_city = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_city()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_address_home_state;
        break;
      }

      // optional string address_home_state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_address_home_zip;
        break;
      }

      // optional string address_home_zip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_zip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_zip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_address_home_country;
        break;
      }

      // optional string address_home_country = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_phone_home_whole_number;
        break;
      }

      // repeated string phone_home_whole_number = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_home_whole_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phone_home_whole_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_phone_home_whole_number;
        if (input->ExpectTag(114)) goto parse_phone_fax_whole_number;
        break;
      }

      // optional string phone_fax_whole_number = 14 [deprecated = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_fax_whole_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_fax_whole_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_guid;
        break;
      }

      // optional string guid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_origin;
        break;
      }

      // optional string origin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_address_home_street_address;
        break;
      }

      // optional string address_home_street_address = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_street_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_street_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_address_home_sorting_code;
        break;
      }

      // optional string address_home_sorting_code = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_sorting_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_sorting_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_address_home_dependent_locality;
        break;
      }

      // optional string address_home_dependent_locality = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address_home_dependent_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_home_dependent_locality()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutofillProfileSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string label = 1 [deprecated = true];
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label(), output);
  }

  // repeated string name_first = 2;
  for (int i = 0; i < this->name_first_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name_first(i), output);
  }

  // repeated string name_middle = 3;
  for (int i = 0; i < this->name_middle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name_middle(i), output);
  }

  // repeated string name_last = 4;
  for (int i = 0; i < this->name_last_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name_last(i), output);
  }

  // repeated string email_address = 5;
  for (int i = 0; i < this->email_address_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->email_address(i), output);
  }

  // optional string company_name = 6;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->company_name(), output);
  }

  // optional string address_home_line1 = 7;
  if (has_address_home_line1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->address_home_line1(), output);
  }

  // optional string address_home_line2 = 8;
  if (has_address_home_line2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->address_home_line2(), output);
  }

  // optional string address_home_city = 9;
  if (has_address_home_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->address_home_city(), output);
  }

  // optional string address_home_state = 10;
  if (has_address_home_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->address_home_state(), output);
  }

  // optional string address_home_zip = 11;
  if (has_address_home_zip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->address_home_zip(), output);
  }

  // optional string address_home_country = 12;
  if (has_address_home_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->address_home_country(), output);
  }

  // repeated string phone_home_whole_number = 13;
  for (int i = 0; i < this->phone_home_whole_number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->phone_home_whole_number(i), output);
  }

  // optional string phone_fax_whole_number = 14 [deprecated = true];
  if (has_phone_fax_whole_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->phone_fax_whole_number(), output);
  }

  // optional string guid = 15;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->guid(), output);
  }

  // optional string origin = 16;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->origin(), output);
  }

  // optional string address_home_street_address = 17;
  if (has_address_home_street_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->address_home_street_address(), output);
  }

  // optional string address_home_sorting_code = 18;
  if (has_address_home_sorting_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->address_home_sorting_code(), output);
  }

  // optional string address_home_dependent_locality = 19;
  if (has_address_home_dependent_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->address_home_dependent_locality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int AutofillProfileSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 15;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string origin = 16;
    if (has_origin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional string company_name = 6;
    if (has_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_name());
    }

    // optional string address_home_line1 = 7;
    if (has_address_home_line1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_line1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string address_home_line2 = 8;
    if (has_address_home_line2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_line2());
    }

    // optional string address_home_city = 9;
    if (has_address_home_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_city());
    }

    // optional string address_home_state = 10;
    if (has_address_home_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_state());
    }

    // optional string address_home_zip = 11;
    if (has_address_home_zip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_zip());
    }

    // optional string address_home_country = 12;
    if (has_address_home_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_country());
    }

    // optional string address_home_street_address = 17;
    if (has_address_home_street_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_street_address());
    }

    // optional string address_home_sorting_code = 18;
    if (has_address_home_sorting_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_sorting_code());
    }

    // optional string address_home_dependent_locality = 19;
    if (has_address_home_dependent_locality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address_home_dependent_locality());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string label = 1 [deprecated = true];
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string phone_fax_whole_number = 14 [deprecated = true];
    if (has_phone_fax_whole_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_fax_whole_number());
    }

  }
  // repeated string name_first = 2;
  total_size += 1 * this->name_first_size();
  for (int i = 0; i < this->name_first_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_first(i));
  }

  // repeated string name_middle = 3;
  total_size += 1 * this->name_middle_size();
  for (int i = 0; i < this->name_middle_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_middle(i));
  }

  // repeated string name_last = 4;
  total_size += 1 * this->name_last_size();
  for (int i = 0; i < this->name_last_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name_last(i));
  }

  // repeated string email_address = 5;
  total_size += 1 * this->email_address_size();
  for (int i = 0; i < this->email_address_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->email_address(i));
  }

  // repeated string phone_home_whole_number = 13;
  total_size += 1 * this->phone_home_whole_number_size();
  for (int i = 0; i < this->phone_home_whole_number_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phone_home_whole_number(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillProfileSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillProfileSpecifics*>(&from));
}

void AutofillProfileSpecifics::MergeFrom(const AutofillProfileSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_first_.MergeFrom(from.name_first_);
  name_middle_.MergeFrom(from.name_middle_);
  name_last_.MergeFrom(from.name_last_);
  email_address_.MergeFrom(from.email_address_);
  phone_home_whole_number_.MergeFrom(from.phone_home_whole_number_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_company_name()) {
      set_company_name(from.company_name());
    }
    if (from.has_address_home_line1()) {
      set_address_home_line1(from.address_home_line1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_address_home_line2()) {
      set_address_home_line2(from.address_home_line2());
    }
    if (from.has_address_home_city()) {
      set_address_home_city(from.address_home_city());
    }
    if (from.has_address_home_state()) {
      set_address_home_state(from.address_home_state());
    }
    if (from.has_address_home_zip()) {
      set_address_home_zip(from.address_home_zip());
    }
    if (from.has_address_home_country()) {
      set_address_home_country(from.address_home_country());
    }
    if (from.has_address_home_street_address()) {
      set_address_home_street_address(from.address_home_street_address());
    }
    if (from.has_address_home_sorting_code()) {
      set_address_home_sorting_code(from.address_home_sorting_code());
    }
    if (from.has_address_home_dependent_locality()) {
      set_address_home_dependent_locality(from.address_home_dependent_locality());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_phone_fax_whole_number()) {
      set_phone_fax_whole_number(from.phone_fax_whole_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutofillProfileSpecifics::CopyFrom(const AutofillProfileSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillProfileSpecifics::IsInitialized() const {

  return true;
}

void AutofillProfileSpecifics::Swap(AutofillProfileSpecifics* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(origin_, other->origin_);
    name_first_.Swap(&other->name_first_);
    name_middle_.Swap(&other->name_middle_);
    name_last_.Swap(&other->name_last_);
    email_address_.Swap(&other->email_address_);
    std::swap(company_name_, other->company_name_);
    std::swap(address_home_line1_, other->address_home_line1_);
    std::swap(address_home_line2_, other->address_home_line2_);
    std::swap(address_home_city_, other->address_home_city_);
    std::swap(address_home_state_, other->address_home_state_);
    std::swap(address_home_zip_, other->address_home_zip_);
    std::swap(address_home_country_, other->address_home_country_);
    std::swap(address_home_street_address_, other->address_home_street_address_);
    std::swap(address_home_sorting_code_, other->address_home_sorting_code_);
    std::swap(address_home_dependent_locality_, other->address_home_dependent_locality_);
    phone_home_whole_number_.Swap(&other->phone_home_whole_number_);
    std::swap(label_, other->label_);
    std::swap(phone_fax_whole_number_, other->phone_fax_whole_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AutofillProfileSpecifics::GetTypeName() const {
  return "sync_pb.AutofillProfileSpecifics";
}


// ===================================================================

#ifndef _MSC_VER
const int AutofillSpecifics::kNameFieldNumber;
const int AutofillSpecifics::kValueFieldNumber;
const int AutofillSpecifics::kUsageTimestampFieldNumber;
const int AutofillSpecifics::kProfileFieldNumber;
#endif  // !_MSC_VER

AutofillSpecifics::AutofillSpecifics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AutofillSpecifics::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  profile_ = const_cast< ::sync_pb::AutofillProfileSpecifics*>(
      ::sync_pb::AutofillProfileSpecifics::internal_default_instance());
#else
  profile_ = const_cast< ::sync_pb::AutofillProfileSpecifics*>(&::sync_pb::AutofillProfileSpecifics::default_instance());
#endif
}

AutofillSpecifics::AutofillSpecifics(const AutofillSpecifics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AutofillSpecifics::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  profile_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutofillSpecifics::~AutofillSpecifics() {
  SharedDtor();
}

void AutofillSpecifics::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete profile_;
  }
}

void AutofillSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AutofillSpecifics& AutofillSpecifics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_autofill_5fspecifics_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_autofill_5fspecifics_2eproto();
#endif
  return *default_instance_;
}

AutofillSpecifics* AutofillSpecifics::default_instance_ = NULL;

AutofillSpecifics* AutofillSpecifics::New() const {
  return new AutofillSpecifics;
}

void AutofillSpecifics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
    if (has_profile()) {
      if (profile_ != NULL) profile_->::sync_pb::AutofillProfileSpecifics::Clear();
    }
  }
  usage_timestamp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutofillSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usage_timestamp;
        break;
      }

      // repeated int64 usage_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_usage_timestamp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_usage_timestamp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usage_timestamp;
        if (input->ExpectTag(34)) goto parse_profile;
        break;
      }

      // optional .sync_pb.AutofillProfileSpecifics profile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutofillSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  // repeated int64 usage_timestamp = 3;
  for (int i = 0; i < this->usage_timestamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->usage_timestamp(i), output);
  }

  // optional .sync_pb.AutofillProfileSpecifics profile = 4;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->profile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormatLite::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

int AutofillSpecifics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .sync_pb.AutofillProfileSpecifics profile = 4;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profile());
    }

  }
  // repeated int64 usage_timestamp = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->usage_timestamp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->usage_timestamp(i));
    }
    total_size += 1 * this->usage_timestamp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutofillSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AutofillSpecifics*>(&from));
}

void AutofillSpecifics::MergeFrom(const AutofillSpecifics& from) {
  GOOGLE_CHECK_NE(&from, this);
  usage_timestamp_.MergeFrom(from.usage_timestamp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_profile()) {
      mutable_profile()->::sync_pb::AutofillProfileSpecifics::MergeFrom(from.profile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutofillSpecifics::CopyFrom(const AutofillSpecifics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillSpecifics::IsInitialized() const {

  return true;
}

void AutofillSpecifics::Swap(AutofillSpecifics* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    usage_timestamp_.Swap(&other->usage_timestamp_);
    std::swap(profile_, other->profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AutofillSpecifics::GetTypeName() const {
  return "sync_pb.AutofillSpecifics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
