// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_notification_specifics.proto

#ifndef PROTOBUF_app_5fnotification_5fspecifics_2eproto__INCLUDED
#define PROTOBUF_app_5fnotification_5fspecifics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include "sync/base/sync_export.h"

namespace sync_pb {

// Internal implementation detail -- do not call these.
void SYNC_EXPORT protobuf_AddDesc_app_5fnotification_5fspecifics_2eproto();
void protobuf_AssignDesc_app_5fnotification_5fspecifics_2eproto();
void protobuf_ShutdownFile_app_5fnotification_5fspecifics_2eproto();

class AppNotification;

// ===================================================================

class SYNC_EXPORT AppNotification : public ::google::protobuf::MessageLite {
 public:
  AppNotification();
  virtual ~AppNotification();

  AppNotification(const AppNotification& from);

  inline AppNotification& operator=(const AppNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AppNotification& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AppNotification* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AppNotification* other);

  // implements Message ----------------------------------------------

  AppNotification* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AppNotification& from);
  void MergeFrom(const AppNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional string app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const char* value, size_t size);
  inline ::std::string* mutable_app_id();
  inline ::std::string* release_app_id();
  inline void set_allocated_app_id(::std::string* app_id);

  // optional int64 creation_timestamp_ms = 3;
  inline bool has_creation_timestamp_ms() const;
  inline void clear_creation_timestamp_ms();
  static const int kCreationTimestampMsFieldNumber = 3;
  inline ::google::protobuf::int64 creation_timestamp_ms() const;
  inline void set_creation_timestamp_ms(::google::protobuf::int64 value);

  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string body_text = 5;
  inline bool has_body_text() const;
  inline void clear_body_text();
  static const int kBodyTextFieldNumber = 5;
  inline const ::std::string& body_text() const;
  inline void set_body_text(const ::std::string& value);
  inline void set_body_text(const char* value);
  inline void set_body_text(const char* value, size_t size);
  inline ::std::string* mutable_body_text();
  inline ::std::string* release_body_text();
  inline void set_allocated_body_text(::std::string* body_text);

  // optional string link_url = 6;
  inline bool has_link_url() const;
  inline void clear_link_url();
  static const int kLinkUrlFieldNumber = 6;
  inline const ::std::string& link_url() const;
  inline void set_link_url(const ::std::string& value);
  inline void set_link_url(const char* value);
  inline void set_link_url(const char* value, size_t size);
  inline ::std::string* mutable_link_url();
  inline ::std::string* release_link_url();
  inline void set_allocated_link_url(::std::string* link_url);

  // optional string link_text = 7;
  inline bool has_link_text() const;
  inline void clear_link_text();
  static const int kLinkTextFieldNumber = 7;
  inline const ::std::string& link_text() const;
  inline void set_link_text(const ::std::string& value);
  inline void set_link_text(const char* value);
  inline void set_link_text(const char* value, size_t size);
  inline ::std::string* mutable_link_text();
  inline ::std::string* release_link_text();
  inline void set_allocated_link_text(::std::string* link_text);

  // @@protoc_insertion_point(class_scope:sync_pb.AppNotification)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_creation_timestamp_ms();
  inline void clear_has_creation_timestamp_ms();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_body_text();
  inline void clear_has_body_text();
  inline void set_has_link_url();
  inline void clear_has_link_url();
  inline void set_has_link_text();
  inline void clear_has_link_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guid_;
  ::std::string* app_id_;
  ::google::protobuf::int64 creation_timestamp_ms_;
  ::std::string* title_;
  ::std::string* body_text_;
  ::std::string* link_url_;
  ::std::string* link_text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void SYNC_EXPORT protobuf_AddDesc_app_5fnotification_5fspecifics_2eproto_impl();
  #else
  friend void SYNC_EXPORT protobuf_AddDesc_app_5fnotification_5fspecifics_2eproto();
  #endif
  friend void protobuf_AssignDesc_app_5fnotification_5fspecifics_2eproto();
  friend void protobuf_ShutdownFile_app_5fnotification_5fspecifics_2eproto();

  void InitAsDefaultInstance();
  static AppNotification* default_instance_;
};
// ===================================================================


// ===================================================================

// AppNotification

// optional string guid = 1;
inline bool AppNotification::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppNotification::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppNotification::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppNotification::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyString()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& AppNotification::guid() const {
  return *guid_;
}
inline void AppNotification::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyString()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void AppNotification::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyString()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void AppNotification::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyString()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppNotification::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyString()) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* AppNotification::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AppNotification::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string app_id = 2;
inline bool AppNotification::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppNotification::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppNotification::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppNotification::clear_app_id() {
  if (app_id_ != &::google::protobuf::internal::GetEmptyString()) {
    app_id_->clear();
  }
  clear_has_app_id();
}
inline const ::std::string& AppNotification::app_id() const {
  return *app_id_;
}
inline void AppNotification::set_app_id(const ::std::string& value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyString()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void AppNotification::set_app_id(const char* value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyString()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void AppNotification::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyString()) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppNotification::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyString()) {
    app_id_ = new ::std::string;
  }
  return app_id_;
}
inline ::std::string* AppNotification::release_app_id() {
  clear_has_app_id();
  if (app_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = app_id_;
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AppNotification::set_allocated_app_id(::std::string* app_id) {
  if (app_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete app_id_;
  }
  if (app_id) {
    set_has_app_id();
    app_id_ = app_id;
  } else {
    clear_has_app_id();
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int64 creation_timestamp_ms = 3;
inline bool AppNotification::has_creation_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppNotification::set_has_creation_timestamp_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppNotification::clear_has_creation_timestamp_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppNotification::clear_creation_timestamp_ms() {
  creation_timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_creation_timestamp_ms();
}
inline ::google::protobuf::int64 AppNotification::creation_timestamp_ms() const {
  return creation_timestamp_ms_;
}
inline void AppNotification::set_creation_timestamp_ms(::google::protobuf::int64 value) {
  set_has_creation_timestamp_ms();
  creation_timestamp_ms_ = value;
}

// optional string title = 4;
inline bool AppNotification::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppNotification::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppNotification::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppNotification::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& AppNotification::title() const {
  return *title_;
}
inline void AppNotification::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void AppNotification::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void AppNotification::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppNotification::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* AppNotification::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AppNotification::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string body_text = 5;
inline bool AppNotification::has_body_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppNotification::set_has_body_text() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppNotification::clear_has_body_text() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppNotification::clear_body_text() {
  if (body_text_ != &::google::protobuf::internal::GetEmptyString()) {
    body_text_->clear();
  }
  clear_has_body_text();
}
inline const ::std::string& AppNotification::body_text() const {
  return *body_text_;
}
inline void AppNotification::set_body_text(const ::std::string& value) {
  set_has_body_text();
  if (body_text_ == &::google::protobuf::internal::GetEmptyString()) {
    body_text_ = new ::std::string;
  }
  body_text_->assign(value);
}
inline void AppNotification::set_body_text(const char* value) {
  set_has_body_text();
  if (body_text_ == &::google::protobuf::internal::GetEmptyString()) {
    body_text_ = new ::std::string;
  }
  body_text_->assign(value);
}
inline void AppNotification::set_body_text(const char* value, size_t size) {
  set_has_body_text();
  if (body_text_ == &::google::protobuf::internal::GetEmptyString()) {
    body_text_ = new ::std::string;
  }
  body_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppNotification::mutable_body_text() {
  set_has_body_text();
  if (body_text_ == &::google::protobuf::internal::GetEmptyString()) {
    body_text_ = new ::std::string;
  }
  return body_text_;
}
inline ::std::string* AppNotification::release_body_text() {
  clear_has_body_text();
  if (body_text_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = body_text_;
    body_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AppNotification::set_allocated_body_text(::std::string* body_text) {
  if (body_text_ != &::google::protobuf::internal::GetEmptyString()) {
    delete body_text_;
  }
  if (body_text) {
    set_has_body_text();
    body_text_ = body_text;
  } else {
    clear_has_body_text();
    body_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string link_url = 6;
inline bool AppNotification::has_link_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppNotification::set_has_link_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppNotification::clear_has_link_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppNotification::clear_link_url() {
  if (link_url_ != &::google::protobuf::internal::GetEmptyString()) {
    link_url_->clear();
  }
  clear_has_link_url();
}
inline const ::std::string& AppNotification::link_url() const {
  return *link_url_;
}
inline void AppNotification::set_link_url(const ::std::string& value) {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::GetEmptyString()) {
    link_url_ = new ::std::string;
  }
  link_url_->assign(value);
}
inline void AppNotification::set_link_url(const char* value) {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::GetEmptyString()) {
    link_url_ = new ::std::string;
  }
  link_url_->assign(value);
}
inline void AppNotification::set_link_url(const char* value, size_t size) {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::GetEmptyString()) {
    link_url_ = new ::std::string;
  }
  link_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppNotification::mutable_link_url() {
  set_has_link_url();
  if (link_url_ == &::google::protobuf::internal::GetEmptyString()) {
    link_url_ = new ::std::string;
  }
  return link_url_;
}
inline ::std::string* AppNotification::release_link_url() {
  clear_has_link_url();
  if (link_url_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = link_url_;
    link_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AppNotification::set_allocated_link_url(::std::string* link_url) {
  if (link_url_ != &::google::protobuf::internal::GetEmptyString()) {
    delete link_url_;
  }
  if (link_url) {
    set_has_link_url();
    link_url_ = link_url;
  } else {
    clear_has_link_url();
    link_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string link_text = 7;
inline bool AppNotification::has_link_text() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppNotification::set_has_link_text() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppNotification::clear_has_link_text() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppNotification::clear_link_text() {
  if (link_text_ != &::google::protobuf::internal::GetEmptyString()) {
    link_text_->clear();
  }
  clear_has_link_text();
}
inline const ::std::string& AppNotification::link_text() const {
  return *link_text_;
}
inline void AppNotification::set_link_text(const ::std::string& value) {
  set_has_link_text();
  if (link_text_ == &::google::protobuf::internal::GetEmptyString()) {
    link_text_ = new ::std::string;
  }
  link_text_->assign(value);
}
inline void AppNotification::set_link_text(const char* value) {
  set_has_link_text();
  if (link_text_ == &::google::protobuf::internal::GetEmptyString()) {
    link_text_ = new ::std::string;
  }
  link_text_->assign(value);
}
inline void AppNotification::set_link_text(const char* value, size_t size) {
  set_has_link_text();
  if (link_text_ == &::google::protobuf::internal::GetEmptyString()) {
    link_text_ = new ::std::string;
  }
  link_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppNotification::mutable_link_text() {
  set_has_link_text();
  if (link_text_ == &::google::protobuf::internal::GetEmptyString()) {
    link_text_ = new ::std::string;
  }
  return link_text_;
}
inline ::std::string* AppNotification::release_link_text() {
  clear_has_link_text();
  if (link_text_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = link_text_;
    link_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AppNotification::set_allocated_link_text(::std::string* link_text) {
  if (link_text_ != &::google::protobuf::internal::GetEmptyString()) {
    delete link_text_;
  }
  if (link_text) {
    set_has_link_text();
    link_text_ = link_text;
  } else {
    clear_has_link_text();
    link_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_app_5fnotification_5fspecifics_2eproto__INCLUDED
